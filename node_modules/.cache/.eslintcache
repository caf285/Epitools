[{"/var/www/pathogen-intelligence.tgen.org/epitools/src/index.js":"1","/var/www/pathogen-intelligence.tgen.org/epitools/src/App.js":"2","/var/www/pathogen-intelligence.tgen.org/epitools/src/reportWebVitals.js":"3","/var/www/pathogen-intelligence.tgen.org/epitools/src/nav/Header.js":"4","/var/www/pathogen-intelligence.tgen.org/epitools/src/nav/Body.js":"5","/var/www/pathogen-intelligence.tgen.org/epitools/src/nav/Footer.js":"6","/var/www/pathogen-intelligence.tgen.org/epitools/src/demo/DemoPhylocanvas.js":"7","/var/www/pathogen-intelligence.tgen.org/epitools/src/demo/DemoLeaflet.js":"8","/var/www/pathogen-intelligence.tgen.org/epitools/src/demo/DemoPlotly.js":"9","/var/www/pathogen-intelligence.tgen.org/epitools/src/leaflet/Leaflet.js":"10","/var/www/pathogen-intelligence.tgen.org/epitools/src/plotly/Plotly.js":"11","/var/www/pathogen-intelligence.tgen.org/epitools/src/phylocanvas/Phylocanvas.js":"12","/var/www/pathogen-intelligence.tgen.org/epitools/src/gas/GAS.js":"13","/var/www/pathogen-intelligence.tgen.org/epitools/src/svgButton/SvgButton.js":"14","/var/www/pathogen-intelligence.tgen.org/epitools/src/phylocanvas/PhylocanvasOverlay.js":"15"},{"size":506,"mtime":1629227174780,"results":"16","hashOfConfig":"17"},{"size":346,"mtime":1629227174780,"results":"18","hashOfConfig":"17"},{"size":362,"mtime":1629227174784,"results":"19","hashOfConfig":"17"},{"size":1019,"mtime":1642025463151,"results":"20","hashOfConfig":"17"},{"size":1350,"mtime":1642027531080,"results":"21","hashOfConfig":"17"},{"size":152,"mtime":1642025496136,"results":"22","hashOfConfig":"17"},{"size":215,"mtime":1645723121654,"results":"23","hashOfConfig":"17"},{"size":880,"mtime":1629403230896,"results":"24","hashOfConfig":"17"},{"size":1518,"mtime":1629314820836,"results":"25","hashOfConfig":"17"},{"size":1139,"mtime":1629739488096,"results":"26","hashOfConfig":"17"},{"size":260,"mtime":1629312659952,"results":"27","hashOfConfig":"17"},{"size":4741,"mtime":1642612222886,"results":"28","hashOfConfig":"17"},{"size":215,"mtime":1645049692896,"results":"29","hashOfConfig":"17"},{"size":2806,"mtime":1645049818972,"results":"30","hashOfConfig":"17"},{"size":8842,"mtime":1645049595666,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"mku1qs",{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"34"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"34"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"34"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"34"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"34"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"34"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"34"},"/var/www/pathogen-intelligence.tgen.org/epitools/src/index.js",[],["70","71"],"/var/www/pathogen-intelligence.tgen.org/epitools/src/App.js",[],"/var/www/pathogen-intelligence.tgen.org/epitools/src/reportWebVitals.js",[],"/var/www/pathogen-intelligence.tgen.org/epitools/src/nav/Header.js",[],"/var/www/pathogen-intelligence.tgen.org/epitools/src/nav/Body.js",[],"/var/www/pathogen-intelligence.tgen.org/epitools/src/nav/Footer.js",[],"/var/www/pathogen-intelligence.tgen.org/epitools/src/demo/DemoPhylocanvas.js",["72","73"],"/var/www/pathogen-intelligence.tgen.org/epitools/src/demo/DemoLeaflet.js",["74","75"],"import React, { useEffect, useState } from \"react\";\nimport Leaflet from \"../leaflet/Leaflet.js\";\n\nfunction LeafletView() {\n  const [center, setCenter] = useState([35.2, -111.65]);\n  const [zoom, setZoom] = useState(6)\n\n  useEffect(() => {\n    document.getElementById(\"demoLeafletXCenter\").value = center[0]\n    document.getElementById(\"demoLeafletYCenter\").value = center[1]\n  }, [])  \n\n  return (\n    <div>\n      <h1>Leaflet Demo</h1>\n      <Leaflet\n        center = {center}\n        zoom = {zoom}\n      />\n      <h5>Marker Position:</h5>\n      X: <input id=\"demoLeafletXCenter\" onChange={() => {setCenter([document.getElementById(\"demoLeafletXCenter\").value, center[1]])}}></input>\n      &emsp;Y: <input id=\"demoLeafletYCenter\" onChange={() => {setCenter([center[0], document.getElementById(\"demoLeafletYCenter\").value])}}></input>\n    </div>\n  )\n}\n\nexport default LeafletView;\n","/var/www/pathogen-intelligence.tgen.org/epitools/src/demo/DemoPlotly.js",["76"],"import React, {useEffect, useState} from \"react\";\nimport Plotly from \"../plotly/Plotly.js\";\n\nfunction PlotlyView() {\n  const [x, setX] = useState([\"data1\", \"data2\"]);\n  const [y, setY] = useState([15, 20]);\n  const [type, setType] = useState(\"bar\");\n\n  useEffect(() => {\n    document.getElementById(\"demoPlotlyXLabel\").value = x[0]\n    document.getElementById(\"demoPlotlyYLabel\").value = x[1]\n    document.getElementById(\"demoPlotlyXValue\").value = y[0]\n    document.getElementById(\"demoPlotlyYValue\").value = y[1]\n  }, [])\n\n  return (\n    <div>\n      <h1>Plotly Demo</h1>\n      <Plotly\n        data = {\n          [\n            {\n              x: x,\n              y: y,\n              type: type\n            }\n          ]\n        }\n      />\n      <h5>Labels:</h5>\n      X: <input id=\"demoPlotlyXLabel\" onChange={() => setX([document.getElementById(\"demoPlotlyXLabel\").value, x[1]])}></input>\n      &emsp;Y: <input id=\"demoPlotlyYLabel\" onChange={() => setX([x[0], document.getElementById(\"demoPlotlyYLabel\").value])}></input>\n      <h5>Data:</h5>\n      X: <input id=\"demoPlotlyXValue\" onChange={() => setY([parseInt(document.getElementById(\"demoPlotlyXValue\").value), y[1]])}></input>\n      &emsp;Y: <input id=\"demoPlotlyYValue\" onChange={() => setY([y[0], parseInt(document.getElementById(\"demoPlotlyYValue\").value)])}></input>\n      <h5>Type:</h5>\n      <button onClick={() => setType(\"bar\")}>Bar</button>\n      <button onClick={() => setType(\"scatter\")}>Scatter</button>\n    </div>\n  )\n}\n\nexport default PlotlyView;\n","/var/www/pathogen-intelligence.tgen.org/epitools/src/leaflet/Leaflet.js",["77"],"import React, { useEffect, useRef } from \"react\";\nimport Leaflet from \"leaflet\";\nimport { MapContainer, TileLayer, Marker, Popup } from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport icon from 'leaflet/dist/images/marker-icon.png';\nimport iconShadow from 'leaflet/dist/images/marker-shadow.png';\nimport iconRetina from 'leaflet/dist/images/marker-icon-2x.png';\n\n/*function SetView() {\n  const map = useMapEvent('click', () => {\n    map.setCenter([0,0])\n  })\n  return null  \n}*/\n\nfunction LeafletView(props) {\n\n  delete Leaflet.Icon.Default.prototype._getIconUrl;\n  Leaflet.Icon.Default.mergeOptions({\n    iconRetinaUrl: iconRetina,\n    iconUrl: icon,\n    shadowUrl: iconShadow\n  });\n\n  useEffect(() => {\n  }, [props.center])\n\n  return (\n    <MapContainer style={{ height: '400px' }} center={props.center} zoom={props.zoom} scrollWheelZoom={false}>\n      <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" />\n      <Marker position={props.center}>\n        <Popup>\n          A pretty CSS3 popup. <br /> Easily customizable.\n        </Popup>\n      </Marker>\n    </MapContainer>\n  )\n}\n\nexport default LeafletView;\n","/var/www/pathogen-intelligence.tgen.org/epitools/src/plotly/Plotly.js",[],"/var/www/pathogen-intelligence.tgen.org/epitools/src/phylocanvas/Phylocanvas.js",["78","79","80","81","82","83"],"import React, { useEffect, useState, useRef } from \"react\";\nimport Phylocanvas, { utils } from \"phylocanvas\";\nimport scalebar from \"phylocanvas-plugin-scalebar\";\nimport branchLength from \"phylocanvas-plugin-branch-length\";\nimport root from \"phylocanvas-plugin-root\";\nimport pairwiseOps from \"phylocanvas-plugin-pairwise-ops\";\nimport treeStats from \"phylocanvas-plugin-tree-stats\";\nPhylocanvas.plugin(scalebar)\nPhylocanvas.plugin(branchLength)\nPhylocanvas.plugin(root)\nPhylocanvas.plugin(pairwiseOps)\nPhylocanvas.plugin(treeStats)\n\nconst { getPixelRatio } = utils.canvas;\n\nfunction PhylocanvasView(props) {\n  let phylocanvas = useRef();\n  let minHeight = 100\n  let minWidth = 100\n\n  // [height, width]\n  let [hw, _setHW] = useState([minHeight, minWidth])\n  let heightRef = useRef(hw[0])\n  let widthRef = useRef(hw[1])\n  let setHW = data => {\n    heightRef.current = data[0]\n    widthRef.current = data[1]\n    _setHW(data)\n  }\n\n  // [nodeSize, textSize, lineWidth]\n  let [textSize, _setTextSize] = useState(1);\n  let textSizeRef = useRef(textSize);\n  let setTextSize = data => {\n    textSizeRef.current = data;\n    _setTextSize(data);\n  }\n  let [nodeSize, _setNodeSize] = useState(1);\n  let nodeSizeRef = useRef(nodeSize);\n  let setNodeSize = data => {\n    nodeSizeRef.current = data;\n    _setNodeSize(data);\n  }\n\n  let typeList = useRef([\"radial\", \"rectangular\", \"circular\", \"diagonal\", \"hierarchical\"]);\n\n  //TODO: Fix height inheritance problem (relative height to window size without adding to window size for positive feedback loop)\n\n  useEffect(() => {\n    function handleResize() {\n      //setHeight(document.getElementsByClassName(\"Nav-body\")[0].clientHeight)\n      let newHeight = Math.max( Math.max( document.documentElement.clientHeight || 0, window.innerHeight || 0) - document.getElementsByClassName(\"Nav-header\")[0].clientHeight * 2, minHeight )\n      let newWidth = Math.max( document.documentElement.clientWidth || minWidth, window.innerWidth || minWidth, minWidth)\n      let heightDelta = heightRef.current / newHeight\n      let widthDelta = widthRef.current / newWidth\n      setHW([newHeight, newWidth])\n      phylocanvas.current.setTreeType(phylocanvas.current.treeType)\n      phylocanvas.current.setNodeSize(nodeSizeRef.current);\n      phylocanvas.current.setTextSize(textSizeRef.current);\n      if (phylocanvas.current.treeType == \"circular\") {\n      }\n      if (phylocanvas.current.treeType == \"rectangular\") {\n      }\n    }\n    function initialSize() {\n      window.dispatchEvent(new Event('resize')) \n      phylocanvas.current.setTreeType(phylocanvas.current.treeType)\n    } \n    window.addEventListener(\"resize\", handleResize);\n    window.addEventListener(\"load\", initialSize);\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n      window.removeEventListener(\"load\", initialSize);\n    };\n  }, [])\n\n  useEffect(() => {\n    phylocanvas.current = Phylocanvas.createTree(\"phylocanvas\")\n  }, [])\n\n  useEffect(() => {\n    phylocanvas.current.load(props.tree)\n  }, [props.tree])\n\n  useEffect(() => {\n    if (typeList.current.includes(props.type)) {\n      phylocanvas.current.setTreeType(props.type)\n    } else {\n      phylocanvas.current.setTreeType(\"rectangular\")\n    }\n    //setTextSize(props.textSize * getPixelRatio(phylocanvas.current.canvas) / 2);\n    phylocanvas.current.setNodeSize(nodeSizeRef.current)\n    phylocanvas.current.setTextSize(textSizeRef.current)\n    phylocanvas.current.lineWidth = props.lineWidth * getPixelRatio(phylocanvas.current.canvas) / 2\n }, [props.type])\n\n  useEffect(() => {\n    setNodeSize(props.nodeSize * getPixelRatio(phylocanvas.current.canvas) / 2)\n    phylocanvas.current.setNodeSize(nodeSizeRef.current)\n  }, [props.nodeSize])\n\n  useEffect(() => {\n    setTextSize(props.textSize * getPixelRatio(phylocanvas.current.canvas) / 2);\n    phylocanvas.current.setTextSize(textSizeRef.current)\n  }, [props.textSize])\n\n  useEffect(() => {\n    phylocanvas.current.showLabels = props.labels\n    phylocanvas.current.alignLabels = props.align\n    phylocanvas.current.lineWidth = props.lineWidth * getPixelRatio(phylocanvas.current.canvas) / 2\n    phylocanvas.current.draw()\n  }, [props.labels, props.align, props.lineWidth])\n\n  useEffect(() => {\n    phylocanvas.current.pairwiseOps.clusterDistance = props.clusterDistance\n    phylocanvas.current.pairwiseOps.clusterSamples = props.clusterSamples\n    console.log(phylocanvas.current)\n    phylocanvas.current.pairwiseOps.clusterDraw = true\n    phylocanvas.current.draw()\n  }, [props.clusterDistance, props.clusterSamples])\n\n  return (\n    <div id=\"phylocanvas\" style={{height: heightRef.current + \"px\", width: \"100%\", minHeight: minHeight + \"px\", minWidth: minWidth + \"px\"}}></div>\n  )\n}\n\nexport default PhylocanvasView;\n","/var/www/pathogen-intelligence.tgen.org/epitools/src/gas/GAS.js",["84","85"],"import React, {useEffect, useState} from \"react\";\n\nimport Phylocanvas from \"../phylocanvas/PhylocanvasOverlay.js\";\n\nfunction PhylocanvasView() {\n  return (\n    <Phylocanvas />\n  )\n}\n\nexport default PhylocanvasView;\n","/var/www/pathogen-intelligence.tgen.org/epitools/src/svgButton/SvgButton.js",["86","87"],"import React, { useEffect, useState, useRef } from \"react\";\n\nimport Button from '@mui/material/Button';\nimport IconButton from '@mui/material/IconButton';\nimport SvgIcon from '@mui/material/SvgIcon';\nimport Chip from '@mui/material/Chip';\nimport ArrowDropDownIcon from '@mui/icons-material/ArrowDropDown';\n\nfunction SvgButton(props) {\n\n  let svgList = useRef(\n    {\n      \"blank\": \"\",\n      \"menuSettings\": \"m1,12h20z m0,-6h20z m0,12h20z\",\n      \"menuContext\": \"m1,6h4z m4,0a2,2,0,1,0,4,0a2,2,0,1,0,-4,0z m7,0h9z m9,6h-4z m-4,0a2,2,0,1,0,-4,0a2,2,0,1,0,4,0z m-7,0h-9z m-9,6h8z m8,0a2,2,0,1,0,4,0a2,2,0,1,0,-4,0z m7,0h5z\",\n      \"treeRadial\": \"m11,12l-10,1zl0,-6zl4,3z m0,-6l-3,-4zl5,-4z m4,9l-1,7zl6,-1z\",\n      \"treeRectangular\": \"m4,4h14zv13z m0,7h-3z  m6,6h-6zv-6zv4z m0,-6h12z m0,10h9z\",\n      \"treeCircular\": \"m11,12l3.5,3.5z m-5,0h-5za5,5,0,1,0,8.5,-3.5a5,5,0,1,1,-8.5,3.5z m8.5,-3.5l3.5,-3.5z m-3,-6.5a10,10,0,0,1,0,20a10,10,0,0,0,0,-20z m-8,3.5a10,10,0,0,0,0,13a10,10,0,0,1,0,-13z\",\n      \"treeDiagonal\": \"m0,12l18,-9zl18,9z m8,-4l10,5z\",\n      \"treeHierarchical\": \"m19,5v14zh-13z m-7,0v-3z m-6,6v-6zh-4zh6z m6,0v12z m-10,0v9z\"\n    }\n  );\n\n  let [svg, setSvg] = useState(svgList.current[\"blank\"]);\n  let [label, setLabel] = useState(\"\");\n  let [drop, setDrop] = useState(false);\n\n  useEffect(() => {\n    setSvg(svgList.current[props.svg])\n    setLabel(props.label)\n    setDrop(props.drop)\n  }, [])\n\n  function getDrop() {\n    if (drop) {\n      return (\n        props.onClick ? props.onClick : () => {}\n      )\n    }\n    return undefined;\n  }\n\n  function getIcon() {\n    if (svg) {\n      return (\n        <SvgIcon>\n          <path stroke=\"dimgray\" fill=\"transparent\" strokeWidth=\"2\" strokeLinejoin=\"round\" d={svg}></path>\n        </SvgIcon>\n      )\n    }\n    return undefined;\n  }\n\n  if (svg && !label && !drop) {\n    return (\n      <IconButton centerRipple={false} size=\"small\" onClick={props.onClick} sx={{backgroundColor: \"#ddd\", boxShadow: \"-1px 1px 1px rgba(0, 0, 0, .5)\", \"&:hover\": {boxShadow: \"-1px 1px 2px rgba(0, 0, 0, .7)\", backgroundColor: \"#eee\"}}}>\n        <SvgIcon sx={{height: 16, width: 16}}>\n          <path stroke=\"dimgray\" fill=\"transparent\" strokeWidth=\"2\" strokeLinejoin=\"round\" d={svg}></path>\n        </SvgIcon>\n      </IconButton>\n    )\n  } else {\n    return (\n      <Chip\n        onClick={props.onClick}\n        size=\"small\"\n        label={label ? label : undefined}\n        deleteIcon=<ArrowDropDownIcon />\n        onDelete={getDrop()}\n        sx={{backgroundColor: \"#ddd\", boxShadow: \"-1px 1px 1px rgba(0, 0, 0, .5)\", \"&:hover\": {boxShadow: \"-1px 1px 2px rgba(0, 0, 0, .7)\", backgroundColor: \"#eee\", cursor: \"pointer\"}}}\n        icon={getIcon()}\n        clickable\n        disableRipple={false}\n        centerRipple={false}\n      />\n    )\n  }\n}\n\nexport default SvgButton;\n","/var/www/pathogen-intelligence.tgen.org/epitools/src/phylocanvas/PhylocanvasOverlay.js",["88","89"],"import React, {useEffect, useState} from \"react\";\n\nimport IconButton from '@mui/material/IconButton';\nimport SvgIcon from '@mui/material/SvgIcon';\n\nimport SvgButton from \"../svgButton/SvgButton.js\";\n\nimport Phylocanvas from \"../phylocanvas/Phylocanvas.js\";\n\nfunction PhylocanvasView() {\n  const [tree, setTree] = useState(\"(A:1)B;\");\n  const [type, setType] = useState(\"radial\");\n  const [labels, setLabels] = useState(true);\n  const [align, setAlign] = useState(false);\n  const [nodeSize, setNodeSize] = useState(10);\n  const [textSize, setTextSize] = useState(15);\n  const [lineWidth, setLineWidth] = useState(2);\n  const [clusterDistance, setClusterDistance] = useState(3);\n  const [clusterSamples, setClusterSamples] = useState(3);\n\n  useEffect(() => {\n    setTree(\"((((((((GAS-TG262730-095:6.5,TG78255:6.5):2,TG93342:4):0.5,((((TG77939:0,(GAS-TG93657:0,GAS_TG93657:0):1,GAS-TG262282-095:4):0.5,((GAS-TG265461-095:0,(AZ_GAS_TG93637:0,GAS-TG93661:0,GAS_TG93661:0):2):1,(TG92312:0,TG92296:0):1):1.5,TG92248:3,((TG77951:1.5,((GAS-TG114483-xx-CL-USA-2018-081-JB:0,GAS-TG133136-095:1,GAS-TG265457-095:1,GAS-AZ00097772-095:5):0.5,GAS-TG262724-095:2.5):2.5):1.5,TG78167:1.5):4):3,TG78091:6):0.5,(((GAS-TG264245-095:2,(GAS-TG263365-095:0,GAS-TG264943-095:0):4):2,TG78195:5):0.5,((GAS-AZ00096535-095:0.5,(GAS-TG262761-095:0,TG92324:0,GAS-AZ00104982-095:2,GAS-TG263373-095:2):0.5):0.5,((GAS-TG133036-095:0,(GAS-TG264144-095:0,GAS-AZ00099104-095:2):2):1.5,(GAS-AZ00098934-095:0,GAS-TG113124-xx-CL-USA-2018-081-JB:0,GAS-AZ00096587-095:1):1.5):0.5):1.5):3.5):1.5):8,(((((((TG93354:2,TG78207:5):0.5,GAS-AZ00097136-095:11.5):0.5,GAS-TG133056-095:7.5):0.5,((GAS-TG114463-xx-CL-USA-2018-081-JB:1,TG92352:1):1,TG92304:3):10.5):0.5,((TG78139:3,TG78135:5):0.5,TG77975:3.5):0.5):1,GAS-TG264961-095:4):4,GAS-TG264410-095:14):12):15.5,(GAS-TG263371-095:0,48-P:1,((GAS-TG133148-095:0,GAS-TG132944-095:0,GAS-TG132972-095:0):2,(GAS-TG133052-095:0,GAS-TG133168-095:0):2):1,GAS-TG133128-095:1,(71-P:0,GAS-TG133016-095:0,GAS-TG133024-095:0,GAS-TG133084-095:0,GAS-TG133140-095:0):2):27.5):542,(((TG78063:0,TG78143:0):3.5,06_283016:7.5):14,TG93378:25):601):294.5,(((((((((GAS-TG93649:0,GAS_TG93649:0):3,Streptococcus-Group-A-TG93461:5):1,(GAS-TG133888-095:0,GAS-TG264954-095:0,GAS-TG265455-095:0,TG92284:0,GAS-TG253210-095:1,GAS-TG262286-095:1,GAS-TG262720-095:1,GAS-FMCTG95165-xx-CL-USA-2017-040-JB:2,GAS-TG133996-095:3):6):0.5,GAS-AZ00097292-095:8.5):2,GAS-TG262728-095:12):0.5,(((TG93242:5,GAS-TG257140-095:9):4,TG93382:4,TG92970:5):0.5,TG92252:11.5):0.5):5,GAS-TG132920-095:15):25.5,((((06_286011:0,TG93442:0):4,06_284001:9):3.5,TG78099:3.5,TG93346:9):1,(TG78075:6,TG78051:7):3):66.5):16,TG78271:52):849.5):14,(((((((((68-P:1,GAS-TG132860-095:2,(GAS-TG134544-095:0,GAS-TG253208-081:0,GAS-TG257032-095:0,GAS-TG265449-095:0,GAS-TG263375-095:1,(GAS-TG264402-095:0,GAS-TG264413-095:0):1,GAS-TG134548-095:2):7):1,(TG93621:2,GAS-TG257136-095:6):2,(GAS-TG253216-095:4,GAS-TG133124-095:6):4,TG92712:5,(GAS-TG132888-095:0,GAS-TG133164-095:0):7):0.5,TG93210:8.5):0.5,(((GAS_TG93689:3,GAS-TG133132-095:7):0.5,GAS-TG133160-095:4.5):0.5,(GAS-AZ00097462-095:0,GAS-TG264251-095:0):6.5):1,(((31316:0,31315:0,31642:0):2,(TG92736:0,TG92748:0,TG92752:0,TG92744:1):2,GAS-TG114447-xx-CL-USA-2018-081-JB:5):0.5,((TG92340:3,TG128496:4):0.5,GAS-TG262284-095:3.5):1.5):1.5,(GAS-TG132852-095:0,GAS-TG132904-095:0):8):0.5,TG92280:8.5):0.5,(((TG92364:0,GAS-TG132924-095:2,TG92220:2):0.5,GAS-TG133968-095:6.5):0.5,(TG92140:1,GAS-TG133988-095:2):1.5):2.5):0.5,((((((R:0,GAS-TG133876-095:1):2,TG93993:2,TG93625:4):0.5,GAS-TG132844-095:1.5):0.5,GAS-TG264242-095:5.5):0.5,(((TG92212:1.5,TG92148:3.5):2.5,GAS-TG264236-095:4.5):0.5,(((GAS-AZ00105903-095:0,GAS-TG264953-095:1):2,(GAS_TG93701:0,GAS_TG93705:0):2,(GAS-TG132916-095:0,GAS-TG133064-095:0):3):2.5,((GAS-AZ00106486-095:0,GAS-TG265363-095:0,(GAS-TG264231-095:0,GAS-AZ00097422-095:0,GAS-AZ00098554-095:0):2):1,GAS-TG134368-095:1,GAS-TG253222-095:1,GAS-TG134032-095:2):7.5):1.5):1.5):0.5,((GAS-TG262751-095:2,TG92756:7):2,((GAS-TG134064-095:0,GAS-TG264408-095:2):1.5,GAS-FMCTG98539-xx-CL-USA-2017-040-JB:2.5):4):0.5):0.5):121.5,((TG78103:4.5,TG93370:10.5):2,(TG93290:1.5,TG77991:3.5):4):136.5):337.5,(TG93262:3,TG78175:4):544.5):695):0;\");\n    setType(\"rectangular\");\n  }, [])\n\n  return (\n    <div>\n      <Phylocanvas\n        tree = {tree}\n        type = {type}\n        labels = {labels}\n        align = {align}\n        nodeSize = {nodeSize}\n        textSize = {textSize}\n        lineWidth = {lineWidth}\n        clusterDistance = {clusterDistance}\n        clusterSamples = {clusterSamples}\n      />\n      <h5>SVG:</h5>\n        <SvgButton onClick={() => setType(\"radial\")} svg=\"treeRadial\" />\n        <SvgButton onClick={() => setType(\"rectangular\")} svg=\"treeRectangular\" />\n        <SvgButton onClick={() => setType(\"circular\")} svg=\"treeCircular\" />\n        <SvgButton onClick={() => setType(\"diagonal\")} svg=\"treeDiagonal\" />\n        <SvgButton onClick={() => setType(\"hierarchical\")} svg=\"treeHierarchical\" />\n        <SvgButton svg=\"menuSettings\" />\n        <SvgButton svg=\"menuContext\" />\n      <h5>SVG With Label:</h5>\n        <SvgButton onClick={() => setType(\"radial\")} svg=\"treeRadial\" label=\"Radial\" />\n        <SvgButton onClick={() => setType(\"rectangular\")} svg=\"treeRectangular\" label=\"Rectangular\" />\n        <SvgButton onClick={() => setType(\"circular\")} svg=\"treeCircular\" label=\"Circular\" />\n        <SvgButton onClick={() => setType(\"diagonal\")} svg=\"treeDiagonal\" label=\"Diagonal\" />\n        <SvgButton onClick={() => setType(\"hierarchical\")} svg=\"treeHierarchical\" label=\"Hierarchical\" />\n        <SvgButton svg=\"menuSettings\" label=\"Settings Menu\" />\n        <SvgButton svg=\"menuContext\" label=\"Context Menu\" />\n      <h5>SVG With Drop:</h5>\n        <SvgButton onClick={() => setType(\"radial\")} svg=\"treeRadial\" drop={true} />\n        <SvgButton onClick={() => setType(\"rectangular\")} svg=\"treeRectangular\" drop={true} />\n        <SvgButton onClick={() => setType(\"circular\")} svg=\"treeCircular\" drop={true} />\n        <SvgButton onClick={() => setType(\"diagonal\")} svg=\"treeDiagonal\" drop={true} />\n        <SvgButton onClick={() => setType(\"hierarchical\")} svg=\"treeHierarchical\" drop={true} />\n        <SvgButton svg=\"menuSettings\" drop={true} />\n        <SvgButton svg=\"menuContext\" drop={true} />\n      <h5>SVG With Both:</h5>\n        <SvgButton onClick={() => setType(\"radial\")} svg=\"treeRadial\" label=\"Radial\" drop={true} />\n        <SvgButton onClick={() => setType(\"rectangular\")} svg=\"treeRectangular\" label=\"Rectangular\" drop={true} />\n        <SvgButton onClick={() => setType(\"circular\")} svg=\"treeCircular\" label=\"Circular\" drop={true} />\n        <SvgButton onClick={() => setType(\"diagonal\")} svg=\"treeDiagonal\" label=\"Diagonal\" drop={true} />\n        <SvgButton onClick={() => setType(\"hierarchical\")} svg=\"treeHierarchical\" label=\"Hierarchical\" drop={true} />\n        <SvgButton svg=\"menuSettings\" label=\"Settings Menu\" drop={true} />\n        <SvgButton svg=\"menuContext\" label=\"Context Menu\" drop={true} />\n      <h5>No SVG:</h5>\n        <SvgButton onClick={() => setType(\"radial\")} label=\"Radial\" drop={true} />\n        <SvgButton onClick={() => setType(\"rectangular\")} label=\"Rectangular\" drop={true} />\n        <SvgButton onClick={() => setType(\"circular\")} label=\"Circular\" drop={true} />\n        <SvgButton onClick={() => setType(\"diagonal\")} label=\"Diagonal\" drop={true} />\n        <SvgButton onClick={() => setType(\"hierarchical\")} label=\"Hierarchical\" drop={true} />\n        <SvgButton label=\"Settings Menu\" drop={true} />\n        <SvgButton label=\"Context Menu\" drop={true} />\n\n\n      <h5>Cluster Detection:</h5>\n        <button onClick={() => setClusterDistance(clusterDistance + 1)}>ClusterDistance + 1</button>\n        <button onClick={() => setClusterDistance(Math.max(clusterDistance - 1, 1))}>ClusterDistance - 1</button>\n        <button onClick={() => setClusterSamples(clusterSamples + 1)}>ClusterSamples + 1</button>\n        <button onClick={() => setClusterSamples(Math.max(clusterSamples - 1, 1))}>ClusterSamples - 1</button>\n      <h5>Toggle:</h5>\n        <button onClick={() => setLabels(!labels)}>Labels</button>\n        <button onClick={() => setAlign(!align)}>Align</button>\n      <h5>Style:</h5>\n        <button onClick={() => setNodeSize(nodeSize + 1)}>Node Size + 1</button>\n        <button onClick={() => setNodeSize(Math.max(nodeSize - 1, 1))}>Node Size - 1</button>\n        <button onClick={() => setTextSize(textSize + 1)}>Text Size + 1</button>\n        <button onClick={() => setTextSize(Math.max(textSize - 1, 1))}>Text Size - 1</button>\n        <button onClick={() => setLineWidth(lineWidth + 1)}>Line Width + 1</button>\n        <button onClick={() => setLineWidth(Math.max(lineWidth - 1, 1))}>Line Width - 1</button>\n    </div>\n  )\n}\n\nexport default PhylocanvasView;\n",{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","severity":1,"message":"95","line":1,"column":16,"nodeType":"96","messageId":"97","endLine":1,"endColumn":25},{"ruleId":"94","severity":1,"message":"98","line":1,"column":27,"nodeType":"96","messageId":"97","endLine":1,"endColumn":35},{"ruleId":"94","severity":1,"message":"99","line":6,"column":16,"nodeType":"96","messageId":"97","endLine":6,"endColumn":23},{"ruleId":"100","severity":1,"message":"101","line":11,"column":6,"nodeType":"102","endLine":11,"endColumn":8,"suggestions":"103"},{"ruleId":"100","severity":1,"message":"104","line":14,"column":6,"nodeType":"102","endLine":14,"endColumn":8,"suggestions":"105"},{"ruleId":"94","severity":1,"message":"106","line":1,"column":28,"nodeType":"96","messageId":"97","endLine":1,"endColumn":34},{"ruleId":"94","severity":1,"message":"107","line":54,"column":11,"nodeType":"96","messageId":"97","endLine":54,"endColumn":22},{"ruleId":"94","severity":1,"message":"108","line":55,"column":11,"nodeType":"96","messageId":"97","endLine":55,"endColumn":21},{"ruleId":"109","severity":1,"message":"110","line":60,"column":40,"nodeType":"111","messageId":"112","endLine":60,"endColumn":42},{"ruleId":"109","severity":1,"message":"110","line":62,"column":40,"nodeType":"111","messageId":"112","endLine":62,"endColumn":42},{"ruleId":"100","severity":1,"message":"113","line":75,"column":6,"nodeType":"102","endLine":75,"endColumn":8,"suggestions":"114"},{"ruleId":"100","severity":1,"message":"115","line":95,"column":5,"nodeType":"102","endLine":95,"endColumn":17,"suggestions":"116"},{"ruleId":"94","severity":1,"message":"95","line":1,"column":16,"nodeType":"96","messageId":"97","endLine":1,"endColumn":25},{"ruleId":"94","severity":1,"message":"98","line":1,"column":27,"nodeType":"96","messageId":"97","endLine":1,"endColumn":35},{"ruleId":"94","severity":1,"message":"117","line":3,"column":8,"nodeType":"96","messageId":"97","endLine":3,"endColumn":14},{"ruleId":"100","severity":1,"message":"118","line":32,"column":6,"nodeType":"102","endLine":32,"endColumn":8,"suggestions":"119"},{"ruleId":"94","severity":1,"message":"120","line":3,"column":8,"nodeType":"96","messageId":"97","endLine":3,"endColumn":18},{"ruleId":"94","severity":1,"message":"121","line":4,"column":8,"nodeType":"96","messageId":"97","endLine":4,"endColumn":15},"no-native-reassign",["122"],"no-negated-in-lhs",["123"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'setZoom' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'center'. Either include it or remove the dependency array.","ArrayExpression",["124"],"React Hook useEffect has missing dependencies: 'x' and 'y'. Either include them or remove the dependency array.",["125"],"'useRef' is defined but never used.","'heightDelta' is assigned a value but never used.","'widthDelta' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'minHeight' and 'minWidth'. Either include them or remove the dependency array.",["126"],"React Hook useEffect has a missing dependency: 'props.lineWidth'. Either include it or remove the dependency array.",["127"],"'Button' is defined but never used.","React Hook useEffect has missing dependencies: 'props.drop', 'props.label', and 'props.svg'. Either include them or remove the dependency array. If 'setSvg' needs the current value of 'props.svg', you can also switch to useReducer instead of useState and read 'props.svg' in the reducer.",["128"],"'IconButton' is defined but never used.","'SvgIcon' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"129","fix":"130"},{"desc":"131","fix":"132"},{"desc":"133","fix":"134"},{"desc":"135","fix":"136"},{"desc":"137","fix":"138"},"Update the dependencies array to be: [center]",{"range":"139","text":"140"},"Update the dependencies array to be: [x, y]",{"range":"141","text":"142"},"Update the dependencies array to be: [minHeight, minWidth]",{"range":"143","text":"144"},"Update the dependencies array to be: [props.lineWidth, props.type]",{"range":"145","text":"146"},"Update the dependencies array to be: [props.drop, props.label, props.svg]",{"range":"147","text":"148"},[380,382],"[center]",[520,522],"[x, y]",[2845,2847],"[minHeight, minWidth]",[3517,3529],"[props.lineWidth, props.type]",[1402,1404],"[props.drop, props.label, props.svg]"]