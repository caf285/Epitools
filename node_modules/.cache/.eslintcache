[{"/var/www/pathogen-intelligence.tgen.org/epitools/src/index.js":"1","/var/www/pathogen-intelligence.tgen.org/epitools/src/App.js":"2","/var/www/pathogen-intelligence.tgen.org/epitools/src/reportWebVitals.js":"3","/var/www/pathogen-intelligence.tgen.org/epitools/src/nav/Header.js":"4","/var/www/pathogen-intelligence.tgen.org/epitools/src/nav/Body.js":"5","/var/www/pathogen-intelligence.tgen.org/epitools/src/nav/Footer.js":"6","/var/www/pathogen-intelligence.tgen.org/epitools/src/demo/DemoPhylocanvas.js":"7","/var/www/pathogen-intelligence.tgen.org/epitools/src/demo/DemoLeaflet.js":"8","/var/www/pathogen-intelligence.tgen.org/epitools/src/demo/DemoPlotly.js":"9","/var/www/pathogen-intelligence.tgen.org/epitools/src/leaflet/Leaflet.js":"10","/var/www/pathogen-intelligence.tgen.org/epitools/src/plotly/Plotly.js":"11","/var/www/pathogen-intelligence.tgen.org/epitools/src/phylocanvas/Phylocanvas.js":"12","/var/www/pathogen-intelligence.tgen.org/epitools/src/gas/GAS.js":"13","/var/www/pathogen-intelligence.tgen.org/epitools/src/svgButton/SvgButton.js":"14"},{"size":506,"mtime":1629227174780,"results":"15","hashOfConfig":"16"},{"size":346,"mtime":1629227174780,"results":"17","hashOfConfig":"16"},{"size":362,"mtime":1629227174784,"results":"18","hashOfConfig":"16"},{"size":1019,"mtime":1642025463151,"results":"19","hashOfConfig":"16"},{"size":1350,"mtime":1642027531080,"results":"20","hashOfConfig":"16"},{"size":152,"mtime":1642025496136,"results":"21","hashOfConfig":"16"},{"size":5977,"mtime":1634927675315,"results":"22","hashOfConfig":"16"},{"size":880,"mtime":1629403230896,"results":"23","hashOfConfig":"16"},{"size":1518,"mtime":1629314820836,"results":"24","hashOfConfig":"16"},{"size":1139,"mtime":1629739488096,"results":"25","hashOfConfig":"16"},{"size":260,"mtime":1629312659952,"results":"26","hashOfConfig":"16"},{"size":4741,"mtime":1642612222886,"results":"27","hashOfConfig":"16"},{"size":8842,"mtime":1645038994046,"results":"28","hashOfConfig":"16"},{"size":2805,"mtime":1645042260961,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"mku1qs",{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"32"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"32"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"32"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/var/www/pathogen-intelligence.tgen.org/epitools/src/index.js",[],["63","64"],"/var/www/pathogen-intelligence.tgen.org/epitools/src/App.js",[],"/var/www/pathogen-intelligence.tgen.org/epitools/src/reportWebVitals.js",[],"/var/www/pathogen-intelligence.tgen.org/epitools/src/nav/Header.js",[],"/var/www/pathogen-intelligence.tgen.org/epitools/src/nav/Body.js",[],"/var/www/pathogen-intelligence.tgen.org/epitools/src/nav/Footer.js",[],"/var/www/pathogen-intelligence.tgen.org/epitools/src/demo/DemoPhylocanvas.js",[],"/var/www/pathogen-intelligence.tgen.org/epitools/src/demo/DemoLeaflet.js",["65","66"],"import React, { useEffect, useState } from \"react\";\nimport Leaflet from \"../leaflet/Leaflet.js\";\n\nfunction LeafletView() {\n  const [center, setCenter] = useState([35.2, -111.65]);\n  const [zoom, setZoom] = useState(6)\n\n  useEffect(() => {\n    document.getElementById(\"demoLeafletXCenter\").value = center[0]\n    document.getElementById(\"demoLeafletYCenter\").value = center[1]\n  }, [])  \n\n  return (\n    <div>\n      <h1>Leaflet Demo</h1>\n      <Leaflet\n        center = {center}\n        zoom = {zoom}\n      />\n      <h5>Marker Position:</h5>\n      X: <input id=\"demoLeafletXCenter\" onChange={() => {setCenter([document.getElementById(\"demoLeafletXCenter\").value, center[1]])}}></input>\n      &emsp;Y: <input id=\"demoLeafletYCenter\" onChange={() => {setCenter([center[0], document.getElementById(\"demoLeafletYCenter\").value])}}></input>\n    </div>\n  )\n}\n\nexport default LeafletView;\n","/var/www/pathogen-intelligence.tgen.org/epitools/src/demo/DemoPlotly.js",["67"],"import React, {useEffect, useState} from \"react\";\nimport Plotly from \"../plotly/Plotly.js\";\n\nfunction PlotlyView() {\n  const [x, setX] = useState([\"data1\", \"data2\"]);\n  const [y, setY] = useState([15, 20]);\n  const [type, setType] = useState(\"bar\");\n\n  useEffect(() => {\n    document.getElementById(\"demoPlotlyXLabel\").value = x[0]\n    document.getElementById(\"demoPlotlyYLabel\").value = x[1]\n    document.getElementById(\"demoPlotlyXValue\").value = y[0]\n    document.getElementById(\"demoPlotlyYValue\").value = y[1]\n  }, [])\n\n  return (\n    <div>\n      <h1>Plotly Demo</h1>\n      <Plotly\n        data = {\n          [\n            {\n              x: x,\n              y: y,\n              type: type\n            }\n          ]\n        }\n      />\n      <h5>Labels:</h5>\n      X: <input id=\"demoPlotlyXLabel\" onChange={() => setX([document.getElementById(\"demoPlotlyXLabel\").value, x[1]])}></input>\n      &emsp;Y: <input id=\"demoPlotlyYLabel\" onChange={() => setX([x[0], document.getElementById(\"demoPlotlyYLabel\").value])}></input>\n      <h5>Data:</h5>\n      X: <input id=\"demoPlotlyXValue\" onChange={() => setY([parseInt(document.getElementById(\"demoPlotlyXValue\").value), y[1]])}></input>\n      &emsp;Y: <input id=\"demoPlotlyYValue\" onChange={() => setY([y[0], parseInt(document.getElementById(\"demoPlotlyYValue\").value)])}></input>\n      <h5>Type:</h5>\n      <button onClick={() => setType(\"bar\")}>Bar</button>\n      <button onClick={() => setType(\"scatter\")}>Scatter</button>\n    </div>\n  )\n}\n\nexport default PlotlyView;\n","/var/www/pathogen-intelligence.tgen.org/epitools/src/leaflet/Leaflet.js",["68"],"import React, { useEffect, useRef } from \"react\";\nimport Leaflet from \"leaflet\";\nimport { MapContainer, TileLayer, Marker, Popup } from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport icon from 'leaflet/dist/images/marker-icon.png';\nimport iconShadow from 'leaflet/dist/images/marker-shadow.png';\nimport iconRetina from 'leaflet/dist/images/marker-icon-2x.png';\n\n/*function SetView() {\n  const map = useMapEvent('click', () => {\n    map.setCenter([0,0])\n  })\n  return null  \n}*/\n\nfunction LeafletView(props) {\n\n  delete Leaflet.Icon.Default.prototype._getIconUrl;\n  Leaflet.Icon.Default.mergeOptions({\n    iconRetinaUrl: iconRetina,\n    iconUrl: icon,\n    shadowUrl: iconShadow\n  });\n\n  useEffect(() => {\n  }, [props.center])\n\n  return (\n    <MapContainer style={{ height: '400px' }} center={props.center} zoom={props.zoom} scrollWheelZoom={false}>\n      <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" />\n      <Marker position={props.center}>\n        <Popup>\n          A pretty CSS3 popup. <br /> Easily customizable.\n        </Popup>\n      </Marker>\n    </MapContainer>\n  )\n}\n\nexport default LeafletView;\n","/var/www/pathogen-intelligence.tgen.org/epitools/src/plotly/Plotly.js",[],"/var/www/pathogen-intelligence.tgen.org/epitools/src/phylocanvas/Phylocanvas.js",["69","70","71","72","73","74"],"import React, { useEffect, useState, useRef } from \"react\";\nimport Phylocanvas, { utils } from \"phylocanvas\";\nimport scalebar from \"phylocanvas-plugin-scalebar\";\nimport branchLength from \"phylocanvas-plugin-branch-length\";\nimport root from \"phylocanvas-plugin-root\";\nimport pairwiseOps from \"phylocanvas-plugin-pairwise-ops\";\nimport treeStats from \"phylocanvas-plugin-tree-stats\";\nPhylocanvas.plugin(scalebar)\nPhylocanvas.plugin(branchLength)\nPhylocanvas.plugin(root)\nPhylocanvas.plugin(pairwiseOps)\nPhylocanvas.plugin(treeStats)\n\nconst { getPixelRatio } = utils.canvas;\n\nfunction PhylocanvasView(props) {\n  let phylocanvas = useRef();\n  let minHeight = 100\n  let minWidth = 100\n\n  // [height, width]\n  let [hw, _setHW] = useState([minHeight, minWidth])\n  let heightRef = useRef(hw[0])\n  let widthRef = useRef(hw[1])\n  let setHW = data => {\n    heightRef.current = data[0]\n    widthRef.current = data[1]\n    _setHW(data)\n  }\n\n  // [nodeSize, textSize, lineWidth]\n  let [textSize, _setTextSize] = useState(1);\n  let textSizeRef = useRef(textSize);\n  let setTextSize = data => {\n    textSizeRef.current = data;\n    _setTextSize(data);\n  }\n  let [nodeSize, _setNodeSize] = useState(1);\n  let nodeSizeRef = useRef(nodeSize);\n  let setNodeSize = data => {\n    nodeSizeRef.current = data;\n    _setNodeSize(data);\n  }\n\n  let typeList = useRef([\"radial\", \"rectangular\", \"circular\", \"diagonal\", \"hierarchical\"]);\n\n  //TODO: Fix height inheritance problem (relative height to window size without adding to window size for positive feedback loop)\n\n  useEffect(() => {\n    function handleResize() {\n      //setHeight(document.getElementsByClassName(\"Nav-body\")[0].clientHeight)\n      let newHeight = Math.max( Math.max( document.documentElement.clientHeight || 0, window.innerHeight || 0) - document.getElementsByClassName(\"Nav-header\")[0].clientHeight * 2, minHeight )\n      let newWidth = Math.max( document.documentElement.clientWidth || minWidth, window.innerWidth || minWidth, minWidth)\n      let heightDelta = heightRef.current / newHeight\n      let widthDelta = widthRef.current / newWidth\n      setHW([newHeight, newWidth])\n      phylocanvas.current.setTreeType(phylocanvas.current.treeType)\n      phylocanvas.current.setNodeSize(nodeSizeRef.current);\n      phylocanvas.current.setTextSize(textSizeRef.current);\n      if (phylocanvas.current.treeType == \"circular\") {\n      }\n      if (phylocanvas.current.treeType == \"rectangular\") {\n      }\n    }\n    function initialSize() {\n      window.dispatchEvent(new Event('resize')) \n      phylocanvas.current.setTreeType(phylocanvas.current.treeType)\n    } \n    window.addEventListener(\"resize\", handleResize);\n    window.addEventListener(\"load\", initialSize);\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n      window.removeEventListener(\"load\", initialSize);\n    };\n  }, [])\n\n  useEffect(() => {\n    phylocanvas.current = Phylocanvas.createTree(\"phylocanvas\")\n  }, [])\n\n  useEffect(() => {\n    phylocanvas.current.load(props.tree)\n  }, [props.tree])\n\n  useEffect(() => {\n    if (typeList.current.includes(props.type)) {\n      phylocanvas.current.setTreeType(props.type)\n    } else {\n      phylocanvas.current.setTreeType(\"rectangular\")\n    }\n    //setTextSize(props.textSize * getPixelRatio(phylocanvas.current.canvas) / 2);\n    phylocanvas.current.setNodeSize(nodeSizeRef.current)\n    phylocanvas.current.setTextSize(textSizeRef.current)\n    phylocanvas.current.lineWidth = props.lineWidth * getPixelRatio(phylocanvas.current.canvas) / 2\n }, [props.type])\n\n  useEffect(() => {\n    setNodeSize(props.nodeSize * getPixelRatio(phylocanvas.current.canvas) / 2)\n    phylocanvas.current.setNodeSize(nodeSizeRef.current)\n  }, [props.nodeSize])\n\n  useEffect(() => {\n    setTextSize(props.textSize * getPixelRatio(phylocanvas.current.canvas) / 2);\n    phylocanvas.current.setTextSize(textSizeRef.current)\n  }, [props.textSize])\n\n  useEffect(() => {\n    phylocanvas.current.showLabels = props.labels\n    phylocanvas.current.alignLabels = props.align\n    phylocanvas.current.lineWidth = props.lineWidth * getPixelRatio(phylocanvas.current.canvas) / 2\n    phylocanvas.current.draw()\n  }, [props.labels, props.align, props.lineWidth])\n\n  useEffect(() => {\n    phylocanvas.current.pairwiseOps.clusterDistance = props.clusterDistance\n    phylocanvas.current.pairwiseOps.clusterSamples = props.clusterSamples\n    console.log(phylocanvas.current)\n    phylocanvas.current.pairwiseOps.clusterDraw = true\n    phylocanvas.current.draw()\n  }, [props.clusterDistance, props.clusterSamples])\n\n  return (\n    <div id=\"phylocanvas\" style={{height: heightRef.current + \"px\", width: \"100%\", minHeight: minHeight + \"px\", minWidth: minWidth + \"px\"}}></div>\n  )\n}\n\nexport default PhylocanvasView;\n","/var/www/pathogen-intelligence.tgen.org/epitools/src/gas/GAS.js",["75","76"],"/var/www/pathogen-intelligence.tgen.org/epitools/src/svgButton/SvgButton.js",["77","78"],{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","severity":1,"message":"84","line":6,"column":16,"nodeType":"85","messageId":"86","endLine":6,"endColumn":23},{"ruleId":"87","severity":1,"message":"88","line":11,"column":6,"nodeType":"89","endLine":11,"endColumn":8,"suggestions":"90"},{"ruleId":"87","severity":1,"message":"91","line":14,"column":6,"nodeType":"89","endLine":14,"endColumn":8,"suggestions":"92"},{"ruleId":"83","severity":1,"message":"93","line":1,"column":28,"nodeType":"85","messageId":"86","endLine":1,"endColumn":34},{"ruleId":"83","severity":1,"message":"94","line":54,"column":11,"nodeType":"85","messageId":"86","endLine":54,"endColumn":22},{"ruleId":"83","severity":1,"message":"95","line":55,"column":11,"nodeType":"85","messageId":"86","endLine":55,"endColumn":21},{"ruleId":"96","severity":1,"message":"97","line":60,"column":40,"nodeType":"98","messageId":"99","endLine":60,"endColumn":42},{"ruleId":"96","severity":1,"message":"97","line":62,"column":40,"nodeType":"98","messageId":"99","endLine":62,"endColumn":42},{"ruleId":"87","severity":1,"message":"100","line":75,"column":6,"nodeType":"89","endLine":75,"endColumn":8,"suggestions":"101"},{"ruleId":"87","severity":1,"message":"102","line":95,"column":5,"nodeType":"89","endLine":95,"endColumn":17,"suggestions":"103"},{"ruleId":"83","severity":1,"message":"104","line":3,"column":8,"nodeType":"85","messageId":"86","endLine":3,"endColumn":18},{"ruleId":"83","severity":1,"message":"105","line":4,"column":8,"nodeType":"85","messageId":"86","endLine":4,"endColumn":15},{"ruleId":"83","severity":1,"message":"106","line":3,"column":8,"nodeType":"85","messageId":"86","endLine":3,"endColumn":14},{"ruleId":"87","severity":1,"message":"107","line":32,"column":6,"nodeType":"89","endLine":32,"endColumn":8,"suggestions":"108"},"no-native-reassign",["109"],"no-negated-in-lhs",["110"],"no-unused-vars","'setZoom' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'center'. Either include it or remove the dependency array.","ArrayExpression",["111"],"React Hook useEffect has missing dependencies: 'x' and 'y'. Either include them or remove the dependency array.",["112"],"'useRef' is defined but never used.","'heightDelta' is assigned a value but never used.","'widthDelta' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'minHeight' and 'minWidth'. Either include them or remove the dependency array.",["113"],"React Hook useEffect has a missing dependency: 'props.lineWidth'. Either include it or remove the dependency array.",["114"],"'IconButton' is defined but never used.","'SvgIcon' is defined but never used.","'Button' is defined but never used.","React Hook useEffect has missing dependencies: 'props.drop', 'props.label', and 'props.svg'. Either include them or remove the dependency array. If 'setSvg' needs the current value of 'props.svg', you can also switch to useReducer instead of useState and read 'props.svg' in the reducer.",["115"],"no-global-assign","no-unsafe-negation",{"desc":"116","fix":"117"},{"desc":"118","fix":"119"},{"desc":"120","fix":"121"},{"desc":"122","fix":"123"},{"desc":"124","fix":"125"},"Update the dependencies array to be: [center]",{"range":"126","text":"127"},"Update the dependencies array to be: [x, y]",{"range":"128","text":"129"},"Update the dependencies array to be: [minHeight, minWidth]",{"range":"130","text":"131"},"Update the dependencies array to be: [props.lineWidth, props.type]",{"range":"132","text":"133"},"Update the dependencies array to be: [props.drop, props.label, props.svg]",{"range":"134","text":"135"},[380,382],"[center]",[520,522],"[x, y]",[2845,2847],"[minHeight, minWidth]",[3517,3529],"[props.lineWidth, props.type]",[1402,1404],"[props.drop, props.label, props.svg]"]