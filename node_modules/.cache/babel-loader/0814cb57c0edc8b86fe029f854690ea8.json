{"ast":null,"code":"import { Tree, utils } from 'phylocanvas';\nconst {\n  getPixelRatio\n} = utils.canvas;\nconst DEFAULTS = {\n  active: true\n};\n\nfunction drawStats() {}\n\nexport default function plugin(decorate) {\n  decorate(this, 'createTree', (delegate, args) => {\n    const tree = delegate(...args);\n    const [, config = {}] = args;\n    tree.treeStats = Object.assign({}, DEFAULTS, config.treeStats || {});\n    return tree;\n  });\n  decorate(Tree, 'load', function (delegate, args) {\n    delegate.apply(this, args);\n\n    if (this.treeStats.active) {\n      console.log(this.leaves[0]);\n      let ctx = this.canvas;\n      console.log(ctx);\n      let path = new Path2D();\n      console.log(path);\n      path.moveTo(this.leaves[0].startx, this.leaves[0].starty);\n      path.lineTo(0, 0);\n      path.lineTo(0, 400);\n      path.lineTo(this.leaves[0].startx, this.leaves[0].starty);\n      path.closePath();\n      this.addListener('mousemove', e => {\n        if (this.canvas.isPointInPath(path, e.offsetX, e.offsetY)) {\n          ctx.stroke(path);\n          console.log(e.offsetX, e.offsetY);\n        }\n      }); //for (let leaf of this.leaves) {\n      //console.log(leaf)\n      //}\n    }\n  });\n}","map":{"version":3,"sources":["/var/www/pathogen-intelligence.tgen.org/epitools/my_modules/phylocanvas-plugin-tree-stats/index.js"],"names":["Tree","utils","getPixelRatio","canvas","DEFAULTS","active","drawStats","plugin","decorate","delegate","args","tree","config","treeStats","Object","assign","apply","console","log","leaves","ctx","path","Path2D","moveTo","startx","starty","lineTo","closePath","addListener","e","isPointInPath","offsetX","offsetY","stroke"],"mappings":"AAAA,SAASA,IAAT,EAAeC,KAAf,QAA4B,aAA5B;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAoBD,KAAK,CAACE,MAAhC;AAEA,MAAMC,QAAQ,GAAG;AACfC,EAAAA,MAAM,EAAE;AADO,CAAjB;;AAIA,SAASC,SAAT,GAAqB,CACpB;;AAED,eAAe,SAASC,MAAT,CAAgBC,QAAhB,EAA0B;AACvCA,EAAAA,QAAQ,CAAC,IAAD,EAAO,YAAP,EAAqB,CAACC,QAAD,EAAWC,IAAX,KAAoB;AAC/C,UAAMC,IAAI,GAAGF,QAAQ,CAAC,GAAGC,IAAJ,CAArB;AACA,UAAM,GAAIE,MAAM,GAAG,EAAb,IAAoBF,IAA1B;AACAC,IAAAA,IAAI,CAACE,SAAL,GAAiBC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBX,QAAlB,EAA4BQ,MAAM,CAACC,SAAP,IAAoB,EAAhD,CAAjB;AACA,WAAOF,IAAP;AACD,GALO,CAAR;AAMAH,EAAAA,QAAQ,CAACR,IAAD,EAAO,MAAP,EAAe,UAAUS,QAAV,EAAoBC,IAApB,EAA0B;AAC/CD,IAAAA,QAAQ,CAACO,KAAT,CAAe,IAAf,EAAqBN,IAArB;;AAEA,QAAI,KAAKG,SAAL,CAAeR,MAAnB,EAA2B;AAEzBY,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,MAAL,CAAY,CAAZ,CAAZ;AACA,UAAIC,GAAG,GAAG,KAAKjB,MAAf;AACAc,MAAAA,OAAO,CAACC,GAAR,CAAYE,GAAZ;AACA,UAAIC,IAAI,GAAG,IAAIC,MAAJ,EAAX;AACAL,MAAAA,OAAO,CAACC,GAAR,CAAYG,IAAZ;AACAA,MAAAA,IAAI,CAACE,MAAL,CAAY,KAAKJ,MAAL,CAAY,CAAZ,EAAeK,MAA3B,EAAmC,KAAKL,MAAL,CAAY,CAAZ,EAAeM,MAAlD;AACAJ,MAAAA,IAAI,CAACK,MAAL,CAAY,CAAZ,EAAc,CAAd;AACAL,MAAAA,IAAI,CAACK,MAAL,CAAY,CAAZ,EAAe,GAAf;AACAL,MAAAA,IAAI,CAACK,MAAL,CAAY,KAAKP,MAAL,CAAY,CAAZ,EAAeK,MAA3B,EAAmC,KAAKL,MAAL,CAAY,CAAZ,EAAeM,MAAlD;AACAJ,MAAAA,IAAI,CAACM,SAAL;AACA,WAAKC,WAAL,CAAiB,WAAjB,EAA+BC,CAAD,IAAO;AACnC,YAAI,KAAK1B,MAAL,CAAY2B,aAAZ,CAA0BT,IAA1B,EAAgCQ,CAAC,CAACE,OAAlC,EAA2CF,CAAC,CAACG,OAA7C,CAAJ,EAA2D;AACzDZ,UAAAA,GAAG,CAACa,MAAJ,CAAWZ,IAAX;AACAJ,UAAAA,OAAO,CAACC,GAAR,CAAYW,CAAC,CAACE,OAAd,EAAuBF,CAAC,CAACG,OAAzB;AACD;AACF,OALD,EAZyB,CAmBzB;AACE;AACF;AACD;AACF,GA1BO,CAAR;AA2BD","sourcesContent":["import { Tree, utils } from 'phylocanvas';\n\nconst { getPixelRatio } = utils.canvas;\n\nconst DEFAULTS = {\n  active: true,\n};\n\nfunction drawStats() {\n}\n\nexport default function plugin(decorate) {\n  decorate(this, 'createTree', (delegate, args) => {\n    const tree = delegate(...args);\n    const [ , config = {} ] = args;\n    tree.treeStats = Object.assign({}, DEFAULTS, config.treeStats || {});\n    return tree;\n  });\n  decorate(Tree, 'load', function (delegate, args) {\n    delegate.apply(this, args);\n    \n    if (this.treeStats.active) {\n\n      console.log(this.leaves[0])\n      let ctx = this.canvas\n      console.log(ctx)\n      let path = new Path2D()\n      console.log(path)\n      path.moveTo(this.leaves[0].startx, this.leaves[0].starty)\n      path.lineTo(0,0)\n      path.lineTo(0, 400)\n      path.lineTo(this.leaves[0].startx, this.leaves[0].starty)\n      path.closePath()\n      this.addListener('mousemove', (e) => {\n        if (this.canvas.isPointInPath(path, e.offsetX, e.offsetY)) {\n          ctx.stroke(path)\n          console.log(e.offsetX, e.offsetY)\n        }\n      })\n \n      //for (let leaf of this.leaves) {\n        //console.log(leaf)\n      //}\n    }\n  });\n}\n"]},"metadata":{},"sourceType":"module"}