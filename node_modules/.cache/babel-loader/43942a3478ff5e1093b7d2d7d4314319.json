{"ast":null,"code":"import { Tree, utils } from 'phylocanvas';\nconst {\n  getPixelRatio\n} = utils.canvas;\nconst DEFAULTS = {\n  active: true,\n  margin: 20,\n  textBaseLine: \"top\",\n  textAlign: \"left\"\n};\n\nfunction addListeners() {\n  const tree = this;\n  const ctx = this.canvas;\n  const canvas = ctx.canvas;\n  const pixelRatio = getPixelRatio(ctx);\n  const {\n    treeStats,\n    textSize\n  } = this;\n\n  if (this.treeStats.active) {\n    //cleanup old event listeners\n    for (let eventListener of this.eventListeners.mousemove.filter(eventListener => eventListener.listener.name == \"treeStatsListener\")) {\n      this.removeListener('mousemove', eventListener.listener, canvas);\n    }\n\n    console.log(this);\n\n    for (let leaf of this.leaves) {\n      this.addListener('mousemove', treeStatsListener, canvas);\n\n      function treeStatsListener(e) {\n        let path = new Path2D();\n        ctx.save();\n        ctx.font = `${tree.textSize * pixelRatio}px ${tree.font}`;\n        let width = ctx.measureText(leaf.label).width * pixelRatio * tree.zoom / tree.zoomFactor;\n        let lineWidth = ctx.measureText(\"M\").width * pixelRatio * tree.zoom / tree.zoomFactor;\n        let centerX = (tree.offsetx + (leaf.minx + leaf.maxx) * tree.zoom / pixelRatio / 2) * pixelRatio;\n        let centerY = (tree.offsety + (leaf.miny + leaf.maxy) * tree.zoom / pixelRatio / 2) * pixelRatio; //let startX = centerX + (-20 * Math.cos(leaf.angle))\n\n        let startX = centerX - tree.baseNodeSize * tree.zoom * Math.cos(leaf.angle);\n        let startY = centerY - tree.baseNodeSize * tree.zoom * Math.sin(leaf.angle);\n        let endX = centerX + (-tree.baseNodeSize * tree.zoom + leaf.getLabelStartX() * tree.zoom + width) * Math.cos(leaf.angle);\n        let endY = centerY + (-tree.baseNodeSize * tree.zoom + leaf.getLabelStartX() * tree.zoom + width) * Math.sin(leaf.angle);\n        ctx.strokeStyle = \"rgba(0, 0, 255, 0)\";\n        ctx.lineWidth = lineWidth;\n        path.moveTo(centerX, centerY);\n        path.lineTo(endX, endY);\n        path.closePath();\n        ctx.stroke(path);\n\n        if (ctx.isPointInStroke(path, e.offsetX * pixelRatio, e.offsetY * pixelRatio)) {\n          leaf.highlighted = true;\n          ctx.save();\n          ctx.fillStyle = \"rgba(240, 240, 240, 0.9)\";\n          let x = e.offsetX * pixelRatio;\n          let y = e.offsetY * pixelRatio; //ctx.clearRect(x + 20, y + 10, 200, 100)\n\n          ctx.fillRect(x + 20, y + 10, 200, 100);\n          ctx.fillStyle = \"rgb(0, 0, 0)\";\n          ctx.textBaseline = treeStats.textBaseLine;\n          ctx.textAlign = treeStats.textAlign;\n          console.log(treeStats);\n          ctx.fillText(leaf.label + \"\\n asdasd\", x + 20, y + 10);\n          ctx.restore();\n          console.log(leaf);\n        } else {\n          leaf.highlighted = false;\n        }\n\n        ctx.restore();\n      }\n    }\n  }\n}\n\nexport default function plugin(decorate) {\n  decorate(this, 'createTree', (delegate, args) => {\n    const tree = delegate(...args);\n    const [, config = {}] = args;\n    tree.treeStats = Object.assign({}, DEFAULTS, config.treeStats || {});\n    return tree;\n  });\n  decorate(Tree, 'load', function (delegate, args) {\n    delegate.apply(this, args);\n    addListeners.apply(this);\n    let ctx = this.canvas;\n    this.addListener('mousemove', e => {\n      let path = new Path2D();\n      path.moveTo(0, 0);\n      path.lineTo(e.offsetX * getPixelRatio(ctx), e.offsetY * getPixelRatio(ctx));\n      path.closePath();\n      ctx.stroke(path);\n    });\n  });\n}","map":{"version":3,"sources":["/var/www/pathogen-intelligence.tgen.org/epitools/my_modules/phylocanvas-plugin-tree-stats/index.js"],"names":["Tree","utils","getPixelRatio","canvas","DEFAULTS","active","margin","textBaseLine","textAlign","addListeners","tree","ctx","pixelRatio","treeStats","textSize","eventListener","eventListeners","mousemove","filter","listener","name","removeListener","console","log","leaf","leaves","addListener","treeStatsListener","e","path","Path2D","save","font","width","measureText","label","zoom","zoomFactor","lineWidth","centerX","offsetx","minx","maxx","centerY","offsety","miny","maxy","startX","baseNodeSize","Math","cos","angle","startY","sin","endX","getLabelStartX","endY","strokeStyle","moveTo","lineTo","closePath","stroke","isPointInStroke","offsetX","offsetY","highlighted","fillStyle","x","y","fillRect","textBaseline","fillText","restore","plugin","decorate","delegate","args","config","Object","assign","apply"],"mappings":"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","sourcesContent":["import { Tree, utils } from 'phylocanvas';\n\nconst { getPixelRatio } = utils.canvas;\n\nconst DEFAULTS = {\n  active: true,\n  margin: 20,\n  textBaseLine: \"top\",\n  textAlign: \"left\",\n};\n\nfunction addListeners() {\n  const tree = this\n  const ctx = this.canvas;\n  const canvas = ctx.canvas;\n  const pixelRatio = getPixelRatio(ctx);\n  const { treeStats, textSize } = this\n  if (this.treeStats.active) {\n      //cleanup old event listeners\n      for (let eventListener of this.eventListeners.mousemove.filter(eventListener => eventListener.listener.name == \"treeStatsListener\")) {\n        this.removeListener('mousemove', eventListener.listener, canvas)\n      }\n      console.log(this)\n      for (let leaf of this.leaves) {\n        this.addListener('mousemove', treeStatsListener, canvas)\n        function treeStatsListener(e) {\n          let path = new Path2D()\n\n          ctx.save()\n          ctx.font = `${tree.textSize * pixelRatio}px ${tree.font}`;\n          let width = ctx.measureText(leaf.label).width * pixelRatio * tree.zoom / tree.zoomFactor\n          let lineWidth = ctx.measureText(\"M\").width * pixelRatio * tree.zoom / tree.zoomFactor\n\n\n          let centerX = (tree.offsetx + (leaf.minx + leaf.maxx) * tree.zoom / pixelRatio / 2) * pixelRatio\n          let centerY = (tree.offsety + (leaf.miny + leaf.maxy) * tree.zoom / pixelRatio / 2) * pixelRatio\n          //let startX = centerX + (-20 * Math.cos(leaf.angle))\n          let startX = centerX - (tree.baseNodeSize * tree.zoom * Math.cos(leaf.angle))\n          let startY = centerY - (tree.baseNodeSize * tree.zoom * Math.sin(leaf.angle))\n          let endX = centerX + ((-tree.baseNodeSize * tree.zoom + leaf.getLabelStartX() * tree.zoom + width) * Math.cos(leaf.angle))\n          let endY = centerY + ((-tree.baseNodeSize * tree.zoom + leaf.getLabelStartX() * tree.zoom + width) * Math.sin(leaf.angle))\n\n\n          ctx.strokeStyle = \"rgba(0, 0, 255, 0)\"\n          ctx.lineWidth = lineWidth\n          path.moveTo(centerX, centerY)\n          path.lineTo(endX, endY)\n          path.closePath()\n          ctx.stroke(path)\n          if (ctx.isPointInStroke(path, e.offsetX * pixelRatio, e.offsetY * pixelRatio)) {\n            leaf.highlighted = true\n            ctx.save()\n            ctx.fillStyle = \"rgba(240, 240, 240, 0.9)\"\n            let x = e.offsetX * pixelRatio\n            let y = e.offsetY * pixelRatio\n            //ctx.clearRect(x + 20, y + 10, 200, 100)\n            ctx.fillRect(x + 20, y + 10, 200, 100)\n            ctx.fillStyle = \"rgb(0, 0, 0)\"\n            ctx.textBaseline = treeStats.textBaseLine\n            ctx.textAlign = treeStats.textAlign\n            console.log(treeStats)\n            ctx.fillText(leaf.label + \"\\n asdasd\", x + 20, y + 10)\n            ctx.restore()\n            console.log(leaf)\n          } else {\n            leaf.highlighted = false\n          }\n          ctx.restore()\n        }\n      }\n  }\n}\n\nexport default function plugin(decorate) {\n  decorate(this, 'createTree', (delegate, args) => {\n    const tree = delegate(...args);\n    const [ , config = {} ] = args;\n    tree.treeStats = Object.assign({}, DEFAULTS, config.treeStats || {});\n    return tree;\n  });\n  decorate(Tree, 'load', function (delegate, args) {\n    delegate.apply(this, args);\n    addListeners.apply(this)\n    let ctx = this.canvas\n    this.addListener('mousemove', (e) => {\n      let path = new Path2D()\n      path.moveTo(0, 0)\n      path.lineTo(e.offsetX * getPixelRatio(ctx), e.offsetY * getPixelRatio(ctx))\n      path.closePath()\n      ctx.stroke(path)\n    })\n\n  });\n}\n"]},"metadata":{},"sourceType":"module"}