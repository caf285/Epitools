{"ast":null,"code":"var _jsxFileName = \"/var/www/epitools/src/phylocanvas/Phylocanvas.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef } from \"react\";\nimport Phylocanvas from \"phylocanvas\";\nimport scalebar from \"phylocanvas-plugin-scalebar\";\nimport branchLength from \"phylocanvas-plugin-branch-length\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nPhylocanvas.plugin(scalebar);\nPhylocanvas.plugin(branchLength);\n\nfunction PhylocanvasView(props) {\n  _s();\n\n  let phylocanvas = useRef();\n  let typeList = useRef([\"radial\", \"rectangular\", \"circular\", \"diagonal\", \"hierarchical\"]);\n  useEffect(() => {\n    phylocanvas.current = Phylocanvas.createTree(\"phylocanvas\");\n  }, []);\n  useEffect(() => {\n    phylocanvas.current.load(props.tree);\n  }, [props.tree]);\n  useEffect(() => {\n    if (typeList.current.includes(props.type)) {\n      phylocanvas.current.setTreeType(props.type);\n    } else {\n      phylocanvas.current.setTreeType(\"circular\");\n    }\n  }, [props.type]);\n  useEffect(() => {\n    phylocanvas.current.showLabels = props.labels;\n    phylocanvas.current.alignLabels = props.align;\n    phylocanvas.current.setNodeSize(props.nodeSize);\n    phylocanvas.current.setTextSize(props.textSize);\n    phylocanvas.current.lineWidth = props.lineWidth;\n    phylocanvas.current.draw();\n    console.log(phylocanvas.current.branches);\n  }, [props.type, props.labels, props.align, props.nodeSize, props.textSize, props.lineWidth]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"phylocanvas\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PhylocanvasView, \"dSEtlhw9IjmYonjwNu6sHbHx4ig=\");\n\n_c = PhylocanvasView;\nexport default PhylocanvasView;\n\nvar _c;\n\n$RefreshReg$(_c, \"PhylocanvasView\");","map":{"version":3,"sources":["/var/www/epitools/src/phylocanvas/Phylocanvas.js"],"names":["React","useEffect","useRef","Phylocanvas","scalebar","branchLength","plugin","PhylocanvasView","props","phylocanvas","typeList","current","createTree","load","tree","includes","type","setTreeType","showLabels","labels","alignLabels","align","setNodeSize","nodeSize","setTextSize","textSize","lineWidth","draw","console","log","branches"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,QAAyC,OAAzC;AACA,OAAOC,WAAP,MAAwB,aAAxB;AACA,OAAOC,QAAP,MAAqB,6BAArB;AACA,OAAOC,YAAP,MAAyB,kCAAzB;;AACAF,WAAW,CAACG,MAAZ,CAAmBF,QAAnB;AACAD,WAAW,CAACG,MAAZ,CAAmBD,YAAnB;;AAEA,SAASE,eAAT,CAAyBC,KAAzB,EAAgC;AAAA;;AAC9B,MAAIC,WAAW,GAAGP,MAAM,EAAxB;AACA,MAAIQ,QAAQ,GAAGR,MAAM,CAAC,CAAC,QAAD,EAAW,aAAX,EAA0B,UAA1B,EAAsC,UAAtC,EAAkD,cAAlD,CAAD,CAArB;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,WAAW,CAACE,OAAZ,GAAsBR,WAAW,CAACS,UAAZ,CAAuB,aAAvB,CAAtB;AACD,GAFQ,EAEN,EAFM,CAAT;AAIAX,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,WAAW,CAACE,OAAZ,CAAoBE,IAApB,CAAyBL,KAAK,CAACM,IAA/B;AACD,GAFQ,EAEN,CAACN,KAAK,CAACM,IAAP,CAFM,CAAT;AAIAb,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIS,QAAQ,CAACC,OAAT,CAAiBI,QAAjB,CAA0BP,KAAK,CAACQ,IAAhC,CAAJ,EAA2C;AACzCP,MAAAA,WAAW,CAACE,OAAZ,CAAoBM,WAApB,CAAgCT,KAAK,CAACQ,IAAtC;AACD,KAFD,MAEO;AACLP,MAAAA,WAAW,CAACE,OAAZ,CAAoBM,WAApB,CAAgC,UAAhC;AACD;AACF,GANQ,EAMN,CAACT,KAAK,CAACQ,IAAP,CANM,CAAT;AAQAf,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,WAAW,CAACE,OAAZ,CAAoBO,UAApB,GAAiCV,KAAK,CAACW,MAAvC;AACAV,IAAAA,WAAW,CAACE,OAAZ,CAAoBS,WAApB,GAAkCZ,KAAK,CAACa,KAAxC;AACAZ,IAAAA,WAAW,CAACE,OAAZ,CAAoBW,WAApB,CAAgCd,KAAK,CAACe,QAAtC;AACAd,IAAAA,WAAW,CAACE,OAAZ,CAAoBa,WAApB,CAAgChB,KAAK,CAACiB,QAAtC;AACAhB,IAAAA,WAAW,CAACE,OAAZ,CAAoBe,SAApB,GAAgClB,KAAK,CAACkB,SAAtC;AACAjB,IAAAA,WAAW,CAACE,OAAZ,CAAoBgB,IAApB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYpB,WAAW,CAACE,OAAZ,CAAoBmB,QAAhC;AACD,GARQ,EAQN,CAACtB,KAAK,CAACQ,IAAP,EAAaR,KAAK,CAACW,MAAnB,EAA2BX,KAAK,CAACa,KAAjC,EAAwCb,KAAK,CAACe,QAA9C,EAAwDf,KAAK,CAACiB,QAA9D,EAAwEjB,KAAK,CAACkB,SAA9E,CARM,CAAT;AAUA,sBACE;AAAK,IAAA,EAAE,EAAC;AAAR;AAAA;AAAA;AAAA;AAAA,UADF;AAGD;;GAjCQnB,e;;KAAAA,e;AAmCT,eAAeA,eAAf","sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport Phylocanvas from \"phylocanvas\";\nimport scalebar from \"phylocanvas-plugin-scalebar\";\nimport branchLength from \"phylocanvas-plugin-branch-length\";\nPhylocanvas.plugin(scalebar)\nPhylocanvas.plugin(branchLength)\n\nfunction PhylocanvasView(props) {\n  let phylocanvas = useRef();\n  let typeList = useRef([\"radial\", \"rectangular\", \"circular\", \"diagonal\", \"hierarchical\"])\n\n  useEffect(() => {\n    phylocanvas.current = Phylocanvas.createTree(\"phylocanvas\")\n  }, [])\n\n  useEffect(() => {\n    phylocanvas.current.load(props.tree)\n  }, [props.tree])\n\n  useEffect(() => {\n    if (typeList.current.includes(props.type)) {\n      phylocanvas.current.setTreeType(props.type)\n    } else {\n      phylocanvas.current.setTreeType(\"circular\")\n    }\n  }, [props.type])\n\n  useEffect(() => {\n    phylocanvas.current.showLabels = props.labels\n    phylocanvas.current.alignLabels = props.align\n    phylocanvas.current.setNodeSize(props.nodeSize)\n    phylocanvas.current.setTextSize(props.textSize)\n    phylocanvas.current.lineWidth = props.lineWidth\n    phylocanvas.current.draw()\n    console.log(phylocanvas.current.branches)\n  }, [props.type, props.labels, props.align, props.nodeSize, props.textSize, props.lineWidth])\n\n  return (\n    <div id=\"phylocanvas\"></div>\n  )\n}\n\nexport default PhylocanvasView;\n"]},"metadata":{},"sourceType":"module"}