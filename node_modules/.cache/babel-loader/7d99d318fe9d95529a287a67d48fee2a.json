{"ast":null,"code":"import React,{useEffect,useRef}from\"react\";import Phylocanvas,{utils}from\"phylocanvas\";import scalebar from\"phylocanvas-plugin-scalebar\";import branchLength from\"phylocanvas-plugin-branch-length\";import root from\"phylocanvas-plugin-root\";import pairwiseOps from\"phylocanvas-plugin-pairwise-ops\";import treeStats from\"phylocanvas-plugin-tree-stats\";import{jsx as _jsx}from\"react/jsx-runtime\";Phylocanvas.plugin(scalebar);Phylocanvas.plugin(branchLength);Phylocanvas.plugin(root);Phylocanvas.plugin(pairwiseOps);Phylocanvas.plugin(treeStats);var getPixelRatio=utils.canvas.getPixelRatio;function PhylocanvasView(props){var phylocanvas=useRef();var typeList=useRef([\"radial\",\"rectangular\",\"circular\",\"diagonal\",\"hierarchical\"]);useEffect(function(){phylocanvas.current=Phylocanvas.createTree(\"phylocanvas\");console.log(phylocanvas.current);},[]);useEffect(function(){phylocanvas.current.load(props.tree);},[props.tree]);useEffect(function(){if(typeList.current.includes(props.type)){phylocanvas.current.setTreeType(props.type);}else{phylocanvas.current.setTreeType(\"rectangular\");}phylocanvas.current.setNodeSize(props.nodeSize*getPixelRatio(phylocanvas.current.canvas)/2);phylocanvas.current.setTextSize(props.textSize*getPixelRatio(phylocanvas.current.canvas)/2);phylocanvas.current.lineWidth=props.lineWidth*getPixelRatio(phylocanvas.current.canvas)/2;},[props.type]);useEffect(function(){phylocanvas.current.setNodeSize(props.nodeSize*getPixelRatio(phylocanvas.current.canvas)/2);},[props.nodeSize]);useEffect(function(){phylocanvas.current.setTextSize(props.textSize*getPixelRatio(phylocanvas.current.canvas)/2);},[props.textSize]);useEffect(function(){phylocanvas.current.showLabels=props.labels;phylocanvas.current.alignLabels=props.align;phylocanvas.current.lineWidth=props.lineWidth*getPixelRatio(phylocanvas.current.canvas)/2;phylocanvas.current.draw();},[props.labels,props.align,props.lineWidth]);useEffect(function(){phylocanvas.current.pairwiseOps.clusterDistance=props.clusterDistance;phylocanvas.current.pairwiseOps.clusterSamples=props.clusterSamples;console.log(phylocanvas.current);phylocanvas.current.pairwiseOps.clusterDraw=true;phylocanvas.current.draw();},[props.clusterDistance,props.clusterSamples]);return/*#__PURE__*/_jsx(\"div\",{id:\"phylocanvas\",style:{height:\"800px\"}});}export default PhylocanvasView;","map":{"version":3,"sources":["/var/www/pathogen-intelligence.tgen.org/epitools/src/phylocanvas/Phylocanvas.js"],"names":["React","useEffect","useRef","Phylocanvas","utils","scalebar","branchLength","root","pairwiseOps","treeStats","plugin","getPixelRatio","canvas","PhylocanvasView","props","phylocanvas","typeList","current","createTree","console","log","load","tree","includes","type","setTreeType","setNodeSize","nodeSize","setTextSize","textSize","lineWidth","showLabels","labels","alignLabels","align","draw","clusterDistance","clusterSamples","clusterDraw","height"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport Phylocanvas, { utils } from \"phylocanvas\";\nimport scalebar from \"phylocanvas-plugin-scalebar\";\nimport branchLength from \"phylocanvas-plugin-branch-length\";\nimport root from \"phylocanvas-plugin-root\";\nimport pairwiseOps from \"phylocanvas-plugin-pairwise-ops\";\nimport treeStats from \"phylocanvas-plugin-tree-stats\";\nPhylocanvas.plugin(scalebar)\nPhylocanvas.plugin(branchLength)\nPhylocanvas.plugin(root)\nPhylocanvas.plugin(pairwiseOps)\nPhylocanvas.plugin(treeStats)\n\nconst { getPixelRatio } = utils.canvas;\n\nfunction PhylocanvasView(props) {\n  let phylocanvas = useRef();\n  let typeList = useRef([\"radial\", \"rectangular\", \"circular\", \"diagonal\", \"hierarchical\"])\n\n  useEffect(() => {\n    phylocanvas.current = Phylocanvas.createTree(\"phylocanvas\")\n    console.log(phylocanvas.current)\n  }, [])\n\n  useEffect(() => {\n    phylocanvas.current.load(props.tree)\n  }, [props.tree])\n\n  useEffect(() => {\n    if (typeList.current.includes(props.type)) {\n      phylocanvas.current.setTreeType(props.type)\n    } else {\n      phylocanvas.current.setTreeType(\"rectangular\")\n    }\n    phylocanvas.current.setNodeSize(props.nodeSize * getPixelRatio(phylocanvas.current.canvas) / 2)\n    phylocanvas.current.setTextSize(props.textSize * getPixelRatio(phylocanvas.current.canvas) / 2)\n    phylocanvas.current.lineWidth = props.lineWidth * getPixelRatio(phylocanvas.current.canvas) / 2\n  }, [props.type])\n\n  useEffect(() => {\n    phylocanvas.current.setNodeSize(props.nodeSize * getPixelRatio(phylocanvas.current.canvas) / 2)\n  }, [props.nodeSize])\n\n  useEffect(() => {\n    phylocanvas.current.setTextSize(props.textSize * getPixelRatio(phylocanvas.current.canvas) / 2)\n  }, [props.textSize])\n\n  useEffect(() => {\n    phylocanvas.current.showLabels = props.labels\n    phylocanvas.current.alignLabels = props.align\n    phylocanvas.current.lineWidth = props.lineWidth * getPixelRatio(phylocanvas.current.canvas) / 2\n    phylocanvas.current.draw()\n  }, [props.labels, props.align, props.lineWidth])\n\n  useEffect(() => {\n    phylocanvas.current.pairwiseOps.clusterDistance = props.clusterDistance\n    phylocanvas.current.pairwiseOps.clusterSamples = props.clusterSamples\n    console.log(phylocanvas.current)\n    phylocanvas.current.pairwiseOps.clusterDraw = true\n    phylocanvas.current.draw()\n  }, [props.clusterDistance, props.clusterSamples])\n\n  return (\n    <div id=\"phylocanvas\" style={{height: \"800px\"}}></div>\n  )\n}\n\nexport default PhylocanvasView;\n"]},"metadata":{},"sourceType":"module"}