{"ast":null,"code":"import { Tree, utils } from 'phylocanvas';\nconst {\n  getPixelRatio\n} = utils.canvas;\nconst DEFAULTS = {\n  active: true,\n  textBaseline: 'bottom',\n  textAlign: 'center'\n};\n\nfunction drawBranchLength() {\n  const cxt = this.canvas;\n  const canvas = cxt.canvas;\n  const pixelRatio = getPixelRatio(cxt);\n  const pi = 3.141592653589793;\n  cxt.save(); //console.log(this)\n\n  console.log(this.branches); //console.log(this.offsetx, this.offsety)\n\n  cxt.font = `${this.textSize}px ${this.font}`;\n  cxt.fillStyle = this.branchColour;\n  cxt.textBaseline = branchLength.textBaseline;\n  cxt.textAlign = branchLength.textAlign;\n\n  for (let branch in this.branches) {\n    branch = this.branches[branch];\n\n    if (branch.branchLength == 0) {\n      continue;\n    }\n\n    let x = (this.offsetx + (branch.startx + (branch.centerx - branch.startx) / 2) * this.zoom / 2) * pixelRatio;\n    let y = (this.offsety + (branch.starty + (branch.centery - branch.starty) / 2) * this.zoom / 2) * pixelRatio;\n\n    if (this.treeType == \"rectangular\") {\n      y = (this.offsety + branch.centery * this.zoom / 2) * pixelRatio;\n    } else if (pi * 1 / 4 < branch.angle && branch.angle < pi * 3 / 4 || pi + pi * 1 / 4 < branch.angle && branch.angle < pi + pi * 3 / 4) {\n      x = (this.offsetx + branchLength.fontSize + branch.centerx * this.zoom / 2) * pixelRatio;\n      y += branchLength.fontSize;\n    }\n\n    cxt.fillText(branch.branchLength, x, y);\n  }\n\n  cxt.restore();\n}\n\nexport default function plugin(decorate) {\n  decorate(this, 'createTree', (delegate, args) => {\n    const tree = delegate(...args);\n    const [, config = {}] = args;\n    tree.branchLength = Object.assign({}, DEFAULTS, config.branchLength || {});\n    return tree;\n  });\n  decorate(Tree, 'draw', function (delegate, args) {\n    delegate.apply(this, args);\n\n    if (this.branchLength.active) {\n      drawBranchLength.apply(this);\n    }\n  });\n}","map":{"version":3,"sources":["/var/www/epitools/my_modules/phylocanvas-plugin-branch-length/index.js"],"names":["Tree","utils","getPixelRatio","canvas","DEFAULTS","active","textBaseline","textAlign","drawBranchLength","cxt","pixelRatio","pi","save","console","log","branches","font","textSize","fillStyle","branchColour","branchLength","branch","x","offsetx","startx","centerx","zoom","y","offsety","starty","centery","treeType","angle","fontSize","fillText","restore","plugin","decorate","delegate","args","tree","config","Object","assign","apply"],"mappings":"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","sourcesContent":["import { Tree, utils } from 'phylocanvas';\n\nconst { getPixelRatio } = utils.canvas;\n\nconst DEFAULTS = {\n  active: true,\n  textBaseline: 'bottom',\n  textAlign: 'center',\n};\n\nfunction drawBranchLength() {\n\n  const cxt = this.canvas;\n  const canvas = cxt.canvas;\n  const pixelRatio = getPixelRatio(cxt);\n  const pi = 3.141592653589793\n\n  cxt.save();\n\n  //console.log(this)\n  console.log(this.branches)\n  //console.log(this.offsetx, this.offsety)\n\n  cxt.font = `${this.textSize}px ${this.font}`;\n  cxt.fillStyle = this.branchColour;\n  cxt.textBaseline = branchLength.textBaseline;\n  cxt.textAlign = branchLength.textAlign;\n\n  for (let branch in this.branches) {\n    branch = this.branches[branch]\n    if (branch.branchLength == 0) {\n      continue\n    }\n    let x = (this.offsetx + (branch.startx + (branch.centerx - branch.startx) / 2) * this.zoom / 2) * pixelRatio\n    let y = (this.offsety + (branch.starty + (branch.centery - branch.starty) / 2) * this.zoom / 2) * pixelRatio\n    if (this.treeType == \"rectangular\") {\n      y = (this.offsety + branch.centery * this.zoom / 2) * pixelRatio\n    } else if (pi * 1 / 4 < branch.angle && branch.angle < pi * 3 / 4 || pi + pi * 1 / 4 < branch.angle && branch.angle < pi + pi * 3 / 4) {\n      x = (this.offsetx + branchLength.fontSize + branch.centerx * this.zoom / 2) * pixelRatio\n      y += branchLength.fontSize\n    }\n    cxt.fillText(branch.branchLength, x, y)\n  }\n\n  cxt.restore();\n}\n\nexport default function plugin(decorate) {\n  decorate(this, 'createTree', (delegate, args) => {\n    const tree = delegate(...args);\n    const [ , config = {} ] = args;\n    tree.branchLength = Object.assign({}, DEFAULTS, config.branchLength || {});\n    return tree;\n  });\n  decorate(Tree, 'draw', function (delegate, args) {\n    delegate.apply(this, args);\n    if (this.branchLength.active) {\n      drawBranchLength.apply(this);\n    }\n  });\n}\n"]},"metadata":{},"sourceType":"module"}