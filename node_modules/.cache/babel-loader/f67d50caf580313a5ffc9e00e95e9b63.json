{"ast":null,"code":"var _jsxFileName = \"/var/www/epitools/src/phylocanvas/Phylocanvas.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef } from \"react\";\nimport Phylocanvas from \"phylocanvas\";\nimport scalebar from 'phylocanvas-plugin-scalebar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction PhylocanvasView(props) {\n  _s();\n\n  let phylocanvas = useRef();\n  let typeList = useRef([\"radial\", \"rectangular\", \"circular\", \"diagonal\", \"hierarchical\"]);\n  useEffect(() => {\n    phylocanvas.current = Phylocanvas.createTree(\"phylocanvas\");\n  }, []);\n  useEffect(() => {\n    phylocanvas.current.load(props.tree);\n  }, [props.tree]);\n  useEffect(() => {\n    if (typeList.current.includes(props.type)) {\n      phylocanvas.current.setTreeType(props.type);\n    } else {\n      phylocanvas.current.setTreeType(\"circular\");\n    }\n  }, [props.type]);\n  useEffect(() => {\n    phylocanvas.current.showLabels = props.labels;\n    phylocanvas.current.alignLabels = props.align;\n    phylocanvas.current.setNodeSize(props.nodeSize);\n    phylocanvas.current.setTextSize(props.textSize);\n    phylocanvas.current.lineWidth = props.lineWidth;\n    phylocanvas.current.draw();\n  }, [props.type, props.labels, props.align, props.nodeSize, props.textSize, props.lineWidth]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"phylocanvas\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PhylocanvasView, \"dSEtlhw9IjmYonjwNu6sHbHx4ig=\");\n\n_c = PhylocanvasView;\nexport default PhylocanvasView;\n\nvar _c;\n\n$RefreshReg$(_c, \"PhylocanvasView\");","map":{"version":3,"sources":["/var/www/epitools/src/phylocanvas/Phylocanvas.js"],"names":["React","useEffect","useRef","Phylocanvas","scalebar","PhylocanvasView","props","phylocanvas","typeList","current","createTree","load","tree","includes","type","setTreeType","showLabels","labels","alignLabels","align","setNodeSize","nodeSize","setTextSize","textSize","lineWidth","draw"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,QAAyC,OAAzC;AACA,OAAOC,WAAP,MAAwB,aAAxB;AACA,OAAOC,QAAP,MAAqB,6BAArB;;;AAEA,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAAA;;AAC9B,MAAIC,WAAW,GAAGL,MAAM,EAAxB;AACA,MAAIM,QAAQ,GAAGN,MAAM,CAAC,CAAC,QAAD,EAAW,aAAX,EAA0B,UAA1B,EAAsC,UAAtC,EAAkD,cAAlD,CAAD,CAArB;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdM,IAAAA,WAAW,CAACE,OAAZ,GAAsBN,WAAW,CAACO,UAAZ,CAAuB,aAAvB,CAAtB;AACD,GAFQ,EAEN,EAFM,CAAT;AAIAT,EAAAA,SAAS,CAAC,MAAM;AACdM,IAAAA,WAAW,CAACE,OAAZ,CAAoBE,IAApB,CAAyBL,KAAK,CAACM,IAA/B;AACD,GAFQ,EAEN,CAACN,KAAK,CAACM,IAAP,CAFM,CAAT;AAIAX,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIO,QAAQ,CAACC,OAAT,CAAiBI,QAAjB,CAA0BP,KAAK,CAACQ,IAAhC,CAAJ,EAA2C;AACzCP,MAAAA,WAAW,CAACE,OAAZ,CAAoBM,WAApB,CAAgCT,KAAK,CAACQ,IAAtC;AACD,KAFD,MAEO;AACLP,MAAAA,WAAW,CAACE,OAAZ,CAAoBM,WAApB,CAAgC,UAAhC;AACD;AACF,GANQ,EAMN,CAACT,KAAK,CAACQ,IAAP,CANM,CAAT;AAQAb,EAAAA,SAAS,CAAC,MAAM;AACdM,IAAAA,WAAW,CAACE,OAAZ,CAAoBO,UAApB,GAAiCV,KAAK,CAACW,MAAvC;AACAV,IAAAA,WAAW,CAACE,OAAZ,CAAoBS,WAApB,GAAkCZ,KAAK,CAACa,KAAxC;AACAZ,IAAAA,WAAW,CAACE,OAAZ,CAAoBW,WAApB,CAAgCd,KAAK,CAACe,QAAtC;AACAd,IAAAA,WAAW,CAACE,OAAZ,CAAoBa,WAApB,CAAgChB,KAAK,CAACiB,QAAtC;AACAhB,IAAAA,WAAW,CAACE,OAAZ,CAAoBe,SAApB,GAAgClB,KAAK,CAACkB,SAAtC;AACAjB,IAAAA,WAAW,CAACE,OAAZ,CAAoBgB,IAApB;AACD,GAPQ,EAON,CAACnB,KAAK,CAACQ,IAAP,EAAaR,KAAK,CAACW,MAAnB,EAA2BX,KAAK,CAACa,KAAjC,EAAwCb,KAAK,CAACe,QAA9C,EAAwDf,KAAK,CAACiB,QAA9D,EAAwEjB,KAAK,CAACkB,SAA9E,CAPM,CAAT;AASA,sBACE;AAAK,IAAA,EAAE,EAAC;AAAR;AAAA;AAAA;AAAA;AAAA,UADF;AAGD;;GAhCQnB,e;;KAAAA,e;AAkCT,eAAeA,eAAf","sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport Phylocanvas from \"phylocanvas\";\nimport scalebar from 'phylocanvas-plugin-scalebar';\n\nfunction PhylocanvasView(props) {\n  let phylocanvas = useRef();\n  let typeList = useRef([\"radial\", \"rectangular\", \"circular\", \"diagonal\", \"hierarchical\"])\n\n  useEffect(() => {\n    phylocanvas.current = Phylocanvas.createTree(\"phylocanvas\")\n  }, [])\n\n  useEffect(() => {\n    phylocanvas.current.load(props.tree)\n  }, [props.tree])\n\n  useEffect(() => {\n    if (typeList.current.includes(props.type)) {\n      phylocanvas.current.setTreeType(props.type)\n    } else {\n      phylocanvas.current.setTreeType(\"circular\")\n    }\n  }, [props.type])\n\n  useEffect(() => {\n    phylocanvas.current.showLabels = props.labels\n    phylocanvas.current.alignLabels = props.align\n    phylocanvas.current.setNodeSize(props.nodeSize)\n    phylocanvas.current.setTextSize(props.textSize)\n    phylocanvas.current.lineWidth = props.lineWidth\n    phylocanvas.current.draw()\n  }, [props.type, props.labels, props.align, props.nodeSize, props.textSize, props.lineWidth])\n\n  return (\n    <div id=\"phylocanvas\"></div>\n  )\n}\n\nexport default PhylocanvasView;\n"]},"metadata":{},"sourceType":"module"}