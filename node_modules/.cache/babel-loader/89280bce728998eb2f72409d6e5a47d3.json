{"ast":null,"code":"import { Tree, utils } from 'phylocanvas';\nconst {\n  getPixelRatio\n} = utils.canvas;\nconst DEFAULTS = {\n  active: true\n};\n\nfunction drawBranchLength() {\n  const {\n    branchLength\n  } = this;\n  const cxt = this.canvas;\n  const canvas = cxt.canvas;\n  const pixelRatio = getPixelRatio(cxt);\n  const pi = 3.141592653589793;\n  const textSize = this.textSize * this.zoom / pixelRatio;\n  cxt.save();\n  cxt.font = `${textSize}px ${this.font}`;\n  cxt.fillStyle = this.branchColour;\n  cxt.textBaseline = \"bottom\";\n  cxt.textAlign = \"center\";\n  console.log(this.zoom, pixelRatio);\n\n  for (let branch in this.branches) {\n    if (this.branches[branch].branchLength == 0) {\n      continue;\n    }\n\n    branch = this.branches[branch];\n    let x = (this.offsetx + (branch.startx + branch.centerx) / 2 * this.zoom / pixelRatio) * pixelRatio;\n    let y = (this.offsety + branch.centery * this.zoom / pixelRatio) * pixelRatio; //if (this.treeType == \"rectangular\") {\n    //  y = (this.offsety + branch.centery * this.zoom / 2) * pixelRatio\n    //} else if (pi * 1 / 4 < branch.angle && branch.angle < pi * 3 / 4 || pi + pi * 1 / 4 < branch.angle && branch.angle < pi + pi * 3 / 4) {\n    //  x = (this.offsetx + textSize + branch.centerx * this.zoom / 2) * pixelRatio\n    //  y += textSize * pixelRatio\n    //}\n\n    cxt.fillText(branch.branchLength, x, y);\n  }\n\n  cxt.restore();\n}\n\nexport default function plugin(decorate) {\n  decorate(this, 'createTree', (delegate, args) => {\n    const tree = delegate(...args);\n    const [, config = {}] = args;\n    tree.branchLength = Object.assign({}, DEFAULTS, config.branchLength || {});\n    return tree;\n  });\n  decorate(Tree, 'draw', function (delegate, args) {\n    delegate.apply(this, args);\n\n    if (this.branchLength.active) {\n      drawBranchLength.apply(this);\n    }\n  });\n}","map":{"version":3,"sources":["/var/www/pathogen-intelligence.tgen.org/epitools/my_modules/phylocanvas-plugin-branch-length/index.js"],"names":["Tree","utils","getPixelRatio","canvas","DEFAULTS","active","drawBranchLength","branchLength","cxt","pixelRatio","pi","textSize","zoom","save","font","fillStyle","branchColour","textBaseline","textAlign","console","log","branch","branches","x","offsetx","startx","centerx","y","offsety","centery","fillText","restore","plugin","decorate","delegate","args","tree","config","Object","assign","apply"],"mappings":"AAAA,SAASA,IAAT,EAAeC,KAAf,QAA4B,aAA5B;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAoBD,KAAK,CAACE,MAAhC;AAEA,MAAMC,QAAQ,GAAG;AACfC,EAAAA,MAAM,EAAE;AADO,CAAjB;;AAIA,SAASC,gBAAT,GAA4B;AAE1B,QAAM;AAAEC,IAAAA;AAAF,MAAmB,IAAzB;AACA,QAAMC,GAAG,GAAG,KAAKL,MAAjB;AACA,QAAMA,MAAM,GAAGK,GAAG,CAACL,MAAnB;AACA,QAAMM,UAAU,GAAGP,aAAa,CAACM,GAAD,CAAhC;AACA,QAAME,EAAE,GAAG,iBAAX;AACA,QAAMC,QAAQ,GAAG,KAAKA,QAAL,GAAgB,KAAKC,IAArB,GAA4BH,UAA7C;AAEAD,EAAAA,GAAG,CAACK,IAAJ;AAEAL,EAAAA,GAAG,CAACM,IAAJ,GAAY,GAAEH,QAAS,MAAK,KAAKG,IAAK,EAAtC;AACAN,EAAAA,GAAG,CAACO,SAAJ,GAAgB,KAAKC,YAArB;AACAR,EAAAA,GAAG,CAACS,YAAJ,GAAmB,QAAnB;AACAT,EAAAA,GAAG,CAACU,SAAJ,GAAgB,QAAhB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,KAAKR,IAAjB,EAAuBH,UAAvB;;AAEA,OAAK,IAAIY,MAAT,IAAmB,KAAKC,QAAxB,EAAkC;AAChC,QAAI,KAAKA,QAAL,CAAcD,MAAd,EAAsBd,YAAtB,IAAsC,CAA1C,EAA6C;AAC3C;AACD;;AACDc,IAAAA,MAAM,GAAG,KAAKC,QAAL,CAAcD,MAAd,CAAT;AACA,QAAIE,CAAC,GAAG,CAAC,KAAKC,OAAL,GAAe,CAACH,MAAM,CAACI,MAAP,GAAgBJ,MAAM,CAACK,OAAxB,IAAmC,CAAnC,GAAuC,KAAKd,IAA5C,GAAmDH,UAAnE,IAAiFA,UAAzF;AACA,QAAIkB,CAAC,GAAG,CAAC,KAAKC,OAAL,GAAeP,MAAM,CAACQ,OAAP,GAAiB,KAAKjB,IAAtB,GAA6BH,UAA7C,IAA2DA,UAAnE,CANgC,CAOhC;AACA;AACA;AACA;AACA;AACA;;AACAD,IAAAA,GAAG,CAACsB,QAAJ,CAAaT,MAAM,CAACd,YAApB,EAAkCgB,CAAlC,EAAqCI,CAArC;AACD;;AAEDnB,EAAAA,GAAG,CAACuB,OAAJ;AACD;;AAED,eAAe,SAASC,MAAT,CAAgBC,QAAhB,EAA0B;AACvCA,EAAAA,QAAQ,CAAC,IAAD,EAAO,YAAP,EAAqB,CAACC,QAAD,EAAWC,IAAX,KAAoB;AAC/C,UAAMC,IAAI,GAAGF,QAAQ,CAAC,GAAGC,IAAJ,CAArB;AACA,UAAM,GAAIE,MAAM,GAAG,EAAb,IAAoBF,IAA1B;AACAC,IAAAA,IAAI,CAAC7B,YAAL,GAAoB+B,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBnC,QAAlB,EAA4BiC,MAAM,CAAC9B,YAAP,IAAuB,EAAnD,CAApB;AACA,WAAO6B,IAAP;AACD,GALO,CAAR;AAMAH,EAAAA,QAAQ,CAACjC,IAAD,EAAO,MAAP,EAAe,UAAUkC,QAAV,EAAoBC,IAApB,EAA0B;AAC/CD,IAAAA,QAAQ,CAACM,KAAT,CAAe,IAAf,EAAqBL,IAArB;;AACA,QAAI,KAAK5B,YAAL,CAAkBF,MAAtB,EAA8B;AAC5BC,MAAAA,gBAAgB,CAACkC,KAAjB,CAAuB,IAAvB;AACD;AACF,GALO,CAAR;AAMD","sourcesContent":["import { Tree, utils } from 'phylocanvas';\n\nconst { getPixelRatio } = utils.canvas;\n\nconst DEFAULTS = {\n  active: true,\n};\n\nfunction drawBranchLength() {\n\n  const { branchLength } = this;\n  const cxt = this.canvas;\n  const canvas = cxt.canvas;\n  const pixelRatio = getPixelRatio(cxt);\n  const pi = 3.141592653589793\n  const textSize = this.textSize * this.zoom / pixelRatio\n\n  cxt.save();\n\n  cxt.font = `${textSize}px ${this.font}`;\n  cxt.fillStyle = this.branchColour;\n  cxt.textBaseline = \"bottom\";\n  cxt.textAlign = \"center\";\n  console.log(this.zoom, pixelRatio)\n\n  for (let branch in this.branches) {\n    if (this.branches[branch].branchLength == 0) {\n      continue\n    }\n    branch = this.branches[branch]\n    let x = (this.offsetx + (branch.startx + branch.centerx) / 2 * this.zoom / pixelRatio) * pixelRatio\n    let y = (this.offsety + branch.centery * this.zoom / pixelRatio) * pixelRatio\n    //if (this.treeType == \"rectangular\") {\n    //  y = (this.offsety + branch.centery * this.zoom / 2) * pixelRatio\n    //} else if (pi * 1 / 4 < branch.angle && branch.angle < pi * 3 / 4 || pi + pi * 1 / 4 < branch.angle && branch.angle < pi + pi * 3 / 4) {\n    //  x = (this.offsetx + textSize + branch.centerx * this.zoom / 2) * pixelRatio\n    //  y += textSize * pixelRatio\n    //}\n    cxt.fillText(branch.branchLength, x, y)\n  }\n\n  cxt.restore();\n}\n\nexport default function plugin(decorate) {\n  decorate(this, 'createTree', (delegate, args) => {\n    const tree = delegate(...args);\n    const [ , config = {} ] = args;\n    tree.branchLength = Object.assign({}, DEFAULTS, config.branchLength || {});\n    return tree;\n  });\n  decorate(Tree, 'draw', function (delegate, args) {\n    delegate.apply(this, args);\n    if (this.branchLength.active) {\n      drawBranchLength.apply(this);\n    }\n  });\n}\n"]},"metadata":{},"sourceType":"module"}