{"ast":null,"code":"import { Tree, utils } from 'phylocanvas';\nconst {\n  getPixelRatio\n} = utils.canvas;\nconst DEFAULTS = {\n  active: true,\n  width: 100,\n  height: 20,\n  fillStyle: 'black',\n  strokeStyle: 'black',\n  lineWidth: 1,\n  fontFamily: 'Sans-serif',\n  fontSize: 16,\n  textBaseline: 'bottom',\n  textAlign: 'center',\n  digits: 2,\n  position: {\n    bottom: 10,\n    left: 10\n  }\n};\n\nfunction drawBranchLength() {\n  const cxt = this.canvas;\n  const canvas = cxt.canvas;\n  const pixelRatio = getPixelRatio(cxt);\n  const lineWidth = pixelRatio * branchLength.lineWidth;\n  const fontSize = pixelRatio * branchLength.fontSize;\n  const pi = 3.141592653589793;\n  cxt.save(); //console.log(this)\n\n  console.log(this.branches); //console.log(this.offsetx, this.offsety)\n\n  cxt.font = `${this.textSize}px ${this.font}`;\n  cxt.fillStyle = this.branchColour;\n  cxt.textBaseline = branchLength.textBaseline;\n  cxt.textAlign = branchLength.textAlign;\n\n  for (let branch in this.branches) {\n    branch = this.branches[branch];\n\n    if (branch.branchLength == 0) {\n      continue;\n    }\n\n    let x = (this.offsetx + (branch.startx + (branch.centerx - branch.startx) / 2) * this.zoom / 2) * pixelRatio;\n    let y = (this.offsety + (branch.starty + (branch.centery - branch.starty) / 2) * this.zoom / 2) * pixelRatio;\n\n    if (this.treeType == \"rectangular\") {\n      y = (this.offsety + branch.centery * this.zoom / 2) * pixelRatio;\n    } else if (pi * 1 / 4 < branch.angle && branch.angle < pi * 3 / 4 || pi + pi * 1 / 4 < branch.angle && branch.angle < pi + pi * 3 / 4) {\n      x = (this.offsetx + branchLength.fontSize + branch.centerx * this.zoom / 2) * pixelRatio;\n      y += branchLength.fontSize;\n    }\n\n    cxt.fillText(branch.branchLength, x, y);\n  }\n\n  cxt.restore();\n}\n\nexport default function plugin(decorate) {\n  decorate(this, 'createTree', (delegate, args) => {\n    const tree = delegate(...args);\n    const [, config = {}] = args;\n    tree.branchLength = Object.assign({}, DEFAULTS, config.branchLength || {});\n    return tree;\n  });\n  decorate(Tree, 'draw', function (delegate, args) {\n    delegate.apply(this, args);\n\n    if (this.branchLength.active) {\n      drawBranchLength.apply(this);\n    }\n  });\n}","map":{"version":3,"sources":["/var/www/epitools/my_modules/phylocanvas-plugin-branch-length/index.js"],"names":["Tree","utils","getPixelRatio","canvas","DEFAULTS","active","width","height","fillStyle","strokeStyle","lineWidth","fontFamily","fontSize","textBaseline","textAlign","digits","position","bottom","left","drawBranchLength","cxt","pixelRatio","branchLength","pi","save","console","log","branches","font","textSize","branchColour","branch","x","offsetx","startx","centerx","zoom","y","offsety","starty","centery","treeType","angle","fillText","restore","plugin","decorate","delegate","args","tree","config","Object","assign","apply"],"mappings":"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","sourcesContent":["import { Tree, utils } from 'phylocanvas';\n\nconst { getPixelRatio } = utils.canvas;\n\nconst DEFAULTS = {\n  active: true,\n  width: 100,\n  height: 20,\n  fillStyle: 'black',\n  strokeStyle: 'black',\n  lineWidth: 1,\n  fontFamily: 'Sans-serif',\n  fontSize: 16,\n  textBaseline: 'bottom',\n  textAlign: 'center',\n  digits: 2,\n  position: {\n    bottom: 10,\n    left: 10,\n  },\n};\n\nfunction drawBranchLength() {\n\n  const cxt = this.canvas;\n  const canvas = cxt.canvas;\n  const pixelRatio = getPixelRatio(cxt);\n  const lineWidth = pixelRatio * branchLength.lineWidth;\n  const fontSize = pixelRatio * branchLength.fontSize;\n  const pi = 3.141592653589793\n\n  cxt.save();\n\n  //console.log(this)\n  console.log(this.branches)\n  //console.log(this.offsetx, this.offsety)\n\n  cxt.font = `${this.textSize}px ${this.font}`;\n  cxt.fillStyle = this.branchColour;\n  cxt.textBaseline = branchLength.textBaseline;\n  cxt.textAlign = branchLength.textAlign;\n\n  for (let branch in this.branches) {\n    branch = this.branches[branch]\n    if (branch.branchLength == 0) {\n      continue\n    }\n    let x = (this.offsetx + (branch.startx + (branch.centerx - branch.startx) / 2) * this.zoom / 2) * pixelRatio\n    let y = (this.offsety + (branch.starty + (branch.centery - branch.starty) / 2) * this.zoom / 2) * pixelRatio\n    if (this.treeType == \"rectangular\") {\n      y = (this.offsety + branch.centery * this.zoom / 2) * pixelRatio\n    } else if (pi * 1 / 4 < branch.angle && branch.angle < pi * 3 / 4 || pi + pi * 1 / 4 < branch.angle && branch.angle < pi + pi * 3 / 4) {\n      x = (this.offsetx + branchLength.fontSize + branch.centerx * this.zoom / 2) * pixelRatio\n      y += branchLength.fontSize\n    }\n    cxt.fillText(branch.branchLength, x, y)\n  }\n\n  cxt.restore();\n}\n\nexport default function plugin(decorate) {\n  decorate(this, 'createTree', (delegate, args) => {\n    const tree = delegate(...args);\n    const [ , config = {} ] = args;\n    tree.branchLength = Object.assign({}, DEFAULTS, config.branchLength || {});\n    return tree;\n  });\n  decorate(Tree, 'draw', function (delegate, args) {\n    delegate.apply(this, args);\n    if (this.branchLength.active) {\n      drawBranchLength.apply(this);\n    }\n  });\n}\n"]},"metadata":{},"sourceType":"module"}