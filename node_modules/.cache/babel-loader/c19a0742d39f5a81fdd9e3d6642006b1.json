{"ast":null,"code":"var _jsxFileName = \"/var/www/pathogen-intelligence.tgen.org/epitools/src/phylocanvas/Phylocanvas.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useRef } from \"react\";\nimport Phylocanvas, { utils } from \"phylocanvas\";\nimport scalebar from \"phylocanvas-plugin-scalebar\";\nimport branchLength from \"phylocanvas-plugin-branch-length\";\nimport root from \"phylocanvas-plugin-root\";\nimport pairwiseOps from \"phylocanvas-plugin-pairwise-ops\";\nimport treeStats from \"phylocanvas-plugin-tree-stats\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nPhylocanvas.plugin(scalebar);\nPhylocanvas.plugin(branchLength);\nPhylocanvas.plugin(root);\nPhylocanvas.plugin(pairwiseOps);\nPhylocanvas.plugin(treeStats);\nconst {\n  getPixelRatio\n} = utils.canvas;\n\nfunction PhylocanvasView(props) {\n  _s();\n\n  let phylocanvas = useRef();\n  let minHeight = 100;\n  let minWidth = 100; // [height, width]\n\n  let heightRef = useRef(minHeight);\n  let widthRef = useRef(minWidth);\n\n  let setHW = data => {\n    heightRef.current = data[0];\n    widthRef.current = data[1];\n  }; // [nodeSize, textSize, lineWidth]\n\n\n  let nodeSizeRef = useRef(props.nodeSize);\n  let textSizeRef = useRef(props.textSize);\n  let lineWidthRef = useRef(props.lineWidth);\n  console.log(\"initialntl:\", props.nodeSize, props.textSize, props.lineWidth);\n\n  let setNodeSize = data => {\n    nodeSizeRef.current = data * getPixelRatio(phylocanvas.current.canvas) / 2;\n  };\n\n  let setTextSize = data => {\n    textSizeRef.current = data * getPixelRatio(phylocanvas.current.canvas) / 2;\n  };\n\n  let setLineWidth = data => {\n    lineWidthRef.current = data * getPixelRatio(phylocanvas.current.canvas) / 2;\n  };\n\n  let resetNTL = () => {\n    phylocanvas.current.setNodeSize(nodeSizeRef);\n    phylocanvas.current.setTextSize(textSizeRef);\n    phylocanvas.current.lineWidth = lineWidthRef;\n    console.log(\"ntl:\", props.nodeSize, props.textSize, props.lineWidth);\n  };\n\n  let typeList = useRef([\"radial\", \"rectangular\", \"circular\", \"diagonal\", \"hierarchical\"]); //TODO: Fix height inheritance problem (relative height to window size without adding to window size for positive feedback loop)\n\n  useEffect(() => {\n    function handleResize() {\n      //setHeight(document.getElementsByClassName(\"Nav-body\")[0].clientHeight)\n      let newHeight = Math.max(Math.max(document.documentElement.clientHeight || 0, window.innerHeight || 0) - document.getElementsByClassName(\"Nav-header\")[0].clientHeight * 2, minHeight);\n      let newWidth = Math.max(document.documentElement.clientWidth || minWidth, window.innerWidth || minWidth, minWidth);\n      let heightDelta = heightRef.current / newHeight;\n      let widthDelta = widthRef.current / newWidth;\n      setHW([newHeight, newWidth]);\n      phylocanvas.current.setTreeType(phylocanvas.current.treeType);\n      resetNTL();\n\n      if (phylocanvas.current.treeType == \"circular\") {}\n\n      if (phylocanvas.current.treeType == \"rectangular\") {}\n    }\n\n    function initialSize() {\n      window.dispatchEvent(new Event('resize'));\n      phylocanvas.current.setTreeType(phylocanvas.current.treeType);\n    }\n\n    window.addEventListener(\"resize\", handleResize);\n    window.addEventListener(\"load\", initialSize);\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n      window.removeEventListener(\"load\", initialSize);\n    };\n  }, []);\n  useEffect(() => {\n    phylocanvas.current = Phylocanvas.createTree(\"phylocanvas\");\n  }, []);\n  useEffect(() => {\n    phylocanvas.current.load(props.tree);\n  }, [props.tree]);\n  useEffect(() => {\n    if (typeList.current.includes(props.type)) {\n      phylocanvas.current.setTreeType(props.type);\n    } else {\n      phylocanvas.current.setTreeType(\"rectangular\");\n    }\n\n    resetNTL();\n  }, [props.type]);\n  useEffect(() => {\n    setNodeSize(props.nodeSize);\n    phylocanvas.current.setNodeSize(nodeSizeRef);\n  }, [props.nodeSize]);\n  useEffect(() => {\n    setTextSize(props.textSize);\n    phylocanvas.current.setTextSize(textSizeRef);\n  }, [props.textSize]);\n  useEffect(() => {\n    phylocanvas.current.showLabels = props.labels;\n    phylocanvas.current.alignLabels = props.align;\n    setLineWidth(props.lineWidth);\n    phylocanvas.current.lineWidth = lineWidthRef;\n    phylocanvas.current.draw();\n  }, [props.labels, props.align, props.lineWidth]);\n  useEffect(() => {\n    phylocanvas.current.pairwiseOps.clusterDistance = props.clusterDistance;\n    phylocanvas.current.pairwiseOps.clusterSamples = props.clusterSamples;\n    console.log(phylocanvas.current);\n    phylocanvas.current.pairwiseOps.clusterDraw = true;\n    phylocanvas.current.draw();\n  }, [props.clusterDistance, props.clusterSamples]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"phylocanvas\",\n    style: {\n      height: heightRef.current + \"px\",\n      width: \"100%\",\n      minHeight: minHeight + \"px\",\n      minWidth: minWidth + \"px\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PhylocanvasView, \"H/5W32TaKU/RV6EcLSy0uHJbtaE=\");\n\n_c = PhylocanvasView;\nexport default PhylocanvasView;\n\nvar _c;\n\n$RefreshReg$(_c, \"PhylocanvasView\");","map":{"version":3,"sources":["/var/www/pathogen-intelligence.tgen.org/epitools/src/phylocanvas/Phylocanvas.js"],"names":["React","useEffect","useState","useRef","Phylocanvas","utils","scalebar","branchLength","root","pairwiseOps","treeStats","plugin","getPixelRatio","canvas","PhylocanvasView","props","phylocanvas","minHeight","minWidth","heightRef","widthRef","setHW","data","current","nodeSizeRef","nodeSize","textSizeRef","textSize","lineWidthRef","lineWidth","console","log","setNodeSize","setTextSize","setLineWidth","resetNTL","typeList","handleResize","newHeight","Math","max","document","documentElement","clientHeight","window","innerHeight","getElementsByClassName","newWidth","clientWidth","innerWidth","heightDelta","widthDelta","setTreeType","treeType","initialSize","dispatchEvent","Event","addEventListener","removeEventListener","createTree","load","tree","includes","type","showLabels","labels","alignLabels","align","draw","clusterDistance","clusterSamples","clusterDraw","height","width"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\nimport Phylocanvas, { utils } from \"phylocanvas\";\nimport scalebar from \"phylocanvas-plugin-scalebar\";\nimport branchLength from \"phylocanvas-plugin-branch-length\";\nimport root from \"phylocanvas-plugin-root\";\nimport pairwiseOps from \"phylocanvas-plugin-pairwise-ops\";\nimport treeStats from \"phylocanvas-plugin-tree-stats\";\nPhylocanvas.plugin(scalebar)\nPhylocanvas.plugin(branchLength)\nPhylocanvas.plugin(root)\nPhylocanvas.plugin(pairwiseOps)\nPhylocanvas.plugin(treeStats)\n\nconst { getPixelRatio } = utils.canvas;\n\nfunction PhylocanvasView(props) {\n  let phylocanvas = useRef();\n  let minHeight = 100\n  let minWidth = 100\n\n  // [height, width]\n  let heightRef = useRef(minHeight)\n  let widthRef = useRef(minWidth)\n  let setHW = data => {\n    heightRef.current = data[0]\n    widthRef.current = data[1]\n  }\n\n  // [nodeSize, textSize, lineWidth]\n  let nodeSizeRef = useRef(props.nodeSize)\n  let textSizeRef = useRef(props.textSize)\n  let lineWidthRef = useRef(props.lineWidth)\n  console.log(\"initialntl:\", props.nodeSize, props.textSize, props.lineWidth)\n  let setNodeSize = data => {nodeSizeRef.current = data * getPixelRatio(phylocanvas.current.canvas) / 2}\n  let setTextSize = data => {textSizeRef.current = data * getPixelRatio(phylocanvas.current.canvas) / 2}\n  let setLineWidth = data => {lineWidthRef.current = data * getPixelRatio(phylocanvas.current.canvas) / 2}\n  let resetNTL = () => {\n    phylocanvas.current.setNodeSize(nodeSizeRef)\n    phylocanvas.current.setTextSize(textSizeRef)\n    phylocanvas.current.lineWidth = lineWidthRef\n    console.log(\"ntl:\", props.nodeSize, props.textSize, props.lineWidth)\n  }\n\n  let typeList = useRef([\"radial\", \"rectangular\", \"circular\", \"diagonal\", \"hierarchical\"]);\n\n  //TODO: Fix height inheritance problem (relative height to window size without adding to window size for positive feedback loop)\n\n  useEffect(() => {\n    function handleResize() {\n      //setHeight(document.getElementsByClassName(\"Nav-body\")[0].clientHeight)\n      let newHeight = Math.max( Math.max( document.documentElement.clientHeight || 0, window.innerHeight || 0) - document.getElementsByClassName(\"Nav-header\")[0].clientHeight * 2, minHeight )\n      let newWidth = Math.max( document.documentElement.clientWidth || minWidth, window.innerWidth || minWidth, minWidth)\n      let heightDelta = heightRef.current / newHeight\n      let widthDelta = widthRef.current / newWidth\n      setHW([newHeight, newWidth])\n      phylocanvas.current.setTreeType(phylocanvas.current.treeType)\n      resetNTL();\n      if (phylocanvas.current.treeType == \"circular\") {\n      }\n      if (phylocanvas.current.treeType == \"rectangular\") {\n      }\n    }\n    function initialSize() {\n      window.dispatchEvent(new Event('resize')) \n      phylocanvas.current.setTreeType(phylocanvas.current.treeType)\n    } \n    window.addEventListener(\"resize\", handleResize);\n    window.addEventListener(\"load\", initialSize);\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n      window.removeEventListener(\"load\", initialSize);\n    };\n  }, [])\n\n  useEffect(() => {\n    phylocanvas.current = Phylocanvas.createTree(\"phylocanvas\")\n  }, [])\n\n  useEffect(() => {\n    phylocanvas.current.load(props.tree)\n  }, [props.tree])\n\n  useEffect(() => {\n    if (typeList.current.includes(props.type)) {\n      phylocanvas.current.setTreeType(props.type)\n    } else {\n      phylocanvas.current.setTreeType(\"rectangular\")\n    }\n    resetNTL();\n }, [props.type])\n\n  useEffect(() => {\n    setNodeSize(props.nodeSize)\n    phylocanvas.current.setNodeSize(nodeSizeRef)\n  }, [props.nodeSize])\n\n  useEffect(() => {\n    setTextSize(props.textSize)\n    phylocanvas.current.setTextSize(textSizeRef)\n  }, [props.textSize])\n\n  useEffect(() => {\n    phylocanvas.current.showLabels = props.labels\n    phylocanvas.current.alignLabels = props.align\n    setLineWidth(props.lineWidth)\n    phylocanvas.current.lineWidth = lineWidthRef\n    phylocanvas.current.draw()\n  }, [props.labels, props.align, props.lineWidth])\n\n  useEffect(() => {\n    phylocanvas.current.pairwiseOps.clusterDistance = props.clusterDistance\n    phylocanvas.current.pairwiseOps.clusterSamples = props.clusterSamples\n    console.log(phylocanvas.current)\n    phylocanvas.current.pairwiseOps.clusterDraw = true\n    phylocanvas.current.draw()\n  }, [props.clusterDistance, props.clusterSamples])\n\n  return (\n    <div id=\"phylocanvas\" style={{height: heightRef.current + \"px\", width: \"100%\", minHeight: minHeight + \"px\", minWidth: minWidth + \"px\"}}></div>\n  )\n}\n\nexport default PhylocanvasView;\n"]},"metadata":{},"sourceType":"module"}