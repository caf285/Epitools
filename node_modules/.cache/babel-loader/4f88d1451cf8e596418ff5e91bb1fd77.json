{"ast":null,"code":"import { Tree, utils } from 'phylocanvas';\nconst {\n  getPixelRatio\n} = utils.canvas;\nconst DEFAULTS = {\n  active: true,\n  pairwiseMatrix: {},\n  clusterActive: true,\n  clusterDraw: true,\n  clusterMatrix: [],\n  clusterMaxDistance: 20,\n  clusterDistance: 3,\n  clusterSamples: 3\n};\n/*\nfunction walkMatrix(tree, start, node, walked, distance, max) {\n  walked.push(node)\n\n  if (distance >= max) {\n    return\n  }\n  if (node !== start && node.leaf === true) {\n    tree.pairwiseOps.pairwiseMatrix[start.id].push([node.id, distance])\n  }\n  for (let child of node.children) {\n    if (! walked.includes(child)) {\n      let newDistance = distance + child.branchLength\n      newDistance = parseFloat(newDistance.toFixed(10))\n      walkMatrix(tree, start, child, walked, newDistance, max)\n    }\n  }\n  if (node.parent && ! walked.includes(node.parent)) {\n    let newDistance = distance + node.branchLength\n    newDistance = parseFloat(newDistance.toFixed(10))\n    walkMatrix(tree, start, node.parent, walked, newDistance, max)\n  }\n}\n\nfunction buildPairwiseMatrix() {\n  for (let leaf of this.leaves) {\n    this.pairwiseOps.pairwiseMatrix[leaf.id] = []\n    walkMatrix(this, leaf, leaf, [], 0, this.pairwiseOps.clusterMaxDistance)\n  }\n  console.log(this.pairwiseOps.pairwiseMatrix)\n}\n*/\n\nfunction walkMatrix(tree, node, path, distance) {\n  let newDistance = Array.from(distance);\n  let newPath = Array.from(path);\n\n  if (node.parent !== null) {\n    newDistance.push(node.branchLength);\n  }\n\n  if (node.leaf === false) {\n    tree.pairwiseOps.pairwiseMatrix[node.id] = [];\n    newPath.push(node.id);\n\n    for (let child of node.children) {\n      walkMatrix(tree, child, newPath, newDistance);\n    }\n  } else {\n    let totalDistance = 0;\n    console.log(0);\n\n    for (let i in newPath) {\n      console.log(node.id, newPath[i], newDistance.slice(i), totalDistance); //tree.pairwiseOps.pairwiseMatrix[newPath[i]].push([node.id, totalDistance])\n    }\n  }\n}\n\nfunction buildPairwiseMatrix() {\n  walkMatrix(this, this.root, [], []);\n  console.log(this.pairwiseOps.pairwiseMatrix);\n  console.log(this);\n}\n\nfunction buildClusterMatrix() {\n  this.pairwiseOps.clusterMatrix = [];\n\n  for (let leaf in this.pairwiseOps.pairwiseMatrix) {\n    let cluster = [leaf];\n\n    for (let node of this.pairwiseOps.pairwiseMatrix[leaf]) {\n      if (node[1] <= this.pairwiseOps.clusterDistance) {\n        cluster.push(node[0]);\n      }\n    }\n\n    if (cluster.length >= this.pairwiseOps.clusterSamples) {\n      cluster.sort();\n      cluster = JSON.stringify(cluster);\n\n      if (!this.pairwiseOps.clusterMatrix.includes(cluster)) {\n        this.pairwiseOps.clusterMatrix.push(cluster);\n      }\n    }\n  }\n}\n\nfunction colorNode() {\n  for (let leaf of this.leaves) {\n    leaf.setDisplay({\n      colour: this.branchColour\n    });\n    leaf.label = leaf.id;\n  }\n\n  for (let cluster of this.pairwiseOps.clusterMatrix) {\n    cluster = JSON.parse(cluster);\n\n    for (let id of cluster) {\n      for (let leaf of this.findLeaves(id)) {\n        leaf.label += \"+\";\n        leaf.setDisplay({\n          colour: 'red'\n        });\n      }\n    }\n  }\n\n  this.draw();\n}\n\nexport default function plugin(decorate) {\n  decorate(this, 'createTree', (delegate, args) => {\n    const tree = delegate(...args);\n    const [, config = {}] = args;\n    tree.pairwiseOps = Object.assign({}, DEFAULTS, config.pairwiseOps || {});\n    return tree;\n  });\n  decorate(Tree, 'load', function (delegate, args) {\n    delegate.apply(this, args);\n\n    if (this.pairwiseOps.active) {\n      buildPairwiseMatrix.apply(this);\n\n      if (this.pairwiseOps.clusterActive) {\n        this.pairwiseOps.clusterDraw = true;\n      }\n    }\n  });\n  decorate(Tree, 'draw', function (delegate, args) {\n    delegate.apply(this, args);\n\n    if (this.pairwiseOps.clusterActive) {\n      if (this.pairwiseOps.clusterDraw) {\n        this.pairwiseOps.clusterDraw = false; //buildClusterMatrix.apply(this);\n        //colorNode.apply(this)\n      }\n    }\n  });\n}","map":{"version":3,"sources":["/var/www/pathogen-intelligence.tgen.org/epitools/my_modules/phylocanvas-plugin-pairwise-ops/index.js"],"names":["Tree","utils","getPixelRatio","canvas","DEFAULTS","active","pairwiseMatrix","clusterActive","clusterDraw","clusterMatrix","clusterMaxDistance","clusterDistance","clusterSamples","walkMatrix","tree","node","path","distance","newDistance","Array","from","newPath","parent","push","branchLength","leaf","pairwiseOps","id","child","children","totalDistance","console","log","i","slice","buildPairwiseMatrix","root","buildClusterMatrix","cluster","length","sort","JSON","stringify","includes","colorNode","leaves","setDisplay","colour","branchColour","label","parse","findLeaves","draw","plugin","decorate","delegate","args","config","Object","assign","apply"],"mappings":"AAAA,SAASA,IAAT,EAAeC,KAAf,QAA4B,aAA5B;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAoBD,KAAK,CAACE,MAAhC;AAEA,MAAMC,QAAQ,GAAG;AACfC,EAAAA,MAAM,EAAE,IADO;AAEfC,EAAAA,cAAc,EAAE,EAFD;AAGfC,EAAAA,aAAa,EAAE,IAHA;AAIfC,EAAAA,WAAW,EAAE,IAJE;AAKfC,EAAAA,aAAa,EAAE,EALA;AAMfC,EAAAA,kBAAkB,EAAE,EANL;AAOfC,EAAAA,eAAe,EAAE,CAPF;AAQfC,EAAAA,cAAc,EAAE;AARD,CAAjB;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,UAAT,CAAoBC,IAApB,EAA0BC,IAA1B,EAAgCC,IAAhC,EAAsCC,QAAtC,EAAgD;AAC9C,MAAIC,WAAW,GAAGC,KAAK,CAACC,IAAN,CAAWH,QAAX,CAAlB;AACA,MAAII,OAAO,GAAGF,KAAK,CAACC,IAAN,CAAWJ,IAAX,CAAd;;AACA,MAAID,IAAI,CAACO,MAAL,KAAgB,IAApB,EAA0B;AACxBJ,IAAAA,WAAW,CAACK,IAAZ,CAAiBR,IAAI,CAACS,YAAtB;AACD;;AACD,MAAIT,IAAI,CAACU,IAAL,KAAc,KAAlB,EAAyB;AACvBX,IAAAA,IAAI,CAACY,WAAL,CAAiBpB,cAAjB,CAAgCS,IAAI,CAACY,EAArC,IAA2C,EAA3C;AACAN,IAAAA,OAAO,CAACE,IAAR,CAAaR,IAAI,CAACY,EAAlB;;AACA,SAAK,IAAIC,KAAT,IAAkBb,IAAI,CAACc,QAAvB,EAAiC;AAC/BhB,MAAAA,UAAU,CAACC,IAAD,EAAOc,KAAP,EAAcP,OAAd,EAAuBH,WAAvB,CAAV;AACD;AACF,GAND,MAMO;AACL,QAAIY,aAAa,GAAG,CAApB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,CAAZ;;AACA,SAAK,IAAIC,CAAT,IAAcZ,OAAd,EAAuB;AACrBU,MAAAA,OAAO,CAACC,GAAR,CAAYjB,IAAI,CAACY,EAAjB,EAAqBN,OAAO,CAACY,CAAD,CAA5B,EAAiCf,WAAW,CAACgB,KAAZ,CAAkBD,CAAlB,CAAjC,EAAuDH,aAAvD,EADqB,CAGrB;AACD;AACF;AACF;;AAED,SAASK,mBAAT,GAA+B;AAC7BtB,EAAAA,UAAU,CAAC,IAAD,EAAO,KAAKuB,IAAZ,EAAkB,EAAlB,EAAsB,EAAtB,CAAV;AACAL,EAAAA,OAAO,CAACC,GAAR,CAAY,KAAKN,WAAL,CAAiBpB,cAA7B;AACAyB,EAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACD;;AAED,SAASK,kBAAT,GAA8B;AAC5B,OAAKX,WAAL,CAAiBjB,aAAjB,GAAiC,EAAjC;;AACA,OAAK,IAAIgB,IAAT,IAAiB,KAAKC,WAAL,CAAiBpB,cAAlC,EAAkD;AAChD,QAAIgC,OAAO,GAAG,CAACb,IAAD,CAAd;;AACA,SAAK,IAAIV,IAAT,IAAiB,KAAKW,WAAL,CAAiBpB,cAAjB,CAAgCmB,IAAhC,CAAjB,EAAwD;AACtD,UAAIV,IAAI,CAAC,CAAD,CAAJ,IAAW,KAAKW,WAAL,CAAiBf,eAAhC,EAAiD;AAC/C2B,QAAAA,OAAO,CAACf,IAAR,CAAaR,IAAI,CAAC,CAAD,CAAjB;AACD;AACF;;AACD,QAAIuB,OAAO,CAACC,MAAR,IAAkB,KAAKb,WAAL,CAAiBd,cAAvC,EAAuD;AACrD0B,MAAAA,OAAO,CAACE,IAAR;AACAF,MAAAA,OAAO,GAAGG,IAAI,CAACC,SAAL,CAAeJ,OAAf,CAAV;;AACA,UAAI,CAAE,KAAKZ,WAAL,CAAiBjB,aAAjB,CAA+BkC,QAA/B,CAAwCL,OAAxC,CAAN,EAAwD;AACtD,aAAKZ,WAAL,CAAiBjB,aAAjB,CAA+Bc,IAA/B,CAAoCe,OAApC;AACD;AACF;AACF;AACF;;AAED,SAASM,SAAT,GAAqB;AACnB,OAAK,IAAInB,IAAT,IAAiB,KAAKoB,MAAtB,EAA8B;AAC5BpB,IAAAA,IAAI,CAACqB,UAAL,CAAgB;AACdC,MAAAA,MAAM,EAAE,KAAKC;AADC,KAAhB;AAGAvB,IAAAA,IAAI,CAACwB,KAAL,GAAaxB,IAAI,CAACE,EAAlB;AACD;;AACD,OAAK,IAAIW,OAAT,IAAoB,KAAKZ,WAAL,CAAiBjB,aAArC,EAAoD;AAClD6B,IAAAA,OAAO,GAAGG,IAAI,CAACS,KAAL,CAAWZ,OAAX,CAAV;;AACA,SAAK,IAAIX,EAAT,IAAeW,OAAf,EAAwB;AAEtB,WAAK,IAAIb,IAAT,IAAiB,KAAK0B,UAAL,CAAgBxB,EAAhB,CAAjB,EAAsC;AACpCF,QAAAA,IAAI,CAACwB,KAAL,IAAc,GAAd;AACAxB,QAAAA,IAAI,CAACqB,UAAL,CAAgB;AACdC,UAAAA,MAAM,EAAE;AADM,SAAhB;AAGD;AACF;AACF;;AACD,OAAKK,IAAL;AACD;;AAED,eAAe,SAASC,MAAT,CAAgBC,QAAhB,EAA0B;AACvCA,EAAAA,QAAQ,CAAC,IAAD,EAAO,YAAP,EAAqB,CAACC,QAAD,EAAWC,IAAX,KAAoB;AAC/C,UAAM1C,IAAI,GAAGyC,QAAQ,CAAC,GAAGC,IAAJ,CAArB;AACA,UAAM,GAAIC,MAAM,GAAG,EAAb,IAAoBD,IAA1B;AACA1C,IAAAA,IAAI,CAACY,WAAL,GAAmBgC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBvD,QAAlB,EAA4BqD,MAAM,CAAC/B,WAAP,IAAsB,EAAlD,CAAnB;AACA,WAAOZ,IAAP;AACD,GALO,CAAR;AAMAwC,EAAAA,QAAQ,CAACtD,IAAD,EAAO,MAAP,EAAe,UAAUuD,QAAV,EAAoBC,IAApB,EAA0B;AAC/CD,IAAAA,QAAQ,CAACK,KAAT,CAAe,IAAf,EAAqBJ,IAArB;;AACA,QAAI,KAAK9B,WAAL,CAAiBrB,MAArB,EAA6B;AAC3B8B,MAAAA,mBAAmB,CAACyB,KAApB,CAA0B,IAA1B;;AACA,UAAI,KAAKlC,WAAL,CAAiBnB,aAArB,EAAoC;AAClC,aAAKmB,WAAL,CAAiBlB,WAAjB,GAA+B,IAA/B;AACD;AACF;AACF,GARO,CAAR;AASA8C,EAAAA,QAAQ,CAACtD,IAAD,EAAO,MAAP,EAAe,UAAUuD,QAAV,EAAoBC,IAApB,EAA0B;AAC/CD,IAAAA,QAAQ,CAACK,KAAT,CAAe,IAAf,EAAqBJ,IAArB;;AACA,QAAI,KAAK9B,WAAL,CAAiBnB,aAArB,EAAoC;AAClC,UAAI,KAAKmB,WAAL,CAAiBlB,WAArB,EAAkC;AAChC,aAAKkB,WAAL,CAAiBlB,WAAjB,GAA+B,KAA/B,CADgC,CAEhC;AACA;AACD;AACF;AACF,GATO,CAAR;AAUD","sourcesContent":["import { Tree, utils } from 'phylocanvas';\n\nconst { getPixelRatio } = utils.canvas;\n\nconst DEFAULTS = {\n  active: true,\n  pairwiseMatrix: {},\n  clusterActive: true,\n  clusterDraw: true,\n  clusterMatrix: [],\n  clusterMaxDistance: 20,\n  clusterDistance: 3,\n  clusterSamples: 3,\n};\n\n/*\nfunction walkMatrix(tree, start, node, walked, distance, max) {\n  walked.push(node)\n\n  if (distance >= max) {\n    return\n  }\n  if (node !== start && node.leaf === true) {\n    tree.pairwiseOps.pairwiseMatrix[start.id].push([node.id, distance])\n  }\n  for (let child of node.children) {\n    if (! walked.includes(child)) {\n      let newDistance = distance + child.branchLength\n      newDistance = parseFloat(newDistance.toFixed(10))\n      walkMatrix(tree, start, child, walked, newDistance, max)\n    }\n  }\n  if (node.parent && ! walked.includes(node.parent)) {\n    let newDistance = distance + node.branchLength\n    newDistance = parseFloat(newDistance.toFixed(10))\n    walkMatrix(tree, start, node.parent, walked, newDistance, max)\n  }\n}\n\nfunction buildPairwiseMatrix() {\n  for (let leaf of this.leaves) {\n    this.pairwiseOps.pairwiseMatrix[leaf.id] = []\n    walkMatrix(this, leaf, leaf, [], 0, this.pairwiseOps.clusterMaxDistance)\n  }\n  console.log(this.pairwiseOps.pairwiseMatrix)\n}\n*/\n\nfunction walkMatrix(tree, node, path, distance) {\n  let newDistance = Array.from(distance)\n  let newPath = Array.from(path)\n  if (node.parent !== null) {\n    newDistance.push(node.branchLength)\n  }\n  if (node.leaf === false) {\n    tree.pairwiseOps.pairwiseMatrix[node.id] = []\n    newPath.push(node.id)\n    for (let child of node.children) {\n      walkMatrix(tree, child, newPath, newDistance)\n    }\n  } else {\n    let totalDistance = 0\n    console.log(0)\n    for (let i in newPath) {\n      console.log(node.id, newPath[i], newDistance.slice(i), totalDistance)\n      \n      //tree.pairwiseOps.pairwiseMatrix[newPath[i]].push([node.id, totalDistance])\n    }\n  }  \n}\n\nfunction buildPairwiseMatrix() {\n  walkMatrix(this, this.root, [], [])\n  console.log(this.pairwiseOps.pairwiseMatrix)\n  console.log(this)\n}\n\nfunction buildClusterMatrix() {\n  this.pairwiseOps.clusterMatrix = []\n  for (let leaf in this.pairwiseOps.pairwiseMatrix) {\n    let cluster = [leaf]\n    for (let node of this.pairwiseOps.pairwiseMatrix[leaf]) {\n      if (node[1] <= this.pairwiseOps.clusterDistance) {\n        cluster.push(node[0])\n      }\n    }\n    if (cluster.length >= this.pairwiseOps.clusterSamples) {\n      cluster.sort()\n      cluster = JSON.stringify(cluster)\n      if (! this.pairwiseOps.clusterMatrix.includes(cluster)) {\n        this.pairwiseOps.clusterMatrix.push(cluster)\n      }\n    }\n  }\n}\n\nfunction colorNode() {\n  for (let leaf of this.leaves) {\n    leaf.setDisplay({\n      colour: this.branchColour,\n    })\n    leaf.label = leaf.id\n  }\n  for (let cluster of this.pairwiseOps.clusterMatrix) {\n    cluster = JSON.parse(cluster)\n    for (let id of cluster) {\n      \n      for (let leaf of this.findLeaves(id)) {\n        leaf.label += \"+\"\n        leaf.setDisplay({\n          colour: 'red',\n        })\n      }\n    }\n  }\n  this.draw()\n}\n\nexport default function plugin(decorate) {\n  decorate(this, 'createTree', (delegate, args) => {\n    const tree = delegate(...args);\n    const [ , config = {} ] = args;\n    tree.pairwiseOps = Object.assign({}, DEFAULTS, config.pairwiseOps || {});\n    return tree;\n  });\n  decorate(Tree, 'load', function (delegate, args) {\n    delegate.apply(this, args);\n    if (this.pairwiseOps.active) {\n      buildPairwiseMatrix.apply(this);\n      if (this.pairwiseOps.clusterActive) {\n        this.pairwiseOps.clusterDraw = true;\n      }\n    }   \n  });\n  decorate(Tree, 'draw', function (delegate, args) {\n    delegate.apply(this, args);\n    if (this.pairwiseOps.clusterActive) {\n      if (this.pairwiseOps.clusterDraw) {\n        this.pairwiseOps.clusterDraw = false;\n        //buildClusterMatrix.apply(this);\n        //colorNode.apply(this)\n      }\n    }\n  });\n}\n"]},"metadata":{},"sourceType":"module"}