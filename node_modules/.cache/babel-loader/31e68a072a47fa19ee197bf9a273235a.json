{"ast":null,"code":"import { Tree, utils } from 'phylocanvas';\nconst {\n  getPixelRatio\n} = utils.canvas;\nconst DEFAULTS = {\n  active: true,\n  pairwiseMatrix: {},\n  clusterActive: true,\n  clusterDraw: true,\n  clusterMatrix: [],\n  clusterMaxDistance: 20,\n  clusterDistance: 2,\n  clusterSamples: 3\n};\n\nfunction walkMatrix(tree, start, node, walked, distance, max) {\n  distance += node.branchLength;\n  distance = parseFloat(distance.toFixed(10));\n  walked.push(node);\n\n  if (distance >= max) {\n    return;\n  }\n\n  if (node != start && node.children.length == 0) {\n    tree.pairwiseOps.pairwiseMatrix[start.id].push([node.id, distance]);\n  }\n\n  for (let child of node.children) {\n    if (!walked.includes(child)) {\n      walkMatrix(tree, start, child, walked, distance, max);\n    }\n  }\n\n  if (node.parent && !walked.includes(node.parent)) {\n    walkMatrix(tree, start, node.parent, walked, distance, max);\n  }\n}\n\nfunction buildPairwiseMatrix() {\n  for (let leaf of this.leaves) {\n    this.pairwiseOps.pairwiseMatrix[leaf.id] = [];\n    walkMatrix(this, leaf, leaf, [], 0, this.pairwiseOps.clusterMaxDistance);\n  }\n}\n\nfunction buildClusterMatrix() {\n  for (let leaf in this.pairwiseOps.pairwiseMatrix) {\n    let cluster = [leaf];\n\n    for (let node of this.pairwiseOps.pairwiseMatrix[leaf]) {\n      if (node[1] <= this.pairwiseOps.clusterDistance) {\n        cluster.push(node[0]);\n      }\n    }\n\n    if (cluster.length >= this.pairwiseOps.clusterSamples) {\n      this.pairwiseOps.clusterMatrix.push(cluster);\n    }\n  }\n}\n\nfunction colorNode() {\n  for (let cluster of this.pairwiseOps.clusterMatrix) {\n    for (let leaf of cluster) {\n      this.leaves.filter(x => x.id === leaf)[0].setDisplay({\n        colour: 'red'\n      });\n    }\n  }\n\n  console.log(this.stringRepresentation);\n  console.log(\"done\");\n}\n\nexport default function plugin(decorate) {\n  decorate(this, 'createTree', (delegate, args) => {\n    const tree = delegate(...args);\n    const [, config = {}] = args;\n    tree.pairwiseOps = Object.assign({}, DEFAULTS, config.pairwiseOps || {});\n    return tree;\n  });\n  decorate(Tree, 'load', function (delegate, args) {\n    delegate.apply(this, args);\n\n    if (this.pairwiseOps.active) {\n      buildPairwiseMatrix.apply(this);\n\n      if (this.pairwiseOps.clusterActive) {\n        this.pairwiseOps.clusterDraw = true;\n      }\n    }\n  });\n  decorate(Tree, 'draw', function (delegate, args) {\n    delegate.apply(this, args);\n\n    if (this.pairwiseOps.clusterActive) {\n      if (this.pairwiseOps.clusterDraw) {\n        this.pairwiseOps.clusterDraw = false;\n        buildClusterMatrix.apply(this);\n        colorNode.apply(this);\n      }\n    }\n  });\n}","map":{"version":3,"sources":["/var/www/epitools/my_modules/phylocanvas-plugin-pairwise-ops/index.js"],"names":["Tree","utils","getPixelRatio","canvas","DEFAULTS","active","pairwiseMatrix","clusterActive","clusterDraw","clusterMatrix","clusterMaxDistance","clusterDistance","clusterSamples","walkMatrix","tree","start","node","walked","distance","max","branchLength","parseFloat","toFixed","push","children","length","pairwiseOps","id","child","includes","parent","buildPairwiseMatrix","leaf","leaves","buildClusterMatrix","cluster","colorNode","filter","x","setDisplay","colour","console","log","stringRepresentation","plugin","decorate","delegate","args","config","Object","assign","apply"],"mappings":"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","sourcesContent":["import { Tree, utils } from 'phylocanvas';\n\nconst { getPixelRatio } = utils.canvas;\n\nconst DEFAULTS = {\n  active: true,\n  pairwiseMatrix: {},\n  clusterActive: true,\n  clusterDraw: true,\n  clusterMatrix: [],\n  clusterMaxDistance: 20,\n  clusterDistance: 2,\n  clusterSamples: 3,\n};\n\nfunction walkMatrix(tree, start, node, walked, distance, max) {\n  distance += node.branchLength\n  distance = parseFloat(distance.toFixed(10))\n  walked.push(node)\n  if (distance >= max) {\n    return\n  }\n  if (node != start && node.children.length == 0) {\n    tree.pairwiseOps.pairwiseMatrix[start.id].push([node.id, distance])\n  }\n  for (let child of node.children) {\n    if (! walked.includes(child)) {\n      walkMatrix(tree, start, child, walked, distance, max)\n    }\n  }\n  if (node.parent && ! walked.includes(node.parent)) {\n    walkMatrix(tree, start, node.parent, walked, distance, max)\n  }\n}\n\nfunction buildPairwiseMatrix() {\n  for (let leaf of this.leaves) {\n    this.pairwiseOps.pairwiseMatrix[leaf.id] = []\n    walkMatrix(this, leaf, leaf, [], 0, this.pairwiseOps.clusterMaxDistance)\n  }\n}\n\nfunction buildClusterMatrix() {\n  for (let leaf in this.pairwiseOps.pairwiseMatrix) {\n    let cluster = [leaf]\n    for (let node of this.pairwiseOps.pairwiseMatrix[leaf]) {\n      if (node[1] <= this.pairwiseOps.clusterDistance) {\n        cluster.push(node[0])\n      }\n    }\n    if (cluster.length >= this.pairwiseOps.clusterSamples) {\n      this.pairwiseOps.clusterMatrix.push(cluster)\n    }\n  }\n}\n\nfunction colorNode() {\n  for (let cluster of this.pairwiseOps.clusterMatrix) {\n    for (let leaf of cluster) {\n      this.leaves.filter(x => x.id === leaf)[0].setDisplay({\n        colour: 'red',\n\n      })\n    }\n  }\n  console.log(this.stringRepresentation)\n  console.log(\"done\")\n}\n\nexport default function plugin(decorate) {\n  decorate(this, 'createTree', (delegate, args) => {\n    const tree = delegate(...args);\n    const [ , config = {} ] = args;\n    tree.pairwiseOps = Object.assign({}, DEFAULTS, config.pairwiseOps || {});\n    return tree;\n  });\n  decorate(Tree, 'load', function (delegate, args) {\n    delegate.apply(this, args);\n    if (this.pairwiseOps.active) {\n      buildPairwiseMatrix.apply(this);\n      if (this.pairwiseOps.clusterActive) {\n        this.pairwiseOps.clusterDraw = true;\n      }\n    }   \n  });\n  decorate(Tree, 'draw', function (delegate, args) {\n    delegate.apply(this, args);\n    if (this.pairwiseOps.clusterActive) {\n      if (this.pairwiseOps.clusterDraw) {\n        this.pairwiseOps.clusterDraw = false;\n        buildClusterMatrix.apply(this);\n        colorNode.apply(this)\n      }\n    }   \n  });\n}\n"]},"metadata":{},"sourceType":"module"}