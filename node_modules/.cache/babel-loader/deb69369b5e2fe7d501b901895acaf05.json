{"ast":null,"code":"import { Tree, utils } from 'phylocanvas';\nconst {\n  getPixelRatio\n} = utils.canvas;\nconst DEFAULTS = {\n  active: true,\n  pairwiseMatrix: {},\n  clusterActive: true,\n  clusterDraw: true,\n  clusterMatrix: [],\n  clusterMaxDistance: 20,\n  clusterDistance: 2,\n  clusterSamples: 3\n};\n\nfunction walkMatrix(tree, start, node, walked, distance, max) {\n  distance += node.branchLength;\n  distance = parseFloat(distance.toFixed(10));\n  walked.push(node);\n\n  if (distance >= max) {\n    return;\n  }\n\n  if (node != start && node.children.length == 0) {\n    pass; //tree.pairwiseOps.pairwiseMatrix[start.id].push([node.id, distance])\n  }\n\n  for (let child of node.children) {\n    if (!walked.includes(child)) {\n      walkMatrix(tree, start, child, walked, distance, max);\n    }\n  }\n\n  if (node.parent && !walked.includes(node.parent)) {\n    walkMatrix(tree, start, node.parent, walked, distance, max);\n  }\n}\n\nfunction buildPairwiseMatrix() {\n  console.log(this.leaves);\n\n  for (let leaf of this.leaves) {\n    this.pairwiseOps.pairwiseMatrix[leaf.id] = [];\n    walkMatrix(this, leaf, leaf, [], 0, this.pairwiseOps.clusterMaxDistance);\n  }\n}\n\nfunction buildClusterMatrix() {\n  console.log(\"buildClusterMatrix\");\n  console.log(this.stringRepresentation);\n  console.log(this.pairwiseOps.pairwiseMatrix);\n\n  for (let leaf in this.pairwiseOps.pairwiseMatrix) {\n    let cluster = [leaf];\n\n    for (let node of this.pairwiseOps.pairwiseMatrix[leaf]) {\n      if (node[1] <= this.pairwiseOps.clusterDistance) {\n        cluster.push(node[0]);\n      }\n    }\n\n    if (cluster.length >= this.pairwiseOps.clusterSamples) {\n      cluster.sort();\n\n      if (this.pairwiseOps.clusterMatrix.filter(x => x.join(\"_\") === cluster.join(\"_\")).length <= 0) {\n        this.pairwiseOps.clusterMatrix.push(cluster);\n      }\n    }\n  }\n\n  console.log(this.pairwiseOps.clusterMatrix);\n}\n\nexport default function plugin(decorate) {\n  decorate(this, 'createTree', (delegate, args) => {\n    const tree = delegate(...args);\n    const [, config = {}] = args;\n    tree.pairwiseOps = Object.assign({}, DEFAULTS, config.pairwiseOps || {});\n    return tree;\n  });\n  decorate(Tree, 'load', function (delegate, args) {\n    delegate.apply(this, args);\n\n    if (this.pairwiseOps.active) {\n      buildPairwiseMatrix.apply(this);\n\n      if (this.pairwiseOps.clusterActive) {\n        this.pairwiseOps.clusterDraw = true;\n      }\n    }\n  });\n  decorate(Tree, 'draw', function (delegate, args) {\n    delegate.apply(this, args);\n\n    if (this.pairwiseOps.clusterActive) {\n      console.log(\"clusterDraw\", this.pairwiseOps.clusterDraw);\n\n      if (this.pairwiseOps.clusterDraw) {\n        this.pairwiseOps.clusterDraw = false;\n        buildClusterMatrix.apply(this);\n      }\n    }\n  });\n}","map":{"version":3,"sources":["/var/www/epitools/my_modules/phylocanvas-plugin-pairwise-ops/index.js"],"names":["Tree","utils","getPixelRatio","canvas","DEFAULTS","active","pairwiseMatrix","clusterActive","clusterDraw","clusterMatrix","clusterMaxDistance","clusterDistance","clusterSamples","walkMatrix","tree","start","node","walked","distance","max","branchLength","parseFloat","toFixed","push","children","length","pass","child","includes","parent","buildPairwiseMatrix","console","log","leaves","leaf","pairwiseOps","id","buildClusterMatrix","stringRepresentation","cluster","sort","filter","x","join","plugin","decorate","delegate","args","config","Object","assign","apply"],"mappings":"AAAA,SAASA,IAAT,EAAeC,KAAf,QAA4B,aAA5B;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAoBD,KAAK,CAACE,MAAhC;AAEA,MAAMC,QAAQ,GAAG;AACfC,EAAAA,MAAM,EAAE,IADO;AAEfC,EAAAA,cAAc,EAAE,EAFD;AAGfC,EAAAA,aAAa,EAAE,IAHA;AAIfC,EAAAA,WAAW,EAAE,IAJE;AAKfC,EAAAA,aAAa,EAAE,EALA;AAMfC,EAAAA,kBAAkB,EAAE,EANL;AAOfC,EAAAA,eAAe,EAAE,CAPF;AAQfC,EAAAA,cAAc,EAAE;AARD,CAAjB;;AAWA,SAASC,UAAT,CAAoBC,IAApB,EAA0BC,KAA1B,EAAiCC,IAAjC,EAAuCC,MAAvC,EAA+CC,QAA/C,EAAyDC,GAAzD,EAA8D;AAC5DD,EAAAA,QAAQ,IAAIF,IAAI,CAACI,YAAjB;AACAF,EAAAA,QAAQ,GAAGG,UAAU,CAACH,QAAQ,CAACI,OAAT,CAAiB,EAAjB,CAAD,CAArB;AACAL,EAAAA,MAAM,CAACM,IAAP,CAAYP,IAAZ;;AACA,MAAIE,QAAQ,IAAIC,GAAhB,EAAqB;AACnB;AACD;;AACD,MAAIH,IAAI,IAAID,KAAR,IAAiBC,IAAI,CAACQ,QAAL,CAAcC,MAAd,IAAwB,CAA7C,EAAgD;AAC9CC,IAAAA,IAAI,CAD0C,CAE9C;AACD;;AACD,OAAK,IAAIC,KAAT,IAAkBX,IAAI,CAACQ,QAAvB,EAAiC;AAC/B,QAAI,CAAEP,MAAM,CAACW,QAAP,CAAgBD,KAAhB,CAAN,EAA8B;AAC5Bd,MAAAA,UAAU,CAACC,IAAD,EAAOC,KAAP,EAAcY,KAAd,EAAqBV,MAArB,EAA6BC,QAA7B,EAAuCC,GAAvC,CAAV;AACD;AACF;;AACD,MAAIH,IAAI,CAACa,MAAL,IAAe,CAAEZ,MAAM,CAACW,QAAP,CAAgBZ,IAAI,CAACa,MAArB,CAArB,EAAmD;AACjDhB,IAAAA,UAAU,CAACC,IAAD,EAAOC,KAAP,EAAcC,IAAI,CAACa,MAAnB,EAA2BZ,MAA3B,EAAmCC,QAAnC,EAA6CC,GAA7C,CAAV;AACD;AACF;;AAED,SAASW,mBAAT,GAA+B;AAC7BC,EAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,MAAjB;;AACA,OAAK,IAAIC,IAAT,IAAiB,KAAKD,MAAtB,EAA8B;AAC5B,SAAKE,WAAL,CAAiB7B,cAAjB,CAAgC4B,IAAI,CAACE,EAArC,IAA2C,EAA3C;AACAvB,IAAAA,UAAU,CAAC,IAAD,EAAOqB,IAAP,EAAaA,IAAb,EAAmB,EAAnB,EAAuB,CAAvB,EAA0B,KAAKC,WAAL,CAAiBzB,kBAA3C,CAAV;AACD;AACF;;AAED,SAAS2B,kBAAT,GAA8B;AAC5BN,EAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAY,KAAKM,oBAAjB;AACAP,EAAAA,OAAO,CAACC,GAAR,CAAY,KAAKG,WAAL,CAAiB7B,cAA7B;;AACA,OAAK,IAAI4B,IAAT,IAAiB,KAAKC,WAAL,CAAiB7B,cAAlC,EAAkD;AAChD,QAAIiC,OAAO,GAAG,CAACL,IAAD,CAAd;;AACA,SAAK,IAAIlB,IAAT,IAAiB,KAAKmB,WAAL,CAAiB7B,cAAjB,CAAgC4B,IAAhC,CAAjB,EAAwD;AACtD,UAAIlB,IAAI,CAAC,CAAD,CAAJ,IAAW,KAAKmB,WAAL,CAAiBxB,eAAhC,EAAiD;AAC/C4B,QAAAA,OAAO,CAAChB,IAAR,CAAaP,IAAI,CAAC,CAAD,CAAjB;AACD;AACF;;AACD,QAAIuB,OAAO,CAACd,MAAR,IAAkB,KAAKU,WAAL,CAAiBvB,cAAvC,EAAuD;AACrD2B,MAAAA,OAAO,CAACC,IAAR;;AACA,UAAI,KAAKL,WAAL,CAAiB1B,aAAjB,CAA+BgC,MAA/B,CAAsCC,CAAC,IAAIA,CAAC,CAACC,IAAF,CAAO,GAAP,MAAgBJ,OAAO,CAACI,IAAR,CAAa,GAAb,CAA3D,EAA8ElB,MAA9E,IAAwF,CAA5F,EAA+F;AAC7F,aAAKU,WAAL,CAAiB1B,aAAjB,CAA+Bc,IAA/B,CAAoCgB,OAApC;AACD;AACF;AACF;;AACDR,EAAAA,OAAO,CAACC,GAAR,CAAY,KAAKG,WAAL,CAAiB1B,aAA7B;AACD;;AAED,eAAe,SAASmC,MAAT,CAAgBC,QAAhB,EAA0B;AACvCA,EAAAA,QAAQ,CAAC,IAAD,EAAO,YAAP,EAAqB,CAACC,QAAD,EAAWC,IAAX,KAAoB;AAC/C,UAAMjC,IAAI,GAAGgC,QAAQ,CAAC,GAAGC,IAAJ,CAArB;AACA,UAAM,GAAIC,MAAM,GAAG,EAAb,IAAoBD,IAA1B;AACAjC,IAAAA,IAAI,CAACqB,WAAL,GAAmBc,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB9C,QAAlB,EAA4B4C,MAAM,CAACb,WAAP,IAAsB,EAAlD,CAAnB;AACA,WAAOrB,IAAP;AACD,GALO,CAAR;AAMA+B,EAAAA,QAAQ,CAAC7C,IAAD,EAAO,MAAP,EAAe,UAAU8C,QAAV,EAAoBC,IAApB,EAA0B;AAC/CD,IAAAA,QAAQ,CAACK,KAAT,CAAe,IAAf,EAAqBJ,IAArB;;AACA,QAAI,KAAKZ,WAAL,CAAiB9B,MAArB,EAA6B;AAC3ByB,MAAAA,mBAAmB,CAACqB,KAApB,CAA0B,IAA1B;;AACA,UAAI,KAAKhB,WAAL,CAAiB5B,aAArB,EAAoC;AAClC,aAAK4B,WAAL,CAAiB3B,WAAjB,GAA+B,IAA/B;AACD;AACF;AACF,GARO,CAAR;AASAqC,EAAAA,QAAQ,CAAC7C,IAAD,EAAO,MAAP,EAAe,UAAU8C,QAAV,EAAoBC,IAApB,EAA0B;AAC/CD,IAAAA,QAAQ,CAACK,KAAT,CAAe,IAAf,EAAqBJ,IAArB;;AACA,QAAI,KAAKZ,WAAL,CAAiB5B,aAArB,EAAoC;AAClCwB,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2B,KAAKG,WAAL,CAAiB3B,WAA5C;;AACA,UAAI,KAAK2B,WAAL,CAAiB3B,WAArB,EAAkC;AAChC,aAAK2B,WAAL,CAAiB3B,WAAjB,GAA+B,KAA/B;AACA6B,QAAAA,kBAAkB,CAACc,KAAnB,CAAyB,IAAzB;AACD;AACF;AACF,GATO,CAAR;AAUD","sourcesContent":["import { Tree, utils } from 'phylocanvas';\n\nconst { getPixelRatio } = utils.canvas;\n\nconst DEFAULTS = {\n  active: true,\n  pairwiseMatrix: {},\n  clusterActive: true,\n  clusterDraw: true,\n  clusterMatrix: [],\n  clusterMaxDistance: 20,\n  clusterDistance: 2,\n  clusterSamples: 3,\n};\n\nfunction walkMatrix(tree, start, node, walked, distance, max) {\n  distance += node.branchLength\n  distance = parseFloat(distance.toFixed(10))\n  walked.push(node)\n  if (distance >= max) {\n    return\n  }\n  if (node != start && node.children.length == 0) {\n    pass\n    //tree.pairwiseOps.pairwiseMatrix[start.id].push([node.id, distance])\n  }\n  for (let child of node.children) {\n    if (! walked.includes(child)) {\n      walkMatrix(tree, start, child, walked, distance, max)\n    }\n  }\n  if (node.parent && ! walked.includes(node.parent)) {\n    walkMatrix(tree, start, node.parent, walked, distance, max)\n  }\n}\n\nfunction buildPairwiseMatrix() {\n  console.log(this.leaves)\n  for (let leaf of this.leaves) {\n    this.pairwiseOps.pairwiseMatrix[leaf.id] = []\n    walkMatrix(this, leaf, leaf, [], 0, this.pairwiseOps.clusterMaxDistance)\n  }\n}\n\nfunction buildClusterMatrix() {\n  console.log(\"buildClusterMatrix\")\n  console.log(this.stringRepresentation)\n  console.log(this.pairwiseOps.pairwiseMatrix)\n  for (let leaf in this.pairwiseOps.pairwiseMatrix) {\n    let cluster = [leaf]\n    for (let node of this.pairwiseOps.pairwiseMatrix[leaf]) {\n      if (node[1] <= this.pairwiseOps.clusterDistance) {\n        cluster.push(node[0])\n      }\n    }\n    if (cluster.length >= this.pairwiseOps.clusterSamples) {\n      cluster.sort()\n      if (this.pairwiseOps.clusterMatrix.filter(x => x.join(\"_\") === cluster.join(\"_\")).length <= 0) {\n        this.pairwiseOps.clusterMatrix.push(cluster)\n      }\n    }\n  }\n  console.log(this.pairwiseOps.clusterMatrix)\n}\n\nexport default function plugin(decorate) {\n  decorate(this, 'createTree', (delegate, args) => {\n    const tree = delegate(...args);\n    const [ , config = {} ] = args;\n    tree.pairwiseOps = Object.assign({}, DEFAULTS, config.pairwiseOps || {});\n    return tree;\n  });\n  decorate(Tree, 'load', function (delegate, args) {\n    delegate.apply(this, args);\n    if (this.pairwiseOps.active) {\n      buildPairwiseMatrix.apply(this);\n      if (this.pairwiseOps.clusterActive) {\n        this.pairwiseOps.clusterDraw = true;\n      }\n    }   \n  });\n  decorate(Tree, 'draw', function (delegate, args) {\n    delegate.apply(this, args);\n    if (this.pairwiseOps.clusterActive) {\n      console.log(\"clusterDraw\", this.pairwiseOps.clusterDraw)\n      if (this.pairwiseOps.clusterDraw) {\n        this.pairwiseOps.clusterDraw = false;\n        buildClusterMatrix.apply(this);\n      }\n    }   \n  });\n}\n"]},"metadata":{},"sourceType":"module"}