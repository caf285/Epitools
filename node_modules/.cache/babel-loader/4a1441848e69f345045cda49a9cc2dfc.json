{"ast":null,"code":"import { Tree, utils } from 'phylocanvas';\nconst {\n  getPixelRatio\n} = utils.canvas;\nconst DEFAULTS = {\n  active: true,\n  pairwiseMatrix: {},\n  clusterActive: true,\n  clusterDraw: true,\n  clusterMatrix: [],\n  clusterMaxDistance: 20,\n  clusterDistance: 10,\n  clusterSamples: 3\n};\n\nfunction walkMatrix(tree, start, node, walked, distance, max) {\n  if (node.id == \"pcn206\") {\n    console.log(node);\n  }\n\n  distance += node.branchLength;\n  distance = parseFloat(distance.toFixed(10));\n  walked.push(node);\n\n  if (distance >= max) {\n    return;\n  }\n\n  if (node != start && node.leaf === true) {\n    tree.pairwiseOps.pairwiseMatrix[start.id].push([node.id, distance]);\n  }\n\n  for (let child of node.children) {\n    if (!walked.includes(child)) {\n      walkMatrix(tree, start, child, walked, distance, max);\n    }\n  }\n\n  if (node.parent && !walked.includes(node.parent)) {\n    walkMatrix(tree, start, node.parent, walked, distance, max);\n  }\n}\n\nfunction buildPairwiseMatrix() {\n  for (let leaf of this.leaves) {\n    this.pairwiseOps.pairwiseMatrix[leaf.id] = [];\n    walkMatrix(this, leaf, leaf, [], 0, this.pairwiseOps.clusterMaxDistance);\n  }\n}\n\nfunction buildClusterMatrix() {\n  console.log(this.pairwiseOps.pairwiseMatrix);\n\n  for (let leaf in this.pairwiseOps.pairwiseMatrix) {\n    let cluster = [leaf];\n\n    for (let node of this.pairwiseOps.pairwiseMatrix[leaf]) {\n      if (node[1] <= this.pairwiseOps.clusterDistance) {\n        cluster.push(node[0]);\n      }\n    }\n\n    if (cluster.length >= this.pairwiseOps.clusterSamples) {\n      this.pairwiseOps.clusterMatrix.push(cluster);\n    }\n  }\n}\n\nfunction colorNode() {\n  for (let cluster of this.pairwiseOps.clusterMatrix) {\n    for (let leaf of cluster) {\n      this.leaves.filter(x => x.id === leaf)[0].setDisplay({\n        colour: 'red'\n      });\n    }\n  }\n\n  console.log(this.stringRepresentation);\n  console.log(\"done\");\n}\n\nexport default function plugin(decorate) {\n  decorate(this, 'createTree', (delegate, args) => {\n    const tree = delegate(...args);\n    const [, config = {}] = args;\n    tree.pairwiseOps = Object.assign({}, DEFAULTS, config.pairwiseOps || {});\n    return tree;\n  });\n  decorate(Tree, 'load', function (delegate, args) {\n    delegate.apply(this, args);\n\n    if (this.pairwiseOps.active) {\n      buildPairwiseMatrix.apply(this);\n\n      if (this.pairwiseOps.clusterActive) {\n        this.pairwiseOps.clusterDraw = true;\n      }\n    }\n  });\n  decorate(Tree, 'draw', function (delegate, args) {\n    delegate.apply(this, args);\n\n    if (this.pairwiseOps.clusterActive) {\n      if (this.pairwiseOps.clusterDraw) {\n        this.pairwiseOps.clusterDraw = false;\n        buildClusterMatrix.apply(this);\n        colorNode.apply(this);\n      }\n    }\n  });\n}","map":{"version":3,"sources":["/var/www/epitools/my_modules/phylocanvas-plugin-pairwise-ops/index.js"],"names":["Tree","utils","getPixelRatio","canvas","DEFAULTS","active","pairwiseMatrix","clusterActive","clusterDraw","clusterMatrix","clusterMaxDistance","clusterDistance","clusterSamples","walkMatrix","tree","start","node","walked","distance","max","id","console","log","branchLength","parseFloat","toFixed","push","leaf","pairwiseOps","child","children","includes","parent","buildPairwiseMatrix","leaves","buildClusterMatrix","cluster","length","colorNode","filter","x","setDisplay","colour","stringRepresentation","plugin","decorate","delegate","args","config","Object","assign","apply"],"mappings":"AAAA,SAASA,IAAT,EAAeC,KAAf,QAA4B,aAA5B;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAoBD,KAAK,CAACE,MAAhC;AAEA,MAAMC,QAAQ,GAAG;AACfC,EAAAA,MAAM,EAAE,IADO;AAEfC,EAAAA,cAAc,EAAE,EAFD;AAGfC,EAAAA,aAAa,EAAE,IAHA;AAIfC,EAAAA,WAAW,EAAE,IAJE;AAKfC,EAAAA,aAAa,EAAE,EALA;AAMfC,EAAAA,kBAAkB,EAAE,EANL;AAOfC,EAAAA,eAAe,EAAE,EAPF;AAQfC,EAAAA,cAAc,EAAE;AARD,CAAjB;;AAWA,SAASC,UAAT,CAAoBC,IAApB,EAA0BC,KAA1B,EAAiCC,IAAjC,EAAuCC,MAAvC,EAA+CC,QAA/C,EAAyDC,GAAzD,EAA8D;AAE5D,MAAIH,IAAI,CAACI,EAAL,IAAW,QAAf,EAAyB;AACvBC,IAAAA,OAAO,CAACC,GAAR,CAAYN,IAAZ;AACD;;AAEDE,EAAAA,QAAQ,IAAIF,IAAI,CAACO,YAAjB;AACAL,EAAAA,QAAQ,GAAGM,UAAU,CAACN,QAAQ,CAACO,OAAT,CAAiB,EAAjB,CAAD,CAArB;AACAR,EAAAA,MAAM,CAACS,IAAP,CAAYV,IAAZ;;AACA,MAAIE,QAAQ,IAAIC,GAAhB,EAAqB;AACnB;AACD;;AACD,MAAIH,IAAI,IAAID,KAAR,IAAiBC,IAAI,CAACW,IAAL,KAAc,IAAnC,EAAyC;AACvCb,IAAAA,IAAI,CAACc,WAAL,CAAiBtB,cAAjB,CAAgCS,KAAK,CAACK,EAAtC,EAA0CM,IAA1C,CAA+C,CAACV,IAAI,CAACI,EAAN,EAAUF,QAAV,CAA/C;AACD;;AACD,OAAK,IAAIW,KAAT,IAAkBb,IAAI,CAACc,QAAvB,EAAiC;AAC/B,QAAI,CAAEb,MAAM,CAACc,QAAP,CAAgBF,KAAhB,CAAN,EAA8B;AAC5BhB,MAAAA,UAAU,CAACC,IAAD,EAAOC,KAAP,EAAcc,KAAd,EAAqBZ,MAArB,EAA6BC,QAA7B,EAAuCC,GAAvC,CAAV;AACD;AACF;;AACD,MAAIH,IAAI,CAACgB,MAAL,IAAe,CAAEf,MAAM,CAACc,QAAP,CAAgBf,IAAI,CAACgB,MAArB,CAArB,EAAmD;AACjDnB,IAAAA,UAAU,CAACC,IAAD,EAAOC,KAAP,EAAcC,IAAI,CAACgB,MAAnB,EAA2Bf,MAA3B,EAAmCC,QAAnC,EAA6CC,GAA7C,CAAV;AACD;AACF;;AAED,SAASc,mBAAT,GAA+B;AAC7B,OAAK,IAAIN,IAAT,IAAiB,KAAKO,MAAtB,EAA8B;AAC5B,SAAKN,WAAL,CAAiBtB,cAAjB,CAAgCqB,IAAI,CAACP,EAArC,IAA2C,EAA3C;AACAP,IAAAA,UAAU,CAAC,IAAD,EAAOc,IAAP,EAAaA,IAAb,EAAmB,EAAnB,EAAuB,CAAvB,EAA0B,KAAKC,WAAL,CAAiBlB,kBAA3C,CAAV;AACD;AACF;;AAED,SAASyB,kBAAT,GAA8B;AAC5Bd,EAAAA,OAAO,CAACC,GAAR,CAAY,KAAKM,WAAL,CAAiBtB,cAA7B;;AACA,OAAK,IAAIqB,IAAT,IAAiB,KAAKC,WAAL,CAAiBtB,cAAlC,EAAkD;AAChD,QAAI8B,OAAO,GAAG,CAACT,IAAD,CAAd;;AACA,SAAK,IAAIX,IAAT,IAAiB,KAAKY,WAAL,CAAiBtB,cAAjB,CAAgCqB,IAAhC,CAAjB,EAAwD;AACtD,UAAIX,IAAI,CAAC,CAAD,CAAJ,IAAW,KAAKY,WAAL,CAAiBjB,eAAhC,EAAiD;AAC/CyB,QAAAA,OAAO,CAACV,IAAR,CAAaV,IAAI,CAAC,CAAD,CAAjB;AACD;AACF;;AACD,QAAIoB,OAAO,CAACC,MAAR,IAAkB,KAAKT,WAAL,CAAiBhB,cAAvC,EAAuD;AACrD,WAAKgB,WAAL,CAAiBnB,aAAjB,CAA+BiB,IAA/B,CAAoCU,OAApC;AACD;AACF;AACF;;AAED,SAASE,SAAT,GAAqB;AACnB,OAAK,IAAIF,OAAT,IAAoB,KAAKR,WAAL,CAAiBnB,aAArC,EAAoD;AAClD,SAAK,IAAIkB,IAAT,IAAiBS,OAAjB,EAA0B;AACxB,WAAKF,MAAL,CAAYK,MAAZ,CAAmBC,CAAC,IAAIA,CAAC,CAACpB,EAAF,KAASO,IAAjC,EAAuC,CAAvC,EAA0Cc,UAA1C,CAAqD;AACnDC,QAAAA,MAAM,EAAE;AAD2C,OAArD;AAID;AACF;;AACDrB,EAAAA,OAAO,CAACC,GAAR,CAAY,KAAKqB,oBAAjB;AACAtB,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACD;;AAED,eAAe,SAASsB,MAAT,CAAgBC,QAAhB,EAA0B;AACvCA,EAAAA,QAAQ,CAAC,IAAD,EAAO,YAAP,EAAqB,CAACC,QAAD,EAAWC,IAAX,KAAoB;AAC/C,UAAMjC,IAAI,GAAGgC,QAAQ,CAAC,GAAGC,IAAJ,CAArB;AACA,UAAM,GAAIC,MAAM,GAAG,EAAb,IAAoBD,IAA1B;AACAjC,IAAAA,IAAI,CAACc,WAAL,GAAmBqB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB9C,QAAlB,EAA4B4C,MAAM,CAACpB,WAAP,IAAsB,EAAlD,CAAnB;AACA,WAAOd,IAAP;AACD,GALO,CAAR;AAMA+B,EAAAA,QAAQ,CAAC7C,IAAD,EAAO,MAAP,EAAe,UAAU8C,QAAV,EAAoBC,IAApB,EAA0B;AAC/CD,IAAAA,QAAQ,CAACK,KAAT,CAAe,IAAf,EAAqBJ,IAArB;;AACA,QAAI,KAAKnB,WAAL,CAAiBvB,MAArB,EAA6B;AAC3B4B,MAAAA,mBAAmB,CAACkB,KAApB,CAA0B,IAA1B;;AACA,UAAI,KAAKvB,WAAL,CAAiBrB,aAArB,EAAoC;AAClC,aAAKqB,WAAL,CAAiBpB,WAAjB,GAA+B,IAA/B;AACD;AACF;AACF,GARO,CAAR;AASAqC,EAAAA,QAAQ,CAAC7C,IAAD,EAAO,MAAP,EAAe,UAAU8C,QAAV,EAAoBC,IAApB,EAA0B;AAC/CD,IAAAA,QAAQ,CAACK,KAAT,CAAe,IAAf,EAAqBJ,IAArB;;AACA,QAAI,KAAKnB,WAAL,CAAiBrB,aAArB,EAAoC;AAClC,UAAI,KAAKqB,WAAL,CAAiBpB,WAArB,EAAkC;AAChC,aAAKoB,WAAL,CAAiBpB,WAAjB,GAA+B,KAA/B;AACA2B,QAAAA,kBAAkB,CAACgB,KAAnB,CAAyB,IAAzB;AACAb,QAAAA,SAAS,CAACa,KAAV,CAAgB,IAAhB;AACD;AACF;AACF,GATO,CAAR;AAUD","sourcesContent":["import { Tree, utils } from 'phylocanvas';\n\nconst { getPixelRatio } = utils.canvas;\n\nconst DEFAULTS = {\n  active: true,\n  pairwiseMatrix: {},\n  clusterActive: true,\n  clusterDraw: true,\n  clusterMatrix: [],\n  clusterMaxDistance: 20,\n  clusterDistance: 10,\n  clusterSamples: 3,\n};\n\nfunction walkMatrix(tree, start, node, walked, distance, max) {\n\n  if (node.id == \"pcn206\") {\n    console.log(node)\n  }\n\n  distance += node.branchLength\n  distance = parseFloat(distance.toFixed(10))\n  walked.push(node)\n  if (distance >= max) {\n    return\n  }\n  if (node != start && node.leaf === true) {\n    tree.pairwiseOps.pairwiseMatrix[start.id].push([node.id, distance])\n  }\n  for (let child of node.children) {\n    if (! walked.includes(child)) {\n      walkMatrix(tree, start, child, walked, distance, max)\n    }\n  }\n  if (node.parent && ! walked.includes(node.parent)) {\n    walkMatrix(tree, start, node.parent, walked, distance, max)\n  }\n}\n\nfunction buildPairwiseMatrix() {\n  for (let leaf of this.leaves) {\n    this.pairwiseOps.pairwiseMatrix[leaf.id] = []\n    walkMatrix(this, leaf, leaf, [], 0, this.pairwiseOps.clusterMaxDistance)\n  }\n}\n\nfunction buildClusterMatrix() {\n  console.log(this.pairwiseOps.pairwiseMatrix)\n  for (let leaf in this.pairwiseOps.pairwiseMatrix) {\n    let cluster = [leaf]\n    for (let node of this.pairwiseOps.pairwiseMatrix[leaf]) {\n      if (node[1] <= this.pairwiseOps.clusterDistance) {\n        cluster.push(node[0])\n      }\n    }\n    if (cluster.length >= this.pairwiseOps.clusterSamples) {\n      this.pairwiseOps.clusterMatrix.push(cluster)\n    }\n  }\n}\n\nfunction colorNode() {\n  for (let cluster of this.pairwiseOps.clusterMatrix) {\n    for (let leaf of cluster) {\n      this.leaves.filter(x => x.id === leaf)[0].setDisplay({\n        colour: 'red',\n\n      })\n    }\n  }\n  console.log(this.stringRepresentation)\n  console.log(\"done\")\n}\n\nexport default function plugin(decorate) {\n  decorate(this, 'createTree', (delegate, args) => {\n    const tree = delegate(...args);\n    const [ , config = {} ] = args;\n    tree.pairwiseOps = Object.assign({}, DEFAULTS, config.pairwiseOps || {});\n    return tree;\n  });\n  decorate(Tree, 'load', function (delegate, args) {\n    delegate.apply(this, args);\n    if (this.pairwiseOps.active) {\n      buildPairwiseMatrix.apply(this);\n      if (this.pairwiseOps.clusterActive) {\n        this.pairwiseOps.clusterDraw = true;\n      }\n    }   \n  });\n  decorate(Tree, 'draw', function (delegate, args) {\n    delegate.apply(this, args);\n    if (this.pairwiseOps.clusterActive) {\n      if (this.pairwiseOps.clusterDraw) {\n        this.pairwiseOps.clusterDraw = false;\n        buildClusterMatrix.apply(this);\n        colorNode.apply(this)\n      }\n    }   \n  });\n}\n"]},"metadata":{},"sourceType":"module"}