{"ast":null,"code":"var _jsxFileName = \"/var/www/pathogen-intelligence.tgen.org/epitools/src/phylocanvas/Phylocanvas.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useRef } from \"react\";\nimport Phylocanvas, { utils } from \"phylocanvas\";\nimport scalebar from \"phylocanvas-plugin-scalebar\";\nimport branchLength from \"phylocanvas-plugin-branch-length\";\nimport root from \"phylocanvas-plugin-root\";\nimport pairwiseOps from \"phylocanvas-plugin-pairwise-ops\";\nimport treeStats from \"phylocanvas-plugin-tree-stats\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nPhylocanvas.plugin(scalebar);\nPhylocanvas.plugin(branchLength);\nPhylocanvas.plugin(root);\nPhylocanvas.plugin(pairwiseOps);\nPhylocanvas.plugin(treeStats);\nconst {\n  getPixelRatio\n} = utils.canvas;\n\nfunction PhylocanvasView(props) {\n  _s();\n\n  let phylocanvas = useRef();\n  let [height, _setHeight] = useState(100);\n  let heightRef = useRef(height);\n\n  let setHeight = data => {\n    heightRef.current = data;\n\n    _setHeight(data);\n  };\n\n  let typeList = useRef([\"radial\", \"rectangular\", \"circular\", \"diagonal\", \"hierarchical\"]); //TODO: Fix height inheritance problem (relative height to window size without adding to window size for positive feedback loop)\n\n  useEffect(() => {\n    function handleResize() {\n      //setHeight(document.getElementsByClassName(\"Nav-body\")[0].clientHeight)\n      //setHeight(document.getElementsByClassName(\"Nav-body\")[0].clientHeight)\n      let heightChange = heightRef.current;\n      setHeight(Math.max(document.documentElement.clientHeight || 0, window.innerHeight || 0) - document.getElementsByClassName(\"Nav-header\")[0].clientHeight * 2);\n      heightChange = heightChange / heightRef.current;\n      phylocanvas.current.zoom = phylocanvas.current.zoom / heightChange;\n    }\n\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n  useEffect(() => {\n    phylocanvas.current = Phylocanvas.createTree(\"phylocanvas\");\n  }, []);\n  useEffect(() => {\n    phylocanvas.current.load(props.tree);\n  }, [props.tree]);\n  useEffect(() => {\n    if (typeList.current.includes(props.type)) {\n      phylocanvas.current.setTreeType(props.type);\n    } else {\n      phylocanvas.current.setTreeType(\"rectangular\");\n    }\n\n    phylocanvas.current.setNodeSize(props.nodeSize * getPixelRatio(phylocanvas.current.canvas) / 2);\n    phylocanvas.current.setTextSize(props.textSize * getPixelRatio(phylocanvas.current.canvas) / 2);\n    phylocanvas.current.lineWidth = props.lineWidth * getPixelRatio(phylocanvas.current.canvas) / 2;\n  }, [props.type]);\n  useEffect(() => {\n    phylocanvas.current.setNodeSize(props.nodeSize * getPixelRatio(phylocanvas.current.canvas) / 2);\n  }, [props.nodeSize]);\n  useEffect(() => {\n    phylocanvas.current.setTextSize(props.textSize * getPixelRatio(phylocanvas.current.canvas) / 2);\n  }, [props.textSize]);\n  useEffect(() => {\n    phylocanvas.current.showLabels = props.labels;\n    phylocanvas.current.alignLabels = props.align;\n    phylocanvas.current.lineWidth = props.lineWidth * getPixelRatio(phylocanvas.current.canvas) / 2;\n    phylocanvas.current.draw();\n  }, [props.labels, props.align, props.lineWidth]);\n  useEffect(() => {\n    phylocanvas.current.pairwiseOps.clusterDistance = props.clusterDistance;\n    phylocanvas.current.pairwiseOps.clusterSamples = props.clusterSamples;\n    console.log(phylocanvas.current);\n    phylocanvas.current.pairwiseOps.clusterDraw = true;\n    phylocanvas.current.draw();\n  }, [props.clusterDistance, props.clusterSamples]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"phylocanvas\",\n    style: {\n      height: height + \"px\",\n      width: \"100%\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PhylocanvasView, \"w7G9dnaKTh/9ZGEW0J0UNeEAlUU=\");\n\n_c = PhylocanvasView;\nexport default PhylocanvasView;\n\nvar _c;\n\n$RefreshReg$(_c, \"PhylocanvasView\");","map":{"version":3,"sources":["/var/www/pathogen-intelligence.tgen.org/epitools/src/phylocanvas/Phylocanvas.js"],"names":["React","useEffect","useState","useRef","Phylocanvas","utils","scalebar","branchLength","root","pairwiseOps","treeStats","plugin","getPixelRatio","canvas","PhylocanvasView","props","phylocanvas","height","_setHeight","heightRef","setHeight","data","current","typeList","handleResize","heightChange","Math","max","document","documentElement","clientHeight","window","innerHeight","getElementsByClassName","zoom","addEventListener","removeEventListener","createTree","load","tree","includes","type","setTreeType","setNodeSize","nodeSize","setTextSize","textSize","lineWidth","showLabels","labels","alignLabels","align","draw","clusterDistance","clusterSamples","console","log","clusterDraw","width"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\nimport Phylocanvas, { utils } from \"phylocanvas\";\nimport scalebar from \"phylocanvas-plugin-scalebar\";\nimport branchLength from \"phylocanvas-plugin-branch-length\";\nimport root from \"phylocanvas-plugin-root\";\nimport pairwiseOps from \"phylocanvas-plugin-pairwise-ops\";\nimport treeStats from \"phylocanvas-plugin-tree-stats\";\nPhylocanvas.plugin(scalebar)\nPhylocanvas.plugin(branchLength)\nPhylocanvas.plugin(root)\nPhylocanvas.plugin(pairwiseOps)\nPhylocanvas.plugin(treeStats)\n\nconst { getPixelRatio } = utils.canvas;\n\nfunction PhylocanvasView(props) {\n  let phylocanvas = useRef();\n  let [height, _setHeight] = useState(100)\n  let heightRef = useRef(height)\n\n  let setHeight = data => {\n    heightRef.current = data\n    _setHeight(data)\n  }\n\n  let typeList = useRef([\"radial\", \"rectangular\", \"circular\", \"diagonal\", \"hierarchical\"]);\n\n  //TODO: Fix height inheritance problem (relative height to window size without adding to window size for positive feedback loop)\n\n  useEffect(() => {\n    function handleResize() {\n      //setHeight(document.getElementsByClassName(\"Nav-body\")[0].clientHeight)\n      //setHeight(document.getElementsByClassName(\"Nav-body\")[0].clientHeight)\n      let heightChange = heightRef.current\n      setHeight(Math.max( document.documentElement.clientHeight || 0, window.innerHeight || 0) - document.getElementsByClassName(\"Nav-header\")[0].clientHeight * 2)\n      heightChange = heightChange/heightRef.current\n      phylocanvas.current.zoom = phylocanvas.current.zoom / heightChange\n    } \n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, [])\n\n  useEffect(() => {\n    phylocanvas.current = Phylocanvas.createTree(\"phylocanvas\")\n  }, [])\n\n  useEffect(() => {\n    phylocanvas.current.load(props.tree)\n  }, [props.tree])\n\n  useEffect(() => {\n    if (typeList.current.includes(props.type)) {\n      phylocanvas.current.setTreeType(props.type)\n    } else {\n      phylocanvas.current.setTreeType(\"rectangular\")\n    }\n    phylocanvas.current.setNodeSize(props.nodeSize * getPixelRatio(phylocanvas.current.canvas) / 2)\n    phylocanvas.current.setTextSize(props.textSize * getPixelRatio(phylocanvas.current.canvas) / 2)\n    phylocanvas.current.lineWidth = props.lineWidth * getPixelRatio(phylocanvas.current.canvas) / 2\n  }, [props.type])\n\n  useEffect(() => {\n    phylocanvas.current.setNodeSize(props.nodeSize * getPixelRatio(phylocanvas.current.canvas) / 2)\n  }, [props.nodeSize])\n\n  useEffect(() => {\n    phylocanvas.current.setTextSize(props.textSize * getPixelRatio(phylocanvas.current.canvas) / 2)\n  }, [props.textSize])\n\n  useEffect(() => {\n    phylocanvas.current.showLabels = props.labels\n    phylocanvas.current.alignLabels = props.align\n    phylocanvas.current.lineWidth = props.lineWidth * getPixelRatio(phylocanvas.current.canvas) / 2\n    phylocanvas.current.draw()\n  }, [props.labels, props.align, props.lineWidth])\n\n  useEffect(() => {\n    phylocanvas.current.pairwiseOps.clusterDistance = props.clusterDistance\n    phylocanvas.current.pairwiseOps.clusterSamples = props.clusterSamples\n    console.log(phylocanvas.current)\n    phylocanvas.current.pairwiseOps.clusterDraw = true\n    phylocanvas.current.draw()\n  }, [props.clusterDistance, props.clusterSamples])\n\n  return (\n    <div id=\"phylocanvas\" style={{height: height + \"px\", width: \"100%\"}}></div>\n  )\n}\n\nexport default PhylocanvasView;\n"]},"metadata":{},"sourceType":"module"}