{"ast":null,"code":"var _jsxFileName = \"/var/www/pathogen-intelligence.tgen.org/epitools/src/phylocanvas/Phylocanvas.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useRef } from \"react\";\nimport Phylocanvas, { utils } from \"phylocanvas\";\nimport scalebar from \"phylocanvas-plugin-scalebar\";\nimport branchLength from \"phylocanvas-plugin-branch-length\";\nimport root from \"phylocanvas-plugin-root\";\nimport pairwiseOps from \"phylocanvas-plugin-pairwise-ops\";\nimport treeStats from \"phylocanvas-plugin-tree-stats\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nPhylocanvas.plugin(scalebar);\nPhylocanvas.plugin(branchLength);\nPhylocanvas.plugin(root);\nPhylocanvas.plugin(pairwiseOps);\nPhylocanvas.plugin(treeStats);\nconst {\n  getPixelRatio\n} = utils.canvas;\n\nfunction PhylocanvasView(props) {\n  _s();\n\n  let phylocanvas = useRef();\n  let [height, _setHeight] = useState(100);\n  let heightRef = useRef(height);\n\n  let setHeight = data => {\n    heightRef.current = data;\n\n    _setHeight(data);\n  };\n\n  let [width, _setWidth] = useState(100);\n  let widthRef = useRef(width);\n\n  let setWidth = data => {\n    widthRef.current = data;\n\n    _setWidth(data);\n  };\n\n  let typeList = useRef([\"radial\", \"rectangular\", \"circular\", \"diagonal\", \"hierarchical\"]); //TODO: Fix height inheritance problem (relative height to window size without adding to window size for positive feedback loop)\n\n  useEffect(() => {\n    function updateHW() {\n      setHeight(Math.max(document.documentElement.clientHeight || 0, window.innerHeight || 0) - document.getElementsByClassName(\"Nav-header\")[0].clientHeight * 2);\n      setWidth(Math.max(document.documentElement.clientWidth || 0, window.innerWidth || 0));\n    }\n\n    function handleResize() {\n      let heightChange = heightRef.current;\n      let widthChange = widthRef.current;\n      updateHW();\n      heightChange = heightChange / heightRef.current;\n      widthChange = widthChange / widthRef.current;\n\n      if (phylocanvas.current.treeType == \"circular\") {\n        let newZoom = phylocanvas.current.zoom / heightChange;\n        phylocanvas.current.zoom = 1;\n        phylocanvas.current.offsety = height / 2 * phylocanvas.current.zoomFactor;\n        phylocanvas.current.offsetx = width / 2 * phylocanvas.current.zoomFactor;\n        phylocanvas.current.zoom = newZoom;\n      } // scale horizontally\n      //phylocanvas.current.zoom = phylocanvas.current.zoom / heightChange\n      //phylocanvas.current.branchScalar = phylocanvas.current.branchScalar * heightChange\n      //phylocanvas.current.offsetx = phylocanvas.current.offsetx / heightChange\n      // scale vertically\n      //phylocanvas.current.branchScalar = phylocanvas.current.branchScalar / widthChange\n\n    }\n\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n  useEffect(() => {\n    phylocanvas.current = Phylocanvas.createTree(\"phylocanvas\");\n  }, []);\n  useEffect(() => {\n    phylocanvas.current.load(props.tree);\n  }, [props.tree]);\n  useEffect(() => {\n    if (typeList.current.includes(props.type)) {\n      phylocanvas.current.setTreeType(props.type);\n    } else {\n      phylocanvas.current.setTreeType(\"rectangular\");\n    }\n\n    phylocanvas.current.setNodeSize(props.nodeSize * getPixelRatio(phylocanvas.current.canvas) / 2);\n    phylocanvas.current.setTextSize(props.textSize * getPixelRatio(phylocanvas.current.canvas) / 2);\n    phylocanvas.current.lineWidth = props.lineWidth * getPixelRatio(phylocanvas.current.canvas) / 2;\n  }, [props.type]);\n  useEffect(() => {\n    phylocanvas.current.setNodeSize(props.nodeSize * getPixelRatio(phylocanvas.current.canvas) / 2);\n  }, [props.nodeSize]);\n  useEffect(() => {\n    phylocanvas.current.setTextSize(props.textSize * getPixelRatio(phylocanvas.current.canvas) / 2);\n  }, [props.textSize]);\n  useEffect(() => {\n    phylocanvas.current.showLabels = props.labels;\n    phylocanvas.current.alignLabels = props.align;\n    phylocanvas.current.lineWidth = props.lineWidth * getPixelRatio(phylocanvas.current.canvas) / 2;\n    phylocanvas.current.draw();\n  }, [props.labels, props.align, props.lineWidth]);\n  useEffect(() => {\n    phylocanvas.current.pairwiseOps.clusterDistance = props.clusterDistance;\n    phylocanvas.current.pairwiseOps.clusterSamples = props.clusterSamples;\n    console.log(phylocanvas.current);\n    phylocanvas.current.pairwiseOps.clusterDraw = true;\n    phylocanvas.current.draw();\n  }, [props.clusterDistance, props.clusterSamples]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"phylocanvas\",\n    style: {\n      height: height + \"px\",\n      width: \"100%\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PhylocanvasView, \"MTt0xxfFygvtCCOH+Ixw8F45MoM=\");\n\n_c = PhylocanvasView;\nexport default PhylocanvasView;\n\nvar _c;\n\n$RefreshReg$(_c, \"PhylocanvasView\");","map":{"version":3,"sources":["/var/www/pathogen-intelligence.tgen.org/epitools/src/phylocanvas/Phylocanvas.js"],"names":["React","useEffect","useState","useRef","Phylocanvas","utils","scalebar","branchLength","root","pairwiseOps","treeStats","plugin","getPixelRatio","canvas","PhylocanvasView","props","phylocanvas","height","_setHeight","heightRef","setHeight","data","current","width","_setWidth","widthRef","setWidth","typeList","updateHW","Math","max","document","documentElement","clientHeight","window","innerHeight","getElementsByClassName","clientWidth","innerWidth","handleResize","heightChange","widthChange","treeType","newZoom","zoom","offsety","zoomFactor","offsetx","addEventListener","removeEventListener","createTree","load","tree","includes","type","setTreeType","setNodeSize","nodeSize","setTextSize","textSize","lineWidth","showLabels","labels","alignLabels","align","draw","clusterDistance","clusterSamples","console","log","clusterDraw"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\nimport Phylocanvas, { utils } from \"phylocanvas\";\nimport scalebar from \"phylocanvas-plugin-scalebar\";\nimport branchLength from \"phylocanvas-plugin-branch-length\";\nimport root from \"phylocanvas-plugin-root\";\nimport pairwiseOps from \"phylocanvas-plugin-pairwise-ops\";\nimport treeStats from \"phylocanvas-plugin-tree-stats\";\nPhylocanvas.plugin(scalebar)\nPhylocanvas.plugin(branchLength)\nPhylocanvas.plugin(root)\nPhylocanvas.plugin(pairwiseOps)\nPhylocanvas.plugin(treeStats)\n\nconst { getPixelRatio } = utils.canvas;\n\nfunction PhylocanvasView(props) {\n  let phylocanvas = useRef();\n  let [height, _setHeight] = useState(100)\n  let heightRef = useRef(height)\n  let setHeight = data => {\n    heightRef.current = data\n    _setHeight(data)\n  }\n  let [width, _setWidth] = useState(100)\n  let widthRef = useRef(width)\n  let setWidth = data => {\n    widthRef.current = data\n    _setWidth(data)\n  }\n\n  let typeList = useRef([\"radial\", \"rectangular\", \"circular\", \"diagonal\", \"hierarchical\"]);\n\n  //TODO: Fix height inheritance problem (relative height to window size without adding to window size for positive feedback loop)\n\n  useEffect(() => {\n    function updateHW() {\n      setHeight(Math.max( document.documentElement.clientHeight || 0, window.innerHeight || 0) - document.getElementsByClassName(\"Nav-header\")[0].clientHeight * 2)\n      setWidth(Math.max( document.documentElement.clientWidth || 0, window.innerWidth || 0))\n    }\n    function handleResize() {\n      let heightChange = heightRef.current\n      let widthChange = widthRef.current\n      updateHW();\n      heightChange = heightChange/heightRef.current\n      widthChange = widthChange/widthRef.current\n      if (phylocanvas.current.treeType == \"circular\") {\n        let newZoom = phylocanvas.current.zoom / heightChange\n        phylocanvas.current.zoom = 1\n        phylocanvas.current.offsety = height / 2 * phylocanvas.current.zoomFactor\n        phylocanvas.current.offsetx = width / 2 * phylocanvas.current.zoomFactor\n        phylocanvas.current.zoom = newZoom\n      }\n      // scale horizontally\n      //phylocanvas.current.zoom = phylocanvas.current.zoom / heightChange\n      //phylocanvas.current.branchScalar = phylocanvas.current.branchScalar * heightChange\n      //phylocanvas.current.offsetx = phylocanvas.current.offsetx / heightChange\n\n      // scale vertically\n      //phylocanvas.current.branchScalar = phylocanvas.current.branchScalar / widthChange\n    } \n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, [])\n\n  useEffect(() => {\n    phylocanvas.current = Phylocanvas.createTree(\"phylocanvas\")\n  }, [])\n\n  useEffect(() => {\n    phylocanvas.current.load(props.tree)\n  }, [props.tree])\n\n  useEffect(() => {\n    if (typeList.current.includes(props.type)) {\n      phylocanvas.current.setTreeType(props.type)\n    } else {\n      phylocanvas.current.setTreeType(\"rectangular\")\n    }\n    phylocanvas.current.setNodeSize(props.nodeSize * getPixelRatio(phylocanvas.current.canvas) / 2)\n    phylocanvas.current.setTextSize(props.textSize * getPixelRatio(phylocanvas.current.canvas) / 2)\n    phylocanvas.current.lineWidth = props.lineWidth * getPixelRatio(phylocanvas.current.canvas) / 2\n  }, [props.type])\n\n  useEffect(() => {\n    phylocanvas.current.setNodeSize(props.nodeSize * getPixelRatio(phylocanvas.current.canvas) / 2)\n  }, [props.nodeSize])\n\n  useEffect(() => {\n    phylocanvas.current.setTextSize(props.textSize * getPixelRatio(phylocanvas.current.canvas) / 2)\n  }, [props.textSize])\n\n  useEffect(() => {\n    phylocanvas.current.showLabels = props.labels\n    phylocanvas.current.alignLabels = props.align\n    phylocanvas.current.lineWidth = props.lineWidth * getPixelRatio(phylocanvas.current.canvas) / 2\n    phylocanvas.current.draw()\n  }, [props.labels, props.align, props.lineWidth])\n\n  useEffect(() => {\n    phylocanvas.current.pairwiseOps.clusterDistance = props.clusterDistance\n    phylocanvas.current.pairwiseOps.clusterSamples = props.clusterSamples\n    console.log(phylocanvas.current)\n    phylocanvas.current.pairwiseOps.clusterDraw = true\n    phylocanvas.current.draw()\n  }, [props.clusterDistance, props.clusterSamples])\n\n  return (\n    <div id=\"phylocanvas\" style={{height: height + \"px\", width: \"100%\"}}></div>\n  )\n}\n\nexport default PhylocanvasView;\n"]},"metadata":{},"sourceType":"module"}