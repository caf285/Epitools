{"ast":null,"code":"import _slicedToArray from \"/var/www/pathogen-intelligence.tgen.org/epitools/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"/var/www/pathogen-intelligence.tgen.org/epitools/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { Tree, utils } from 'phylocanvas';\nvar getPixelRatio = utils.canvas.getPixelRatio;\nvar DEFAULTS = {\n  active: true\n};\n\nfunction drawBranchLength() {\n  var branchLength = this.branchLength;\n  var ctx = this.canvas;\n  var canvas = ctx.canvas;\n  var pixelRatio = getPixelRatio(ctx);\n  var textSize = this.textSize * this.zoom;\n  ctx.save();\n  ctx.font = \"\".concat(textSize, \"px \").concat(this.font);\n  ctx.fillStyle = this.branchColour;\n  ctx.textBaseline = \"bottom\";\n  ctx.textAlign = \"left\";\n\n  for (var branch in this.branches) {\n    if (this.branches[branch].branchLength == 0) {\n      continue;\n    }\n\n    branch = this.branches[branch];\n    var centerX = (this.offsetx + (branch.startx + branch.centerx) / 2 * this.zoom / pixelRatio) * pixelRatio;\n    var centerY = (this.offsety + (branch.starty + branch.centery) / 2 * this.zoom / pixelRatio) * pixelRatio;\n    var x = (this.offsetx + branch.centerx * this.zoom / pixelRatio) * pixelRatio;\n    var y = (this.offsety + branch.centery * this.zoom / pixelRatio) * pixelRatio;\n\n    if (this.treeType == \"rectangular\") {\n      ctx.textAlign = \"center\";\n      ctx.fillText(branch.branchLength, centerX, y);\n    } else if (this.treeType == \"hierarchical\") {\n      ctx.textBaseline = \"middle\";\n      ctx.fillText(branch.branchLength, x, centerY);\n    } else {\n      if (centerY > y) {\n        ctx.textAlign = \"right\";\n        centerX = centerX - pixelRatio * this.zoom;\n      } else {\n        ctx.textAlign = \"left\";\n        centerX = centerX + pixelRatio * this.zoom;\n      }\n\n      if (centerX > x) {\n        ctx.textBaseline = \"top\";\n        centerY = centerY + pixelRatio * this.zoom;\n      } else {\n        ctx.textBaseline = \"bottom\";\n        centerY = centerY - pixelRatio * this.zoom;\n      }\n\n      ctx.fillText(branch.branchLength, centerX, centerY);\n    }\n  }\n\n  ctx.restore();\n}\n\nexport default function plugin(decorate) {\n  decorate(this, 'createTree', function (delegate, args) {\n    var tree = delegate.apply(void 0, _toConsumableArray(args));\n\n    var _args = _slicedToArray(args, 2),\n        _args$ = _args[1],\n        config = _args$ === void 0 ? {} : _args$;\n\n    tree.branchLength = Object.assign({}, DEFAULTS, config.branchLength || {});\n    return tree;\n  });\n  decorate(Tree, 'draw', function (delegate, args) {\n    delegate.apply(this, args);\n\n    if (this.branchLength.active) {\n      drawBranchLength.apply(this);\n    }\n  });\n}","map":{"version":3,"sources":["/var/www/pathogen-intelligence.tgen.org/epitools/my_modules/phylocanvas-plugin-branch-length/index.js"],"names":["Tree","utils","getPixelRatio","canvas","DEFAULTS","active","drawBranchLength","branchLength","ctx","pixelRatio","textSize","zoom","save","font","fillStyle","branchColour","textBaseline","textAlign","branch","branches","centerX","offsetx","startx","centerx","centerY","offsety","starty","centery","x","y","treeType","fillText","restore","plugin","decorate","delegate","args","tree","config","Object","assign","apply"],"mappings":"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","sourcesContent":["import { Tree, utils } from 'phylocanvas';\n\nconst { getPixelRatio } = utils.canvas;\n\nconst DEFAULTS = {\n  active: true,\n};\n\nfunction drawBranchLength() {\n\n  const { branchLength } = this;\n  const ctx = this.canvas;\n  const canvas = ctx.canvas;\n  const pixelRatio = getPixelRatio(ctx);\n  const textSize = this.textSize * this.zoom\n\n  ctx.save();\n\n  ctx.font = `${textSize}px ${this.font}`;\n  ctx.fillStyle = this.branchColour;\n  ctx.textBaseline = \"bottom\";\n  ctx.textAlign = \"left\";\n\n  for (let branch in this.branches) {\n    if (this.branches[branch].branchLength == 0) {\n      continue\n    }\n    branch = this.branches[branch]\n    let centerX = (this.offsetx + (branch.startx + branch.centerx) / 2 * this.zoom / pixelRatio) * pixelRatio\n    let centerY = (this.offsety + (branch.starty + branch.centery) / 2 * this.zoom / pixelRatio) * pixelRatio\n    let x = (this.offsetx + branch.centerx * this.zoom / pixelRatio) * pixelRatio\n    let y = (this.offsety + branch.centery * this.zoom / pixelRatio) * pixelRatio\n    if (this.treeType == \"rectangular\") {\n      ctx.textAlign = \"center\"\n      ctx.fillText(branch.branchLength, centerX, y)\n    } else if (this.treeType == \"hierarchical\") {\n      ctx.textBaseline = \"middle\"\n      ctx.fillText(branch.branchLength, x, centerY)\n    } else {\n      if (centerY > y) {\n        ctx.textAlign = \"right\"\n        centerX = centerX - pixelRatio * this.zoom\n      } else {\n        ctx.textAlign = \"left\"\n        centerX = centerX + pixelRatio * this.zoom\n      }\n      if (centerX > x) {\n        ctx.textBaseline = \"top\"\n        centerY = centerY + pixelRatio * this.zoom\n      } else {\n        ctx.textBaseline = \"bottom\"\n        centerY = centerY - pixelRatio * this.zoom\n      }\n      ctx.fillText(branch.branchLength, centerX, centerY)\n    }\n  }\n\n  ctx.restore();\n}\n\nexport default function plugin(decorate) {\n  decorate(this, 'createTree', (delegate, args) => {\n    const tree = delegate(...args);\n    const [ , config = {} ] = args;\n    tree.branchLength = Object.assign({}, DEFAULTS, config.branchLength || {});\n    return tree;\n  });\n  decorate(Tree, 'draw', function (delegate, args) {\n    delegate.apply(this, args);\n    if (this.branchLength.active) {\n      drawBranchLength.apply(this);\n    }\n  });\n}\n"]},"metadata":{},"sourceType":"module"}