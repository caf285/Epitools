{"ast":null,"code":"import { Tree, utils } from 'phylocanvas';\nconst {\n  getPixelRatio\n} = utils.canvas;\nconst DEFAULTS = {\n  active: true\n};\n\nfunction getLeafXY(leaf) {\n  console.log(leaf);\n  return [leaf.startx, leaf.starty];\n}\n\nexport default function plugin(decorate) {\n  decorate(this, 'createTree', (delegate, args) => {\n    const tree = delegate(...args);\n    const [, config = {}] = args;\n    tree.treeStats = Object.assign({}, DEFAULTS, config.treeStats || {});\n    return tree;\n  });\n  decorate(Tree, 'load', function (delegate, args) {\n    delegate.apply(this, args);\n\n    if (this.treeStats.active) {\n      console.log(this.leaves[0]);\n      let ctx = this.canvas;\n      console.log(ctx);\n\n      for (let leaf of this.leaves) {\n        this.addListener('mousemove', e => {\n          let path = new Path2D();\n          let xy = getLeafXY(leaf);\n          path.moveTo(xy[0], xy[1]);\n          path.lineTo(xy[0], xy[1] + 100);\n          path.lineTo(xy[0] + 200, xy[1] + 100);\n          path.lineTo(xy[0] + 200, xy[1]);\n          path.lineTo(xy[0], xy[1]);\n          path.closePath();\n\n          if (this.canvas.isPointInPath(path, e.offsetX, e.offsetY)) {\n            ctx.fill(path);\n          }\n        });\n      }\n    }\n  });\n}","map":{"version":3,"sources":["/var/www/pathogen-intelligence.tgen.org/epitools/my_modules/phylocanvas-plugin-tree-stats/index.js"],"names":["Tree","utils","getPixelRatio","canvas","DEFAULTS","active","getLeafXY","leaf","console","log","startx","starty","plugin","decorate","delegate","args","tree","config","treeStats","Object","assign","apply","leaves","ctx","addListener","e","path","Path2D","xy","moveTo","lineTo","closePath","isPointInPath","offsetX","offsetY","fill"],"mappings":"AAAA,SAASA,IAAT,EAAeC,KAAf,QAA4B,aAA5B;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAoBD,KAAK,CAACE,MAAhC;AAEA,MAAMC,QAAQ,GAAG;AACfC,EAAAA,MAAM,EAAE;AADO,CAAjB;;AAIA,SAASC,SAAT,CAAmBC,IAAnB,EAAyB;AACvBC,EAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACA,SAAO,CAACA,IAAI,CAACG,MAAN,EAAcH,IAAI,CAACI,MAAnB,CAAP;AACD;;AAED,eAAe,SAASC,MAAT,CAAgBC,QAAhB,EAA0B;AACvCA,EAAAA,QAAQ,CAAC,IAAD,EAAO,YAAP,EAAqB,CAACC,QAAD,EAAWC,IAAX,KAAoB;AAC/C,UAAMC,IAAI,GAAGF,QAAQ,CAAC,GAAGC,IAAJ,CAArB;AACA,UAAM,GAAIE,MAAM,GAAG,EAAb,IAAoBF,IAA1B;AACAC,IAAAA,IAAI,CAACE,SAAL,GAAiBC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBhB,QAAlB,EAA4Ba,MAAM,CAACC,SAAP,IAAoB,EAAhD,CAAjB;AACA,WAAOF,IAAP;AACD,GALO,CAAR;AAMAH,EAAAA,QAAQ,CAACb,IAAD,EAAO,MAAP,EAAe,UAAUc,QAAV,EAAoBC,IAApB,EAA0B;AAC/CD,IAAAA,QAAQ,CAACO,KAAT,CAAe,IAAf,EAAqBN,IAArB;;AAEA,QAAI,KAAKG,SAAL,CAAeb,MAAnB,EAA2B;AAEzBG,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKa,MAAL,CAAY,CAAZ,CAAZ;AACA,UAAIC,GAAG,GAAG,KAAKpB,MAAf;AACAK,MAAAA,OAAO,CAACC,GAAR,CAAYc,GAAZ;;AAEA,WAAK,IAAIhB,IAAT,IAAiB,KAAKe,MAAtB,EAA8B;AAC5B,aAAKE,WAAL,CAAiB,WAAjB,EAA+BC,CAAD,IAAO;AACnC,cAAIC,IAAI,GAAG,IAAIC,MAAJ,EAAX;AACA,cAAIC,EAAE,GAAGtB,SAAS,CAACC,IAAD,CAAlB;AACAmB,UAAAA,IAAI,CAACG,MAAL,CAAYD,EAAE,CAAC,CAAD,CAAd,EAAmBA,EAAE,CAAC,CAAD,CAArB;AACAF,UAAAA,IAAI,CAACI,MAAL,CAAYF,EAAE,CAAC,CAAD,CAAd,EAAmBA,EAAE,CAAC,CAAD,CAAF,GAAQ,GAA3B;AACAF,UAAAA,IAAI,CAACI,MAAL,CAAYF,EAAE,CAAC,CAAD,CAAF,GAAQ,GAApB,EAAyBA,EAAE,CAAC,CAAD,CAAF,GAAQ,GAAjC;AACAF,UAAAA,IAAI,CAACI,MAAL,CAAYF,EAAE,CAAC,CAAD,CAAF,GAAQ,GAApB,EAAyBA,EAAE,CAAC,CAAD,CAA3B;AACAF,UAAAA,IAAI,CAACI,MAAL,CAAYF,EAAE,CAAC,CAAD,CAAd,EAAmBA,EAAE,CAAC,CAAD,CAArB;AACAF,UAAAA,IAAI,CAACK,SAAL;;AACA,cAAI,KAAK5B,MAAL,CAAY6B,aAAZ,CAA0BN,IAA1B,EAAgCD,CAAC,CAACQ,OAAlC,EAA2CR,CAAC,CAACS,OAA7C,CAAJ,EAA2D;AACzDX,YAAAA,GAAG,CAACY,IAAJ,CAAST,IAAT;AACD;AACF,SAZD;AAcD;AAEF;AACF,GA3BO,CAAR;AA4BD","sourcesContent":["import { Tree, utils } from 'phylocanvas';\n\nconst { getPixelRatio } = utils.canvas;\n\nconst DEFAULTS = {\n  active: true,\n};\n\nfunction getLeafXY(leaf) {\n  console.log(leaf)\n  return [leaf.startx, leaf.starty]\n}\n\nexport default function plugin(decorate) {\n  decorate(this, 'createTree', (delegate, args) => {\n    const tree = delegate(...args);\n    const [ , config = {} ] = args;\n    tree.treeStats = Object.assign({}, DEFAULTS, config.treeStats || {});\n    return tree;\n  });\n  decorate(Tree, 'load', function (delegate, args) {\n    delegate.apply(this, args);\n    \n    if (this.treeStats.active) {\n\n      console.log(this.leaves[0])\n      let ctx = this.canvas\n      console.log(ctx)\n\n      for (let leaf of this.leaves) {\n        this.addListener('mousemove', (e) => {\n          let path = new Path2D()\n          let xy = getLeafXY(leaf)\n          path.moveTo(xy[0], xy[1])\n          path.lineTo(xy[0], xy[1] + 100)\n          path.lineTo(xy[0] + 200, xy[1] + 100)\n          path.lineTo(xy[0] + 200, xy[1])\n          path.lineTo(xy[0], xy[1])\n          path.closePath()\n          if (this.canvas.isPointInPath(path, e.offsetX, e.offsetY)) {\n            ctx.fill(path)\n          }\n        })\n\n      }\n \n    }\n  });\n}\n"]},"metadata":{},"sourceType":"module"}