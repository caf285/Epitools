{"ast":null,"code":"import { Tree, utils } from 'phylocanvas';\nconst {\n  getPixelRatio\n} = utils.canvas;\nconst DEFAULTS = {\n  active: true\n};\n\nfunction addListeners() {\n  const tree = this;\n  const ctx = this.canvas;\n  const canvas = ctx.canvas;\n  const pixelRatio = getPixelRatio(ctx);\n  const textSize = this.textSize;\n\n  if (this.treeStats.active) {\n    //cleanup old event listeners\n    for (let eventListener of this.eventListeners.mousemove.filter(eventListener => eventListener.listener.name == \"treeStats\")) {\n      this.removeListener('mousemove', eventListener.listener, canvas);\n    }\n\n    console.log(this);\n\n    for (let leaf of this.leaves) {\n      this.addListener('mousemove', treeStats, canvas);\n\n      function treeStats(e) {\n        let path = new Path2D();\n        let startX = tree.offsetx + (leaf.minx + leaf.maxx) / 2;\n        let startY = tree.offsety + (leaf.miny + leaf.maxy) / 2;\n        ctx.fillArc(startX, StartY, 10, 0, 2 * Math.pi);\n        let x = (tree.offsetx - tree.baseNodeSize * tree.zoom + leaf.getLabelStartX() * tree.zoom / pixelRatio + leaf.maxx * tree.zoom / pixelRatio) * pixelRatio;\n        let y = (tree.offsety + (leaf.maxy + leaf.miny) / 2 * tree.zoom / pixelRatio) * pixelRatio;\n        ctx.save();\n        ctx.font = `${tree.textSize * pixelRatio}px ${tree.font}`;\n        let width = ctx.measureText(leaf.label).width * pixelRatio * tree.zoom / tree.zoomFactor;\n        let height = ctx.measureText(\"M\").width * pixelRatio * tree.zoom / tree.zoomFactor / 2;\n        ctx.restore();\n        path.moveTo(x, y + height);\n        path.lineTo(x + width, y + height);\n        path.lineTo(x + width, y - height);\n        path.lineTo(x, y - height);\n        path.lineTo(x, y + height);\n        path.closePath();\n        ctx.stroke(path);\n\n        if (ctx.isPointInPath(path, e.offsetX * pixelRatio, e.offsetY * pixelRatio)) {\n          leaf.highlighted = true;\n          ctx.save();\n          ctx.fillStyle = \"rgb(255, 255, 255)\";\n          x = e.offsetX * pixelRatio;\n          y = e.offsetY * pixelRatio;\n          ctx.clearRect(x + 20, y + 10, 200, 100);\n          ctx.fillRect(x + 20, y + 10, 200, 100);\n          ctx.restore();\n          console.log(leaf);\n        } else {\n          leaf.highlighted = false;\n        }\n      }\n    }\n  }\n}\n\nexport default function plugin(decorate) {\n  decorate(this, 'createTree', (delegate, args) => {\n    const tree = delegate(...args);\n    const [, config = {}] = args;\n    tree.treeStats = Object.assign({}, DEFAULTS, config.treeStats || {});\n    return tree;\n  });\n  decorate(Tree, 'load', function (delegate, args) {\n    delegate.apply(this, args);\n    addListeners.apply(this);\n    let ctx = this.canvas;\n    this.addListener('mousemove', e => {\n      let path = new Path2D();\n      path.moveTo(0, 0);\n      path.lineTo(e.offsetX * getPixelRatio(ctx), e.offsetY * getPixelRatio(ctx));\n      path.closePath();\n      ctx.stroke(path);\n    });\n  });\n}","map":{"version":3,"sources":["/var/www/pathogen-intelligence.tgen.org/epitools/my_modules/phylocanvas-plugin-tree-stats/index.js"],"names":["Tree","utils","getPixelRatio","canvas","DEFAULTS","active","addListeners","tree","ctx","pixelRatio","textSize","treeStats","eventListener","eventListeners","mousemove","filter","listener","name","removeListener","console","log","leaf","leaves","addListener","e","path","Path2D","startX","offsetx","minx","maxx","startY","offsety","miny","maxy","fillArc","StartY","Math","pi","x","baseNodeSize","zoom","getLabelStartX","y","save","font","width","measureText","label","zoomFactor","height","restore","moveTo","lineTo","closePath","stroke","isPointInPath","offsetX","offsetY","highlighted","fillStyle","clearRect","fillRect","plugin","decorate","delegate","args","config","Object","assign","apply"],"mappings":"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","sourcesContent":["import { Tree, utils } from 'phylocanvas';\n\nconst { getPixelRatio } = utils.canvas;\n\nconst DEFAULTS = {\n  active: true,\n};\n\nfunction addListeners() {\n  const tree = this\n  const ctx = this.canvas;\n  const canvas = ctx.canvas;\n  const pixelRatio = getPixelRatio(ctx);\n  const textSize = this.textSize\n  if (this.treeStats.active) {\n      //cleanup old event listeners\n      for (let eventListener of this.eventListeners.mousemove.filter(eventListener => eventListener.listener.name == \"treeStats\")) {\n        this.removeListener('mousemove', eventListener.listener, canvas)\n      }\n      console.log(this)\n      for (let leaf of this.leaves) {\n        this.addListener('mousemove', treeStats, canvas)\n        function treeStats(e) {\n          let path = new Path2D()\n\n          let startX = tree.offsetx + (leaf.minx + leaf.maxx) / 2\n          let startY = tree.offsety + (leaf.miny + leaf.maxy) / 2\n          ctx.fillArc(startX, StartY, 10, 0, 2 * Math.pi)\n\n          let x = (tree.offsetx - tree.baseNodeSize * tree.zoom + leaf.getLabelStartX() * tree.zoom / pixelRatio + leaf.maxx * tree.zoom / pixelRatio) * pixelRatio\n          let y = (tree.offsety + (leaf.maxy + leaf.miny) / 2 * tree.zoom / pixelRatio) * pixelRatio\n          ctx.save()\n          ctx.font = `${tree.textSize * pixelRatio}px ${tree.font}`;\n          let width = ctx.measureText(leaf.label).width * pixelRatio * tree.zoom / tree.zoomFactor\n          let height = ctx.measureText(\"M\").width * pixelRatio * tree.zoom / tree.zoomFactor / 2\n          ctx.restore()\n          path.moveTo(x, y + height)\n          path.lineTo(x + width, y + height)\n          path.lineTo(x + width, y - height)\n          path.lineTo(x, y - height)\n          path.lineTo(x, y + height)\n          path.closePath()\n          ctx.stroke(path)\n          if (ctx.isPointInPath(path, e.offsetX * pixelRatio, e.offsetY * pixelRatio)) {\n            leaf.highlighted = true\n            ctx.save()\n            ctx.fillStyle = \"rgb(255, 255, 255)\"\n            x = e.offsetX * pixelRatio\n            y = e.offsetY * pixelRatio\n            ctx.clearRect(x + 20, y + 10, 200, 100)\n            ctx.fillRect(x + 20, y + 10, 200, 100)\n            ctx.restore()\n            console.log(leaf)\n          } else {\n            leaf.highlighted = false\n          }\n        }\n      }\n  }\n}\n\nexport default function plugin(decorate) {\n  decorate(this, 'createTree', (delegate, args) => {\n    const tree = delegate(...args);\n    const [ , config = {} ] = args;\n    tree.treeStats = Object.assign({}, DEFAULTS, config.treeStats || {});\n    return tree;\n  });\n  decorate(Tree, 'load', function (delegate, args) {\n    delegate.apply(this, args);\n    addListeners.apply(this)\n    let ctx = this.canvas\n    this.addListener('mousemove', (e) => {\n      let path = new Path2D()\n      path.moveTo(0, 0)\n      path.lineTo(e.offsetX * getPixelRatio(ctx), e.offsetY * getPixelRatio(ctx))\n      path.closePath()\n      ctx.stroke(path)\n    })\n\n  });\n}\n"]},"metadata":{},"sourceType":"module"}