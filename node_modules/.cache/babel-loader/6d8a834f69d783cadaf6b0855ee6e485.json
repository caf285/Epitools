{"ast":null,"code":"import { Tree, utils } from 'phylocanvas';\nconst {\n  getPixelRatio\n} = utils.canvas;\nconst DEFAULTS = {\n  active: true,\n  pairwiseMatrix: {},\n  clusterActive: true,\n  clusterDraw: true,\n  clusterMatrix: [],\n  clusterMaxDistance: 20,\n  clusterDistance: 3,\n  clusterSamples: 3\n};\n/*\nfunction walkMatrix(tree, start, node, walked, distance, max) {\n  walked.push(node)\n\n  if (distance >= max) {\n    return\n  }\n  if (node !== start && node.leaf === true) {\n    tree.pairwiseOps.pairwiseMatrix[start.id].push([node.id, distance])\n  }\n  for (let child of node.children) {\n    if (! walked.includes(child)) {\n      let newDistance = distance + child.branchLength\n      newDistance = parseFloat(newDistance.toFixed(10))\n      walkMatrix(tree, start, child, walked, newDistance, max)\n    }\n  }\n  if (node.parent && ! walked.includes(node.parent)) {\n    let newDistance = distance + node.branchLength\n    newDistance = parseFloat(newDistance.toFixed(10))\n    walkMatrix(tree, start, node.parent, walked, newDistance, max)\n  }\n}\n\nfunction buildPairwiseMatrix() {\n  for (let leaf of this.leaves) {\n    this.pairwiseOps.pairwiseMatrix[leaf.id] = []\n    walkMatrix(this, leaf, leaf, [], 0, this.pairwiseOps.clusterMaxDistance)\n  }\n  console.log(this.pairwiseOps.pairwiseMatrix)\n}\n*/\n\nfunction walkMatrix(tree, node, path, distance) {\n  if (node.leaf === false) {\n    tree.pairwiseOps.pairwiseMatrix[node.id] = [];\n    let newPath = Array.from(path);\n    newPath.push(node.id);\n    let newDistance = Array.from(distance);\n    newDistance.push(node.branchLength);\n    console.log(newDistance);\n\n    for (let child of node.children) {\n      walkMatrix(tree, child, newPath, newDistance);\n    }\n  } else {\n    for (let i in path) {\n      console.log(path[i], distance[distance.length - i]);\n    }\n\n    console.log(path);\n  }\n}\n\nfunction buildPairwiseMatrix() {\n  walkMatrix(this, this.root, [], []);\n  console.log(this.pairwiseOps.pairwiseMatrix);\n}\n\nfunction buildClusterMatrix() {\n  this.pairwiseOps.clusterMatrix = [];\n\n  for (let leaf in this.pairwiseOps.pairwiseMatrix) {\n    let cluster = [leaf];\n\n    for (let node of this.pairwiseOps.pairwiseMatrix[leaf]) {\n      if (node[1] <= this.pairwiseOps.clusterDistance) {\n        cluster.push(node[0]);\n      }\n    }\n\n    if (cluster.length >= this.pairwiseOps.clusterSamples) {\n      cluster.sort();\n      cluster = JSON.stringify(cluster);\n\n      if (!this.pairwiseOps.clusterMatrix.includes(cluster)) {\n        this.pairwiseOps.clusterMatrix.push(cluster);\n      }\n    }\n  }\n}\n\nfunction colorNode() {\n  for (let leaf of this.leaves) {\n    leaf.setDisplay({\n      colour: this.branchColour\n    });\n    leaf.label = leaf.id;\n  }\n\n  for (let cluster of this.pairwiseOps.clusterMatrix) {\n    cluster = JSON.parse(cluster);\n\n    for (let id of cluster) {\n      for (let leaf of this.findLeaves(id)) {\n        leaf.label += \"+\";\n        leaf.setDisplay({\n          colour: 'red'\n        });\n      }\n    }\n  }\n\n  this.draw();\n}\n\nexport default function plugin(decorate) {\n  decorate(this, 'createTree', (delegate, args) => {\n    const tree = delegate(...args);\n    const [, config = {}] = args;\n    tree.pairwiseOps = Object.assign({}, DEFAULTS, config.pairwiseOps || {});\n    return tree;\n  });\n  decorate(Tree, 'load', function (delegate, args) {\n    delegate.apply(this, args);\n\n    if (this.pairwiseOps.active) {\n      buildPairwiseMatrix.apply(this);\n\n      if (this.pairwiseOps.clusterActive) {\n        this.pairwiseOps.clusterDraw = true;\n      }\n    }\n  });\n  decorate(Tree, 'draw', function (delegate, args) {\n    delegate.apply(this, args);\n\n    if (this.pairwiseOps.clusterActive) {\n      if (this.pairwiseOps.clusterDraw) {\n        this.pairwiseOps.clusterDraw = false; //buildClusterMatrix.apply(this);\n        //colorNode.apply(this)\n      }\n    }\n  });\n}","map":{"version":3,"sources":["/var/www/pathogen-intelligence.tgen.org/epitools/my_modules/phylocanvas-plugin-pairwise-ops/index.js"],"names":["Tree","utils","getPixelRatio","canvas","DEFAULTS","active","pairwiseMatrix","clusterActive","clusterDraw","clusterMatrix","clusterMaxDistance","clusterDistance","clusterSamples","walkMatrix","tree","node","path","distance","leaf","pairwiseOps","id","newPath","Array","from","push","newDistance","branchLength","console","log","child","children","i","length","buildPairwiseMatrix","root","buildClusterMatrix","cluster","sort","JSON","stringify","includes","colorNode","leaves","setDisplay","colour","branchColour","label","parse","findLeaves","draw","plugin","decorate","delegate","args","config","Object","assign","apply"],"mappings":"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","sourcesContent":["import { Tree, utils } from 'phylocanvas';\n\nconst { getPixelRatio } = utils.canvas;\n\nconst DEFAULTS = {\n  active: true,\n  pairwiseMatrix: {},\n  clusterActive: true,\n  clusterDraw: true,\n  clusterMatrix: [],\n  clusterMaxDistance: 20,\n  clusterDistance: 3,\n  clusterSamples: 3,\n};\n\n/*\nfunction walkMatrix(tree, start, node, walked, distance, max) {\n  walked.push(node)\n\n  if (distance >= max) {\n    return\n  }\n  if (node !== start && node.leaf === true) {\n    tree.pairwiseOps.pairwiseMatrix[start.id].push([node.id, distance])\n  }\n  for (let child of node.children) {\n    if (! walked.includes(child)) {\n      let newDistance = distance + child.branchLength\n      newDistance = parseFloat(newDistance.toFixed(10))\n      walkMatrix(tree, start, child, walked, newDistance, max)\n    }\n  }\n  if (node.parent && ! walked.includes(node.parent)) {\n    let newDistance = distance + node.branchLength\n    newDistance = parseFloat(newDistance.toFixed(10))\n    walkMatrix(tree, start, node.parent, walked, newDistance, max)\n  }\n}\n\nfunction buildPairwiseMatrix() {\n  for (let leaf of this.leaves) {\n    this.pairwiseOps.pairwiseMatrix[leaf.id] = []\n    walkMatrix(this, leaf, leaf, [], 0, this.pairwiseOps.clusterMaxDistance)\n  }\n  console.log(this.pairwiseOps.pairwiseMatrix)\n}\n*/\n\nfunction walkMatrix(tree, node, path, distance) {\n  if (node.leaf === false) {\n    tree.pairwiseOps.pairwiseMatrix[node.id] = []\n    let newPath = Array.from(path)\n    newPath.push(node.id)\n    let newDistance = Array.from(distance)\n    newDistance.push(node.branchLength)\n    console.log(newDistance)\n    for (let child of node.children) {\n      walkMatrix(tree, child, newPath, newDistance)\n    }\n  } else {\n    for (let i in path) {\n      console.log(path[i], distance[distance.length - i])\n    }\n    console.log(path)\n  }  \n}\n\nfunction buildPairwiseMatrix() {\n  walkMatrix(this, this.root, [], [])\n  console.log(this.pairwiseOps.pairwiseMatrix)\n}\n\nfunction buildClusterMatrix() {\n  this.pairwiseOps.clusterMatrix = []\n  for (let leaf in this.pairwiseOps.pairwiseMatrix) {\n    let cluster = [leaf]\n    for (let node of this.pairwiseOps.pairwiseMatrix[leaf]) {\n      if (node[1] <= this.pairwiseOps.clusterDistance) {\n        cluster.push(node[0])\n      }\n    }\n    if (cluster.length >= this.pairwiseOps.clusterSamples) {\n      cluster.sort()\n      cluster = JSON.stringify(cluster)\n      if (! this.pairwiseOps.clusterMatrix.includes(cluster)) {\n        this.pairwiseOps.clusterMatrix.push(cluster)\n      }\n    }\n  }\n}\n\nfunction colorNode() {\n  for (let leaf of this.leaves) {\n    leaf.setDisplay({\n      colour: this.branchColour,\n    })\n    leaf.label = leaf.id\n  }\n  for (let cluster of this.pairwiseOps.clusterMatrix) {\n    cluster = JSON.parse(cluster)\n    for (let id of cluster) {\n      \n      for (let leaf of this.findLeaves(id)) {\n        leaf.label += \"+\"\n        leaf.setDisplay({\n          colour: 'red',\n        })\n      }\n    }\n  }\n  this.draw()\n}\n\nexport default function plugin(decorate) {\n  decorate(this, 'createTree', (delegate, args) => {\n    const tree = delegate(...args);\n    const [ , config = {} ] = args;\n    tree.pairwiseOps = Object.assign({}, DEFAULTS, config.pairwiseOps || {});\n    return tree;\n  });\n  decorate(Tree, 'load', function (delegate, args) {\n    delegate.apply(this, args);\n    if (this.pairwiseOps.active) {\n      buildPairwiseMatrix.apply(this);\n      if (this.pairwiseOps.clusterActive) {\n        this.pairwiseOps.clusterDraw = true;\n      }\n    }   \n  });\n  decorate(Tree, 'draw', function (delegate, args) {\n    delegate.apply(this, args);\n    if (this.pairwiseOps.clusterActive) {\n      if (this.pairwiseOps.clusterDraw) {\n        this.pairwiseOps.clusterDraw = false;\n        //buildClusterMatrix.apply(this);\n        //colorNode.apply(this)\n      }\n    }\n  });\n}\n"]},"metadata":{},"sourceType":"module"}