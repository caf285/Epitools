{"ast":null,"code":"import { Tree, utils } from 'phylocanvas';\nconst {\n  getPixelRatio\n} = utils.canvas;\nconst DEFAULTS = {\n  active: true,\n  pairwiseMatrix: {}\n};\n\nfunction buildPairwiseMatrix() {\n  console.log(this.leaves);\n\n  for (let leaf in this.leaves) {\n    this.pairwiseMatrix[leaf] = [];\n  }\n}\n\nexport default function plugin(decorate) {\n  decorate(this, 'createTree', (delegate, args) => {\n    const tree = delegate(...args);\n    const [, config = {}] = args;\n    tree.pairwiseOps = Object.assign({}, DEFAULTS, config.pairwiseOps || {});\n    return tree;\n  });\n  decorate(Tree, 'load', function (delegate, args) {\n    delegate.apply(this, args);\n\n    if (this.pairwiseOps.active) {\n      buildPairwiseMatrix.apply(this);\n    }\n  });\n}","map":{"version":3,"sources":["/var/www/epitools/my_modules/phylocanvas-plugin-pairwise-ops/index.js"],"names":["Tree","utils","getPixelRatio","canvas","DEFAULTS","active","pairwiseMatrix","buildPairwiseMatrix","console","log","leaves","leaf","plugin","decorate","delegate","args","tree","config","pairwiseOps","Object","assign","apply"],"mappings":"AAAA,SAASA,IAAT,EAAeC,KAAf,QAA4B,aAA5B;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAoBD,KAAK,CAACE,MAAhC;AAEA,MAAMC,QAAQ,GAAG;AACfC,EAAAA,MAAM,EAAE,IADO;AAEfC,EAAAA,cAAc,EAAE;AAFD,CAAjB;;AAKA,SAASC,mBAAT,GAA+B;AAC7BC,EAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,MAAjB;;AACA,OAAK,IAAIC,IAAT,IAAiB,KAAKD,MAAtB,EAA8B;AAC5B,SAAKJ,cAAL,CAAoBK,IAApB,IAA4B,EAA5B;AACD;AACF;;AAED,eAAe,SAASC,MAAT,CAAgBC,QAAhB,EAA0B;AACvCA,EAAAA,QAAQ,CAAC,IAAD,EAAO,YAAP,EAAqB,CAACC,QAAD,EAAWC,IAAX,KAAoB;AAC/C,UAAMC,IAAI,GAAGF,QAAQ,CAAC,GAAGC,IAAJ,CAArB;AACA,UAAM,GAAIE,MAAM,GAAG,EAAb,IAAoBF,IAA1B;AACAC,IAAAA,IAAI,CAACE,WAAL,GAAmBC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBhB,QAAlB,EAA4Ba,MAAM,CAACC,WAAP,IAAsB,EAAlD,CAAnB;AACA,WAAOF,IAAP;AACD,GALO,CAAR;AAMAH,EAAAA,QAAQ,CAACb,IAAD,EAAO,MAAP,EAAe,UAAUc,QAAV,EAAoBC,IAApB,EAA0B;AAC/CD,IAAAA,QAAQ,CAACO,KAAT,CAAe,IAAf,EAAqBN,IAArB;;AACA,QAAI,KAAKG,WAAL,CAAiBb,MAArB,EAA6B;AAC3BE,MAAAA,mBAAmB,CAACc,KAApB,CAA0B,IAA1B;AACD;AACF,GALO,CAAR;AAMD","sourcesContent":["import { Tree, utils } from 'phylocanvas';\n\nconst { getPixelRatio } = utils.canvas;\n\nconst DEFAULTS = {\n  active: true,\n  pairwiseMatrix: {},\n};\n\nfunction buildPairwiseMatrix() {\n  console.log(this.leaves)\n  for (let leaf in this.leaves) {\n    this.pairwiseMatrix[leaf] = []\n  }\n}\n\nexport default function plugin(decorate) {\n  decorate(this, 'createTree', (delegate, args) => {\n    const tree = delegate(...args);\n    const [ , config = {} ] = args;\n    tree.pairwiseOps = Object.assign({}, DEFAULTS, config.pairwiseOps || {});\n    return tree;\n  });\n  decorate(Tree, 'load', function (delegate, args) {\n    delegate.apply(this, args);\n    if (this.pairwiseOps.active) {\n      buildPairwiseMatrix.apply(this);\n    }   \n  });\n}\n"]},"metadata":{},"sourceType":"module"}