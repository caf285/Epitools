{"ast":null,"code":"var _jsxFileName = \"/var/www/pathogen-intelligence.tgen.org/epitools/src/phylocanvas/Phylocanvas.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useRef } from \"react\";\nimport Phylocanvas, { utils } from \"phylocanvas\";\nimport scalebar from \"phylocanvas-plugin-scalebar\";\nimport branchLength from \"phylocanvas-plugin-branch-length\";\nimport root from \"phylocanvas-plugin-root\";\nimport pairwiseOps from \"phylocanvas-plugin-pairwise-ops\";\nimport treeStats from \"phylocanvas-plugin-tree-stats\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nPhylocanvas.plugin(scalebar);\nPhylocanvas.plugin(branchLength);\nPhylocanvas.plugin(root);\nPhylocanvas.plugin(pairwiseOps);\nPhylocanvas.plugin(treeStats);\nconst {\n  getPixelRatio\n} = utils.canvas;\n\nfunction PhylocanvasView(props) {\n  _s();\n\n  let phylocanvas = useRef();\n  let [height, setHeight] = useState(100);\n  let typeList = useRef([\"radial\", \"rectangular\", \"circular\", \"diagonal\", \"hierarchical\"]);\n  useEffect(() => {\n    setHeight(ref.current.clientHeight);\n\n    function handleResize() {\n      setHeight(ref.current.clientHeight);\n      console.log(ref.current.clientHeight);\n    }\n\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n  useEffect(() => {\n    phylocanvas.current = Phylocanvas.createTree(\"phylocanvas\");\n  }, []);\n  useEffect(() => {\n    phylocanvas.current.load(props.tree);\n  }, [props.tree]);\n  useEffect(() => {\n    if (typeList.current.includes(props.type)) {\n      phylocanvas.current.setTreeType(props.type);\n    } else {\n      phylocanvas.current.setTreeType(\"rectangular\");\n    }\n\n    phylocanvas.current.setNodeSize(props.nodeSize * getPixelRatio(phylocanvas.current.canvas) / 2);\n    phylocanvas.current.setTextSize(props.textSize * getPixelRatio(phylocanvas.current.canvas) / 2);\n    phylocanvas.current.lineWidth = props.lineWidth * getPixelRatio(phylocanvas.current.canvas) / 2;\n  }, [props.type]);\n  useEffect(() => {\n    phylocanvas.current.setNodeSize(props.nodeSize * getPixelRatio(phylocanvas.current.canvas) / 2);\n  }, [props.nodeSize]);\n  useEffect(() => {\n    phylocanvas.current.setTextSize(props.textSize * getPixelRatio(phylocanvas.current.canvas) / 2);\n  }, [props.textSize]);\n  useEffect(() => {\n    phylocanvas.current.showLabels = props.labels;\n    phylocanvas.current.alignLabels = props.align;\n    phylocanvas.current.lineWidth = props.lineWidth * getPixelRatio(phylocanvas.current.canvas) / 2;\n    phylocanvas.current.draw();\n  }, [props.labels, props.align, props.lineWidth]);\n  useEffect(() => {\n    phylocanvas.current.pairwiseOps.clusterDistance = props.clusterDistance;\n    phylocanvas.current.pairwiseOps.clusterSamples = props.clusterSamples;\n    console.log(phylocanvas.current);\n    phylocanvas.current.pairwiseOps.clusterDraw = true;\n    phylocanvas.current.draw();\n  }, [props.clusterDistance, props.clusterSamples]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"phylocanvas\",\n    style: {\n      height: height + \"px\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PhylocanvasView, \"clgiy0e2BtJKyaSh+1imx8PCBfM=\");\n\n_c = PhylocanvasView;\nexport default PhylocanvasView;\n\nvar _c;\n\n$RefreshReg$(_c, \"PhylocanvasView\");","map":{"version":3,"sources":["/var/www/pathogen-intelligence.tgen.org/epitools/src/phylocanvas/Phylocanvas.js"],"names":["React","useEffect","useState","useRef","Phylocanvas","utils","scalebar","branchLength","root","pairwiseOps","treeStats","plugin","getPixelRatio","canvas","PhylocanvasView","props","phylocanvas","height","setHeight","typeList","ref","current","clientHeight","handleResize","console","log","window","addEventListener","removeEventListener","createTree","load","tree","includes","type","setTreeType","setNodeSize","nodeSize","setTextSize","textSize","lineWidth","showLabels","labels","alignLabels","align","draw","clusterDistance","clusterSamples","clusterDraw"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\nimport Phylocanvas, { utils } from \"phylocanvas\";\nimport scalebar from \"phylocanvas-plugin-scalebar\";\nimport branchLength from \"phylocanvas-plugin-branch-length\";\nimport root from \"phylocanvas-plugin-root\";\nimport pairwiseOps from \"phylocanvas-plugin-pairwise-ops\";\nimport treeStats from \"phylocanvas-plugin-tree-stats\";\nPhylocanvas.plugin(scalebar)\nPhylocanvas.plugin(branchLength)\nPhylocanvas.plugin(root)\nPhylocanvas.plugin(pairwiseOps)\nPhylocanvas.plugin(treeStats)\n\nconst { getPixelRatio } = utils.canvas;\n\nfunction PhylocanvasView(props) {\n  let phylocanvas = useRef();\n  let [height, setHeight] = useState(100)\n  let typeList = useRef([\"radial\", \"rectangular\", \"circular\", \"diagonal\", \"hierarchical\"]);\n\n  useEffect(() => {\n    setHeight(ref.current.clientHeight)\n    function handleResize() {\n      setHeight(ref.current.clientHeight)\n      console.log(ref.current.clientHeight)\n    }\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, [])\n\n  useEffect(() => {\n    phylocanvas.current = Phylocanvas.createTree(\"phylocanvas\")\n  }, [])\n\n  useEffect(() => {\n    phylocanvas.current.load(props.tree)\n  }, [props.tree])\n\n  useEffect(() => {\n    if (typeList.current.includes(props.type)) {\n      phylocanvas.current.setTreeType(props.type)\n    } else {\n      phylocanvas.current.setTreeType(\"rectangular\")\n    }\n    phylocanvas.current.setNodeSize(props.nodeSize * getPixelRatio(phylocanvas.current.canvas) / 2)\n    phylocanvas.current.setTextSize(props.textSize * getPixelRatio(phylocanvas.current.canvas) / 2)\n    phylocanvas.current.lineWidth = props.lineWidth * getPixelRatio(phylocanvas.current.canvas) / 2\n  }, [props.type])\n\n  useEffect(() => {\n    phylocanvas.current.setNodeSize(props.nodeSize * getPixelRatio(phylocanvas.current.canvas) / 2)\n  }, [props.nodeSize])\n\n  useEffect(() => {\n    phylocanvas.current.setTextSize(props.textSize * getPixelRatio(phylocanvas.current.canvas) / 2)\n  }, [props.textSize])\n\n  useEffect(() => {\n    phylocanvas.current.showLabels = props.labels\n    phylocanvas.current.alignLabels = props.align\n    phylocanvas.current.lineWidth = props.lineWidth * getPixelRatio(phylocanvas.current.canvas) / 2\n    phylocanvas.current.draw()\n  }, [props.labels, props.align, props.lineWidth])\n\n  useEffect(() => {\n    phylocanvas.current.pairwiseOps.clusterDistance = props.clusterDistance\n    phylocanvas.current.pairwiseOps.clusterSamples = props.clusterSamples\n    console.log(phylocanvas.current)\n    phylocanvas.current.pairwiseOps.clusterDraw = true\n    phylocanvas.current.draw()\n  }, [props.clusterDistance, props.clusterSamples])\n\n  return (\n    <div id=\"phylocanvas\" style={{height: height + \"px\"}}></div>\n  )\n}\n\nexport default PhylocanvasView;\n"]},"metadata":{},"sourceType":"module"}