{"ast":null,"code":"import { Tree, utils } from 'phylocanvas';\nconst {\n  getPixelRatio\n} = utils.canvas;\nconst DEFAULTS = {\n  active: true,\n  pairwiseMatrix: {}\n};\n\nfunction buildPairwiseMatrix() {\n  function walkMatrix(start, node, walked, distance) {\n    distance += node.branchLength;\n    distance = parseFloat(distance.toFixed(10));\n    walked.push(node);\n\n    if (node != start && node.children.length == 0) {\n      console.log(start.id, node.id, distance);\n      pairwiseMatrix[leaf].push([node, distance]);\n    }\n\n    for (let child of node.children) {\n      if (!walked.includes(child)) {\n        walkMatrix(start, child, walked, distance);\n      }\n    }\n\n    if (node.parent && !walked.includes(node.parent)) {\n      walkMatrix(start, node.parent, walked, distance);\n    }\n  }\n\n  console.log(this.leaves);\n\n  for (let leaf in this.leaves) {\n    this.pairwiseOps.pairwiseMatrix[leaf] = [];\n    walkMatrix(this.leaves[leaf], this.leaves[leaf], [], 0);\n  }\n}\n\nexport default function plugin(decorate) {\n  decorate(this, 'createTree', (delegate, args) => {\n    const tree = delegate(...args);\n    const [, config = {}] = args;\n    tree.pairwiseOps = Object.assign({}, DEFAULTS, config.pairwiseOps || {});\n    return tree;\n  });\n  decorate(Tree, 'load', function (delegate, args) {\n    delegate.apply(this, args);\n\n    if (this.pairwiseOps.active) {\n      buildPairwiseMatrix.apply(this);\n    }\n  });\n}","map":{"version":3,"sources":["/var/www/epitools/my_modules/phylocanvas-plugin-pairwise-ops/index.js"],"names":["Tree","utils","getPixelRatio","canvas","DEFAULTS","active","pairwiseMatrix","buildPairwiseMatrix","walkMatrix","start","node","walked","distance","branchLength","parseFloat","toFixed","push","children","length","console","log","id","leaf","child","includes","parent","leaves","pairwiseOps","plugin","decorate","delegate","args","tree","config","Object","assign","apply"],"mappings":"AAAA,SAASA,IAAT,EAAeC,KAAf,QAA4B,aAA5B;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAoBD,KAAK,CAACE,MAAhC;AAEA,MAAMC,QAAQ,GAAG;AACfC,EAAAA,MAAM,EAAE,IADO;AAEfC,EAAAA,cAAc,EAAE;AAFD,CAAjB;;AAMA,SAASC,mBAAT,GAA+B;AAG/B,WAASC,UAAT,CAAoBC,KAApB,EAA2BC,IAA3B,EAAiCC,MAAjC,EAAyCC,QAAzC,EAAmD;AACjDA,IAAAA,QAAQ,IAAIF,IAAI,CAACG,YAAjB;AACAD,IAAAA,QAAQ,GAAGE,UAAU,CAACF,QAAQ,CAACG,OAAT,CAAiB,EAAjB,CAAD,CAArB;AACAJ,IAAAA,MAAM,CAACK,IAAP,CAAYN,IAAZ;;AAEA,QAAIA,IAAI,IAAID,KAAR,IAAiBC,IAAI,CAACO,QAAL,CAAcC,MAAd,IAAwB,CAA7C,EAAgD;AAC9CC,MAAAA,OAAO,CAACC,GAAR,CAAYX,KAAK,CAACY,EAAlB,EAAsBX,IAAI,CAACW,EAA3B,EAA+BT,QAA/B;AACAN,MAAAA,cAAc,CAACgB,IAAD,CAAd,CAAqBN,IAArB,CAA0B,CAACN,IAAD,EAAOE,QAAP,CAA1B;AACD;;AAED,SAAK,IAAIW,KAAT,IAAkBb,IAAI,CAACO,QAAvB,EAAiC;AAC/B,UAAI,CAAEN,MAAM,CAACa,QAAP,CAAgBD,KAAhB,CAAN,EAA8B;AAC5Bf,QAAAA,UAAU,CAACC,KAAD,EAAQc,KAAR,EAAeZ,MAAf,EAAuBC,QAAvB,CAAV;AACD;AACF;;AACD,QAAIF,IAAI,CAACe,MAAL,IAAe,CAAEd,MAAM,CAACa,QAAP,CAAgBd,IAAI,CAACe,MAArB,CAArB,EAAmD;AACjDjB,MAAAA,UAAU,CAACC,KAAD,EAAQC,IAAI,CAACe,MAAb,EAAqBd,MAArB,EAA6BC,QAA7B,CAAV;AACD;AACF;;AAICO,EAAAA,OAAO,CAACC,GAAR,CAAY,KAAKM,MAAjB;;AACA,OAAK,IAAIJ,IAAT,IAAiB,KAAKI,MAAtB,EAA8B;AAC5B,SAAKC,WAAL,CAAiBrB,cAAjB,CAAgCgB,IAAhC,IAAwC,EAAxC;AACAd,IAAAA,UAAU,CAAC,KAAKkB,MAAL,CAAYJ,IAAZ,CAAD,EAAoB,KAAKI,MAAL,CAAYJ,IAAZ,CAApB,EAAuC,EAAvC,EAA2C,CAA3C,CAAV;AACD;AACF;;AAED,eAAe,SAASM,MAAT,CAAgBC,QAAhB,EAA0B;AACvCA,EAAAA,QAAQ,CAAC,IAAD,EAAO,YAAP,EAAqB,CAACC,QAAD,EAAWC,IAAX,KAAoB;AAC/C,UAAMC,IAAI,GAAGF,QAAQ,CAAC,GAAGC,IAAJ,CAArB;AACA,UAAM,GAAIE,MAAM,GAAG,EAAb,IAAoBF,IAA1B;AACAC,IAAAA,IAAI,CAACL,WAAL,GAAmBO,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB/B,QAAlB,EAA4B6B,MAAM,CAACN,WAAP,IAAsB,EAAlD,CAAnB;AACA,WAAOK,IAAP;AACD,GALO,CAAR;AAMAH,EAAAA,QAAQ,CAAC7B,IAAD,EAAO,MAAP,EAAe,UAAU8B,QAAV,EAAoBC,IAApB,EAA0B;AAC/CD,IAAAA,QAAQ,CAACM,KAAT,CAAe,IAAf,EAAqBL,IAArB;;AACA,QAAI,KAAKJ,WAAL,CAAiBtB,MAArB,EAA6B;AAC3BE,MAAAA,mBAAmB,CAAC6B,KAApB,CAA0B,IAA1B;AACD;AACF,GALO,CAAR;AAMD","sourcesContent":["import { Tree, utils } from 'phylocanvas';\n\nconst { getPixelRatio } = utils.canvas;\n\nconst DEFAULTS = {\n  active: true,\n  pairwiseMatrix: {},\n};\n\n\nfunction buildPairwiseMatrix() {\n\n\nfunction walkMatrix(start, node, walked, distance) {\n  distance += node.branchLength\n  distance = parseFloat(distance.toFixed(10))\n  walked.push(node)\n\n  if (node != start && node.children.length == 0) {\n    console.log(start.id, node.id, distance)\n    pairwiseMatrix[leaf].push([node, distance])\n  }\n\n  for (let child of node.children) {\n    if (! walked.includes(child)) {\n      walkMatrix(start, child, walked, distance)\n    }\n  }\n  if (node.parent && ! walked.includes(node.parent)) {\n    walkMatrix(start, node.parent, walked, distance)\n  }\n}\n\n\n\n  console.log(this.leaves)\n  for (let leaf in this.leaves) {\n    this.pairwiseOps.pairwiseMatrix[leaf] = []\n    walkMatrix(this.leaves[leaf], this.leaves[leaf], [], 0)\n  }\n}\n\nexport default function plugin(decorate) {\n  decorate(this, 'createTree', (delegate, args) => {\n    const tree = delegate(...args);\n    const [ , config = {} ] = args;\n    tree.pairwiseOps = Object.assign({}, DEFAULTS, config.pairwiseOps || {});\n    return tree;\n  });\n  decorate(Tree, 'load', function (delegate, args) {\n    delegate.apply(this, args);\n    if (this.pairwiseOps.active) {\n      buildPairwiseMatrix.apply(this);\n    }   \n  });\n}\n"]},"metadata":{},"sourceType":"module"}