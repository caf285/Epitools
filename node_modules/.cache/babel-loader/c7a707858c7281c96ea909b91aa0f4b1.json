{"ast":null,"code":"var _jsxFileName = \"/var/www/pathogen-intelligence.tgen.org/epitools/src/phylocanvas/Phylocanvas.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useRef } from \"react\";\nimport Phylocanvas, { utils } from \"phylocanvas\";\nimport scalebar from \"phylocanvas-plugin-scalebar\";\nimport branchLength from \"phylocanvas-plugin-branch-length\";\nimport root from \"phylocanvas-plugin-root\";\nimport pairwiseOps from \"phylocanvas-plugin-pairwise-ops\";\nimport treeStats from \"phylocanvas-plugin-tree-stats\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nPhylocanvas.plugin(scalebar);\nPhylocanvas.plugin(branchLength);\nPhylocanvas.plugin(root);\nPhylocanvas.plugin(pairwiseOps);\nPhylocanvas.plugin(treeStats);\nconst {\n  getPixelRatio\n} = utils.canvas;\n\nfunction PhylocanvasView(props) {\n  _s();\n\n  let phylocanvas = useRef(); // height\n\n  let [height, _setHeight] = useState(100);\n  let minHeight = 100;\n  let heightRef = useRef(height);\n\n  let setHeight = data => {\n    heightRef.current = data;\n\n    _setHeight(data);\n  }; // width\n\n\n  let [width, _setWidth] = useState(100);\n  let minWidth = 100;\n  let widthRef = useRef(width);\n\n  let setWidth = data => {\n    widthRef.current = data;\n\n    _setWidth(data);\n  };\n\n  let typeList = useRef([\"radial\", \"rectangular\", \"circular\", \"diagonal\", \"hierarchical\"]); //TODO: Fix height inheritance problem (relative height to window size without adding to window size for positive feedback loop)\n\n  useEffect(() => {\n    function handleResize() {\n      //setHeight(document.getElementsByClassName(\"Nav-body\")[0].clientHeight)\n      let heightChange = heightRef.current;\n      setHeight(Math.max(Math.max(document.documentElement.clientHeight || 0, window.innerHeight || 0) - document.getElementsByClassName(\"Nav-header\")[0].clientHeight * 2, minHeight));\n      heightChange = heightChange / heightRef.current;\n      let widthChange = widthRef.current;\n      setWidth(Math.max(document.documentElement.clientWidth || minWidth, window.innerWidth || minWidth, minWidth));\n      widthChange = widthChange / widthRef.current;\n      phylocanvas.current.setTreeType(phylocanvas.current.treeType);\n\n      if (phylocanvas.current.treeType == \"circular\") {\n        phylocanvas.current.zoom = phylocanvas.current.zoom / heightChange;\n      }\n\n      if (phylocanvas.current.treeType == \"rectangular\") {\n        phylocanvas.current.zoom = phylocanvas.current.zoom / heightChange;\n        phylocanvas.current.branchScalar = phylocanvas.current.branchScalar * heightChange;\n        phylocanvas.current.branchScalar = phylocanvas.current.branchScalar / widthChange;\n      } // scale horizontally\n      //phylocanvas.current.zoom = phylocanvas.current.zoom / heightChange\n      //phylocanvas.current.branchScalar = phylocanvas.current.branchScalar * heightChange\n      //phylocanvas.current.offsetx = phylocanvas.current.offsetx / heightChange\n      // scale vertically\n      //phylocanvas.current.branchScalar = phylocanvas.current.branchScalar / widthChange\n\n    }\n\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n  useEffect(() => {\n    phylocanvas.current = Phylocanvas.createTree(\"phylocanvas\");\n  }, []);\n  useEffect(() => {\n    phylocanvas.current.load(props.tree);\n  }, [props.tree]);\n  useEffect(() => {\n    if (typeList.current.includes(props.type)) {\n      phylocanvas.current.setTreeType(props.type);\n    } else {\n      phylocanvas.current.setTreeType(\"rectangular\");\n    }\n\n    phylocanvas.current.setNodeSize(props.nodeSize * getPixelRatio(phylocanvas.current.canvas) / 2);\n    phylocanvas.current.setTextSize(props.textSize * getPixelRatio(phylocanvas.current.canvas) / 2);\n    phylocanvas.current.lineWidth = props.lineWidth * getPixelRatio(phylocanvas.current.canvas) / 2;\n  }, [props.type]);\n  useEffect(() => {\n    phylocanvas.current.setNodeSize(props.nodeSize * getPixelRatio(phylocanvas.current.canvas) / 2);\n  }, [props.nodeSize]);\n  useEffect(() => {\n    phylocanvas.current.setTextSize(props.textSize * getPixelRatio(phylocanvas.current.canvas) / 2);\n  }, [props.textSize]);\n  useEffect(() => {\n    phylocanvas.current.showLabels = props.labels;\n    phylocanvas.current.alignLabels = props.align;\n    phylocanvas.current.lineWidth = props.lineWidth * getPixelRatio(phylocanvas.current.canvas) / 2;\n    phylocanvas.current.draw();\n  }, [props.labels, props.align, props.lineWidth]);\n  useEffect(() => {\n    phylocanvas.current.pairwiseOps.clusterDistance = props.clusterDistance;\n    phylocanvas.current.pairwiseOps.clusterSamples = props.clusterSamples;\n    console.log(phylocanvas.current);\n    phylocanvas.current.pairwiseOps.clusterDraw = true;\n    phylocanvas.current.draw();\n  }, [props.clusterDistance, props.clusterSamples]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"phylocanvas\",\n    style: {\n      height: height + \"px\",\n      width: \"100%\",\n      minHeight: minHeight + \"px\",\n      minWidth: minWidth + \"px\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PhylocanvasView, \"MTt0xxfFygvtCCOH+Ixw8F45MoM=\");\n\n_c = PhylocanvasView;\nexport default PhylocanvasView;\n\nvar _c;\n\n$RefreshReg$(_c, \"PhylocanvasView\");","map":{"version":3,"sources":["/var/www/pathogen-intelligence.tgen.org/epitools/src/phylocanvas/Phylocanvas.js"],"names":["React","useEffect","useState","useRef","Phylocanvas","utils","scalebar","branchLength","root","pairwiseOps","treeStats","plugin","getPixelRatio","canvas","PhylocanvasView","props","phylocanvas","height","_setHeight","minHeight","heightRef","setHeight","data","current","width","_setWidth","minWidth","widthRef","setWidth","typeList","handleResize","heightChange","Math","max","document","documentElement","clientHeight","window","innerHeight","getElementsByClassName","widthChange","clientWidth","innerWidth","setTreeType","treeType","zoom","branchScalar","addEventListener","removeEventListener","createTree","load","tree","includes","type","setNodeSize","nodeSize","setTextSize","textSize","lineWidth","showLabels","labels","alignLabels","align","draw","clusterDistance","clusterSamples","console","log","clusterDraw"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\nimport Phylocanvas, { utils } from \"phylocanvas\";\nimport scalebar from \"phylocanvas-plugin-scalebar\";\nimport branchLength from \"phylocanvas-plugin-branch-length\";\nimport root from \"phylocanvas-plugin-root\";\nimport pairwiseOps from \"phylocanvas-plugin-pairwise-ops\";\nimport treeStats from \"phylocanvas-plugin-tree-stats\";\nPhylocanvas.plugin(scalebar)\nPhylocanvas.plugin(branchLength)\nPhylocanvas.plugin(root)\nPhylocanvas.plugin(pairwiseOps)\nPhylocanvas.plugin(treeStats)\n\nconst { getPixelRatio } = utils.canvas;\n\nfunction PhylocanvasView(props) {\n  let phylocanvas = useRef();\n\n  // height\n  let [height, _setHeight] = useState(100)\n  let minHeight = 100\n  let heightRef = useRef(height)\n  let setHeight = data => {\n    heightRef.current = data\n    _setHeight(data)\n  }\n\n  // width\n  let [width, _setWidth] = useState(100)\n  let minWidth = 100\n  let widthRef = useRef(width)\n  let setWidth = data => {\n    widthRef.current = data\n    _setWidth(data)\n  }\n\n  let typeList = useRef([\"radial\", \"rectangular\", \"circular\", \"diagonal\", \"hierarchical\"]);\n\n  //TODO: Fix height inheritance problem (relative height to window size without adding to window size for positive feedback loop)\n\n  useEffect(() => {\n    function handleResize() {\n      //setHeight(document.getElementsByClassName(\"Nav-body\")[0].clientHeight)\n      let heightChange = heightRef.current\n      setHeight(Math.max( Math.max( document.documentElement.clientHeight || 0, window.innerHeight || 0) - document.getElementsByClassName(\"Nav-header\")[0].clientHeight * 2, minHeight ))\n      heightChange = heightChange/heightRef.current\n      let widthChange = widthRef.current\n      setWidth(Math.max( document.documentElement.clientWidth || minWidth, window.innerWidth || minWidth, minWidth))\n      widthChange = widthChange/widthRef.current\n      phylocanvas.current.setTreeType(phylocanvas.current.treeType)\n      if (phylocanvas.current.treeType == \"circular\") {\n        phylocanvas.current.zoom = phylocanvas.current.zoom / heightChange\n      }\n      if (phylocanvas.current.treeType == \"rectangular\") {\n        phylocanvas.current.zoom = phylocanvas.current.zoom / heightChange\n        phylocanvas.current.branchScalar = phylocanvas.current.branchScalar * heightChange\n        phylocanvas.current.branchScalar = phylocanvas.current.branchScalar / widthChange\n      }\n      // scale horizontally\n      //phylocanvas.current.zoom = phylocanvas.current.zoom / heightChange\n      //phylocanvas.current.branchScalar = phylocanvas.current.branchScalar * heightChange\n      //phylocanvas.current.offsetx = phylocanvas.current.offsetx / heightChange\n\n      // scale vertically\n      //phylocanvas.current.branchScalar = phylocanvas.current.branchScalar / widthChange\n    } \n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, [])\n\n  useEffect(() => {\n    phylocanvas.current = Phylocanvas.createTree(\"phylocanvas\")\n  }, [])\n\n  useEffect(() => {\n    phylocanvas.current.load(props.tree)\n  }, [props.tree])\n\n  useEffect(() => {\n    if (typeList.current.includes(props.type)) {\n      phylocanvas.current.setTreeType(props.type)\n    } else {\n      phylocanvas.current.setTreeType(\"rectangular\")\n    }\n    phylocanvas.current.setNodeSize(props.nodeSize * getPixelRatio(phylocanvas.current.canvas) / 2)\n    phylocanvas.current.setTextSize(props.textSize * getPixelRatio(phylocanvas.current.canvas) / 2)\n    phylocanvas.current.lineWidth = props.lineWidth * getPixelRatio(phylocanvas.current.canvas) / 2\n  }, [props.type])\n\n  useEffect(() => {\n    phylocanvas.current.setNodeSize(props.nodeSize * getPixelRatio(phylocanvas.current.canvas) / 2)\n  }, [props.nodeSize])\n\n  useEffect(() => {\n    phylocanvas.current.setTextSize(props.textSize * getPixelRatio(phylocanvas.current.canvas) / 2)\n  }, [props.textSize])\n\n  useEffect(() => {\n    phylocanvas.current.showLabels = props.labels\n    phylocanvas.current.alignLabels = props.align\n    phylocanvas.current.lineWidth = props.lineWidth * getPixelRatio(phylocanvas.current.canvas) / 2\n    phylocanvas.current.draw()\n  }, [props.labels, props.align, props.lineWidth])\n\n  useEffect(() => {\n    phylocanvas.current.pairwiseOps.clusterDistance = props.clusterDistance\n    phylocanvas.current.pairwiseOps.clusterSamples = props.clusterSamples\n    console.log(phylocanvas.current)\n    phylocanvas.current.pairwiseOps.clusterDraw = true\n    phylocanvas.current.draw()\n  }, [props.clusterDistance, props.clusterSamples])\n\n  return (\n    <div id=\"phylocanvas\" style={{height: height + \"px\", width: \"100%\", minHeight: minHeight + \"px\", minWidth: minWidth + \"px\"}}></div>\n  )\n}\n\nexport default PhylocanvasView;\n"]},"metadata":{},"sourceType":"module"}