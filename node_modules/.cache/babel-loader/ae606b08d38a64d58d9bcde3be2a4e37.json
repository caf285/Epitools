{"ast":null,"code":"import { Tree, utils } from 'phylocanvas';\nconst {\n  getPixelRatio\n} = utils.canvas;\nconst DEFAULTS = {\n  active: true\n};\n\nfunction addListeners() {\n  const tree = this;\n  const ctx = this.canvas;\n  const canvas = ctx.canvas;\n  const pixelRatio = getPixelRatio(ctx);\n  const textSize = this.textSize;\n\n  if (this.treeStats.active) {\n    //cleanup old event listeners\n    for (let eventListener of this.eventListeners.mousemove.filter(eventListener => eventListener.listener.name == \"treeStats\")) {\n      this.removeListener('mousemove', eventListener.listener, canvas);\n    }\n\n    console.log(this);\n\n    for (let leaf of this.leaves) {\n      this.addListener('mousemove', treeStats, canvas);\n\n      function treeStats(e) {\n        let path = new Path2D();\n        console.log(leaf.getLabelStartX());\n        let x = (tree.offsetx + leaf.getLabelStartX() * tree.zoom / pixelRatio + leaf.maxx * tree.zoom / pixelRatio) * pixelRatio;\n        let y = (tree.offsety + leaf.maxy * tree.zoom / pixelRatio) * pixelRatio;\n        ctx.save();\n        ctx.font = `${textSize * pixelRatio * 2}px ${this.font}`;\n        let width = ctx.measureText(leaf.label).width * pixelRatio * tree.zoom / tree.zoomFactor;\n        ctx.restore();\n        let height = ctx.measureText(\"M\").width * pixelRatio * tree.zoom / tree.zoomFactor;\n        path.moveTo(x, y);\n        path.lineTo(x + width, y);\n        path.lineTo(x + width, y - height);\n        path.lineTo(x, y - height);\n        path.lineTo(x, y);\n        path.closePath();\n        ctx.stroke(path);\n\n        if (ctx.isPointInPath(path, e.offsetX * pixelRatio, e.offsetY * pixelRatio)) {\n          console.log(leaf.id);\n        }\n      }\n    }\n  }\n}\n\nexport default function plugin(decorate) {\n  decorate(this, 'createTree', (delegate, args) => {\n    const tree = delegate(...args);\n    const [, config = {}] = args;\n    tree.treeStats = Object.assign({}, DEFAULTS, config.treeStats || {});\n    return tree;\n  });\n  decorate(Tree, 'load', function (delegate, args) {\n    delegate.apply(this, args);\n    addListeners.apply(this);\n    let ctx = this.canvas;\n    this.addListener('mousemove', e => {\n      let path = new Path2D();\n      path.moveTo(0, 0);\n      path.lineTo(e.offsetX * getPixelRatio(ctx), e.offsetY * getPixelRatio(ctx));\n      path.closePath();\n      ctx.stroke(path);\n    });\n  });\n}","map":{"version":3,"sources":["/var/www/pathogen-intelligence.tgen.org/epitools/my_modules/phylocanvas-plugin-tree-stats/index.js"],"names":["Tree","utils","getPixelRatio","canvas","DEFAULTS","active","addListeners","tree","ctx","pixelRatio","textSize","treeStats","eventListener","eventListeners","mousemove","filter","listener","name","removeListener","console","log","leaf","leaves","addListener","e","path","Path2D","getLabelStartX","x","offsetx","zoom","maxx","y","offsety","maxy","save","font","width","measureText","label","zoomFactor","restore","height","moveTo","lineTo","closePath","stroke","isPointInPath","offsetX","offsetY","id","plugin","decorate","delegate","args","config","Object","assign","apply"],"mappings":"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","sourcesContent":["import { Tree, utils } from 'phylocanvas';\n\nconst { getPixelRatio } = utils.canvas;\n\nconst DEFAULTS = {\n  active: true,\n};\n\nfunction addListeners() {\n  const tree = this\n  const ctx = this.canvas;\n  const canvas = ctx.canvas;\n  const pixelRatio = getPixelRatio(ctx);\n  const textSize = this.textSize\n  if (this.treeStats.active) {\n      //cleanup old event listeners\n      for (let eventListener of this.eventListeners.mousemove.filter(eventListener => eventListener.listener.name == \"treeStats\")) {\n        this.removeListener('mousemove', eventListener.listener, canvas)\n      }\n      console.log(this)\n      for (let leaf of this.leaves) {\n        this.addListener('mousemove', treeStats, canvas)\n        function treeStats(e) {\n          let path = new Path2D()\n          console.log(leaf.getLabelStartX())\n          let x = (tree.offsetx + leaf.getLabelStartX() * tree.zoom / pixelRatio + leaf.maxx * tree.zoom / pixelRatio) * pixelRatio\n          let y = (tree.offsety + leaf.maxy * tree.zoom / pixelRatio) * pixelRatio\n          ctx.save()\n          ctx.font = `${textSize * pixelRatio * 2}px ${this.font}`;\n          let width = ctx.measureText(leaf.label).width * pixelRatio * tree.zoom / tree.zoomFactor\n          ctx.restore()\n          let height = ctx.measureText(\"M\").width * pixelRatio * tree.zoom / tree.zoomFactor\n          path.moveTo(x, y)\n          path.lineTo(x + width, y)\n          path.lineTo(x + width, y - height)\n          path.lineTo(x, y - height)\n          path.lineTo(x, y)\n          path.closePath()\n          ctx.stroke(path)\n          if (ctx.isPointInPath(path, e.offsetX * pixelRatio, e.offsetY * pixelRatio)) {\n            console.log(leaf.id)\n          }\n        }\n      }\n  }\n}\n\nexport default function plugin(decorate) {\n  decorate(this, 'createTree', (delegate, args) => {\n    const tree = delegate(...args);\n    const [ , config = {} ] = args;\n    tree.treeStats = Object.assign({}, DEFAULTS, config.treeStats || {});\n    return tree;\n  });\n  decorate(Tree, 'load', function (delegate, args) {\n    delegate.apply(this, args);\n    addListeners.apply(this)\n    let ctx = this.canvas\n    this.addListener('mousemove', (e) => {\n      let path = new Path2D()\n      path.moveTo(0, 0)\n      path.lineTo(e.offsetX * getPixelRatio(ctx), e.offsetY * getPixelRatio(ctx))\n      path.closePath()\n      ctx.stroke(path)\n    })\n\n  });\n}\n"]},"metadata":{},"sourceType":"module"}