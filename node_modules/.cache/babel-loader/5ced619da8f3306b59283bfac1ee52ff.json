{"ast":null,"code":"var _jsxFileName = \"/var/www/pathogen-intelligence.tgen.org/epitools/src/phylocanvas/Phylocanvas.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef } from \"react\";\nimport Phylocanvas from \"phylocanvas\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction PhylocanvasView(props) {\n  _s();\n\n  for (let plugin of props.plugins) {\n    Phylocanvas.plugin(plugin);\n  }\n\n  let phylocanvas = useRef();\n  let typeList = useRef([\"radial\", \"rectangular\", \"circular\", \"diagonal\", \"hierarchical\"]);\n  useEffect(() => {\n    phylocanvas.current = Phylocanvas.createTree(\"phylocanvas\");\n    console.log(phylocanvas.current);\n  }, []);\n  useEffect(() => {\n    phylocanvas.current.load(props.tree);\n  }, [props.tree]);\n  useEffect(() => {\n    if (typeList.current.includes(props.type)) {\n      phylocanvas.current.setTreeType(props.type);\n    } else {\n      phylocanvas.current.setTreeType(\"circular\");\n    }\n  }, [props.type]);\n  useEffect(() => {\n    phylocanvas.current.setNodeSize(props.nodeSize);\n  }, [props.nodeSize]);\n  useEffect(() => {\n    phylocanvas.current.setTextSize(props.textSize);\n  }, [props.textSize]);\n  useEffect(() => {\n    phylocanvas.current.showLabels = props.labels;\n    phylocanvas.current.alignLabels = props.align;\n    phylocanvas.current.lineWidth = props.lineWidth;\n    phylocanvas.current.draw();\n  }, [props.labels, props.align, props.lineWidth]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"phylocanvas\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PhylocanvasView, \"cuT12A9mNb4jDu6APuCVcvsbWzo=\");\n\n_c = PhylocanvasView;\nexport default PhylocanvasView;\n\nvar _c;\n\n$RefreshReg$(_c, \"PhylocanvasView\");","map":{"version":3,"sources":["/var/www/pathogen-intelligence.tgen.org/epitools/src/phylocanvas/Phylocanvas.js"],"names":["React","useEffect","useRef","Phylocanvas","PhylocanvasView","props","plugin","plugins","phylocanvas","typeList","current","createTree","console","log","load","tree","includes","type","setTreeType","setNodeSize","nodeSize","setTextSize","textSize","showLabels","labels","alignLabels","align","lineWidth","draw"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,QAAyC,OAAzC;AACA,OAAOC,WAAP,MAAwB,aAAxB;;;AAEA,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAAA;;AAC9B,OAAK,IAAIC,MAAT,IAAmBD,KAAK,CAACE,OAAzB,EAAkC;AAChCJ,IAAAA,WAAW,CAACG,MAAZ,CAAmBA,MAAnB;AACD;;AACD,MAAIE,WAAW,GAAGN,MAAM,EAAxB;AACA,MAAIO,QAAQ,GAAGP,MAAM,CAAC,CAAC,QAAD,EAAW,aAAX,EAA0B,UAA1B,EAAsC,UAAtC,EAAkD,cAAlD,CAAD,CAArB;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,WAAW,CAACE,OAAZ,GAAsBP,WAAW,CAACQ,UAAZ,CAAuB,aAAvB,CAAtB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYL,WAAW,CAACE,OAAxB;AACD,GAHQ,EAGN,EAHM,CAAT;AAKAT,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,WAAW,CAACE,OAAZ,CAAoBI,IAApB,CAAyBT,KAAK,CAACU,IAA/B;AACD,GAFQ,EAEN,CAACV,KAAK,CAACU,IAAP,CAFM,CAAT;AAIAd,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIQ,QAAQ,CAACC,OAAT,CAAiBM,QAAjB,CAA0BX,KAAK,CAACY,IAAhC,CAAJ,EAA2C;AACzCT,MAAAA,WAAW,CAACE,OAAZ,CAAoBQ,WAApB,CAAgCb,KAAK,CAACY,IAAtC;AACD,KAFD,MAEO;AACLT,MAAAA,WAAW,CAACE,OAAZ,CAAoBQ,WAApB,CAAgC,UAAhC;AACD;AACF,GANQ,EAMN,CAACb,KAAK,CAACY,IAAP,CANM,CAAT;AAQAhB,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,WAAW,CAACE,OAAZ,CAAoBS,WAApB,CAAgCd,KAAK,CAACe,QAAtC;AACD,GAFQ,EAEN,CAACf,KAAK,CAACe,QAAP,CAFM,CAAT;AAIAnB,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,WAAW,CAACE,OAAZ,CAAoBW,WAApB,CAAgChB,KAAK,CAACiB,QAAtC;AACD,GAFQ,EAEN,CAACjB,KAAK,CAACiB,QAAP,CAFM,CAAT;AAIArB,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,WAAW,CAACE,OAAZ,CAAoBa,UAApB,GAAiClB,KAAK,CAACmB,MAAvC;AACAhB,IAAAA,WAAW,CAACE,OAAZ,CAAoBe,WAApB,GAAkCpB,KAAK,CAACqB,KAAxC;AACAlB,IAAAA,WAAW,CAACE,OAAZ,CAAoBiB,SAApB,GAAgCtB,KAAK,CAACsB,SAAtC;AACAnB,IAAAA,WAAW,CAACE,OAAZ,CAAoBkB,IAApB;AACD,GALQ,EAKN,CAACvB,KAAK,CAACmB,MAAP,EAAenB,KAAK,CAACqB,KAArB,EAA4BrB,KAAK,CAACsB,SAAlC,CALM,CAAT;AAOA,sBACE;AAAK,IAAA,EAAE,EAAC;AAAR;AAAA;AAAA;AAAA;AAAA,UADF;AAGD;;GA1CQvB,e;;KAAAA,e;AA4CT,eAAeA,eAAf","sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport Phylocanvas from \"phylocanvas\";\n\nfunction PhylocanvasView(props) {\n  for (let plugin of props.plugins) {\n    Phylocanvas.plugin(plugin)\n  }\n  let phylocanvas = useRef();\n  let typeList = useRef([\"radial\", \"rectangular\", \"circular\", \"diagonal\", \"hierarchical\"])\n\n  useEffect(() => {\n    phylocanvas.current = Phylocanvas.createTree(\"phylocanvas\")\n    console.log(phylocanvas.current)\n  }, [])\n\n  useEffect(() => {\n    phylocanvas.current.load(props.tree)\n  }, [props.tree])\n\n  useEffect(() => {\n    if (typeList.current.includes(props.type)) {\n      phylocanvas.current.setTreeType(props.type)\n    } else {\n      phylocanvas.current.setTreeType(\"circular\")\n    }\n  }, [props.type])\n\n  useEffect(() => {\n    phylocanvas.current.setNodeSize(props.nodeSize)\n  }, [props.nodeSize])\n\n  useEffect(() => {\n    phylocanvas.current.setTextSize(props.textSize)\n  }, [props.textSize])\n\n  useEffect(() => {\n    phylocanvas.current.showLabels = props.labels\n    phylocanvas.current.alignLabels = props.align\n    phylocanvas.current.lineWidth = props.lineWidth\n    phylocanvas.current.draw()\n  }, [props.labels, props.align, props.lineWidth])\n\n  return (\n    <div id=\"phylocanvas\"></div>\n  )\n}\n\nexport default PhylocanvasView;\n"]},"metadata":{},"sourceType":"module"}