{"ast":null,"code":"import { Tree, utils } from 'phylocanvas';\nconst {\n  getPixelRatio\n} = utils.canvas;\nconst DEFAULTS = {\n  active: true\n};\n\nfunction drawRoot() {\n  const cxt = this.canvas;\n  const pixelRatio = getPixelRatio(cxt);\n  cxt.save();\n  cxt.strokeStyle = this.branchColour;\n  cxt.lineWidth = this.lineWidth;\n  let x = (this.offsetx + this.root.centerx * this.zoom / pixelRatio) * pixelRatio;\n  let y = (this.offsety + this.root.centery * this.zoom / pixelRatio) * pixelRatio;\n  cxt.beginPath();\n  cxt.moveTo(x, y);\n\n  if (this.treeType == \"rectangular\" || this.treeType == \"diagonal\") {\n    cxt.lineTo(x - 50, y);\n  } else if (this.treeType == \"hierarchical\") {\n    cxt.lineTo(x, y - 50);\n  }\n\n  cxt.stroke();\n  cxt.closePath();\n  cxt.restore();\n}\n\nexport default function plugin(decorate) {\n  decorate(this, 'createTree', (delegate, args) => {\n    const tree = delegate(...args);\n    const [, config = {}] = args;\n    tree.rootLine = Object.assign({}, DEFAULTS, config.rootLine || {});\n    return tree;\n  });\n  decorate(Tree, 'draw', function (delegate, args) {\n    delegate.apply(this, args);\n\n    if (this.rootLine.active) {\n      drawRoot.apply(this);\n    }\n  });\n}","map":{"version":3,"sources":["/var/www/pathogen-intelligence.tgen.org/epitools/my_modules/phylocanvas-plugin-root/index.js"],"names":["Tree","utils","getPixelRatio","canvas","DEFAULTS","active","drawRoot","cxt","pixelRatio","save","strokeStyle","branchColour","lineWidth","x","offsetx","root","centerx","zoom","y","offsety","centery","beginPath","moveTo","treeType","lineTo","stroke","closePath","restore","plugin","decorate","delegate","args","tree","config","rootLine","Object","assign","apply"],"mappings":"AAAA,SAASA,IAAT,EAAeC,KAAf,QAA4B,aAA5B;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAoBD,KAAK,CAACE,MAAhC;AAEA,MAAMC,QAAQ,GAAG;AACfC,EAAAA,MAAM,EAAE;AADO,CAAjB;;AAIA,SAASC,QAAT,GAAoB;AAElB,QAAMC,GAAG,GAAG,KAAKJ,MAAjB;AACA,QAAMK,UAAU,GAAGN,aAAa,CAACK,GAAD,CAAhC;AAEAA,EAAAA,GAAG,CAACE,IAAJ;AAEAF,EAAAA,GAAG,CAACG,WAAJ,GAAkB,KAAKC,YAAvB;AACAJ,EAAAA,GAAG,CAACK,SAAJ,GAAgB,KAAKA,SAArB;AAEA,MAAIC,CAAC,GAAG,CAAC,KAAKC,OAAL,GAAe,KAAKC,IAAL,CAAUC,OAAV,GAAoB,KAAKC,IAAzB,GAAgCT,UAAhD,IAA8DA,UAAtE;AACA,MAAIU,CAAC,GAAG,CAAC,KAAKC,OAAL,GAAe,KAAKJ,IAAL,CAAUK,OAAV,GAAoB,KAAKH,IAAzB,GAAgCT,UAAhD,IAA8DA,UAAtE;AAEAD,EAAAA,GAAG,CAACc,SAAJ;AACAd,EAAAA,GAAG,CAACe,MAAJ,CAAWT,CAAX,EAAcK,CAAd;;AACA,MAAI,KAAKK,QAAL,IAAiB,aAAjB,IAAkC,KAAKA,QAAL,IAAiB,UAAvD,EAAmE;AACjEhB,IAAAA,GAAG,CAACiB,MAAJ,CAAWX,CAAC,GAAC,EAAb,EAAiBK,CAAjB;AACD,GAFD,MAEO,IAAI,KAAKK,QAAL,IAAiB,cAArB,EAAqC;AAC1ChB,IAAAA,GAAG,CAACiB,MAAJ,CAAWX,CAAX,EAAcK,CAAC,GAAC,EAAhB;AACD;;AACDX,EAAAA,GAAG,CAACkB,MAAJ;AACAlB,EAAAA,GAAG,CAACmB,SAAJ;AAEAnB,EAAAA,GAAG,CAACoB,OAAJ;AACD;;AAED,eAAe,SAASC,MAAT,CAAgBC,QAAhB,EAA0B;AACvCA,EAAAA,QAAQ,CAAC,IAAD,EAAO,YAAP,EAAqB,CAACC,QAAD,EAAWC,IAAX,KAAoB;AAC/C,UAAMC,IAAI,GAAGF,QAAQ,CAAC,GAAGC,IAAJ,CAArB;AACA,UAAM,GAAIE,MAAM,GAAG,EAAb,IAAoBF,IAA1B;AACAC,IAAAA,IAAI,CAACE,QAAL,GAAgBC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBhC,QAAlB,EAA4B6B,MAAM,CAACC,QAAP,IAAmB,EAA/C,CAAhB;AACA,WAAOF,IAAP;AACD,GALO,CAAR;AAMAH,EAAAA,QAAQ,CAAC7B,IAAD,EAAO,MAAP,EAAe,UAAU8B,QAAV,EAAoBC,IAApB,EAA0B;AAC/CD,IAAAA,QAAQ,CAACO,KAAT,CAAe,IAAf,EAAqBN,IAArB;;AACA,QAAI,KAAKG,QAAL,CAAc7B,MAAlB,EAA0B;AACxBC,MAAAA,QAAQ,CAAC+B,KAAT,CAAe,IAAf;AACD;AACF,GALO,CAAR;AAMD","sourcesContent":["import { Tree, utils } from 'phylocanvas';\n\nconst { getPixelRatio } = utils.canvas;\n\nconst DEFAULTS = {\n  active: true,\n};\n\nfunction drawRoot() {\n\n  const cxt = this.canvas;\n  const pixelRatio = getPixelRatio(cxt);\n\n  cxt.save();\n\n  cxt.strokeStyle = this.branchColour;\n  cxt.lineWidth = this.lineWidth;\n\n  let x = (this.offsetx + this.root.centerx * this.zoom / pixelRatio) * pixelRatio\n  let y = (this.offsety + this.root.centery * this.zoom / pixelRatio) * pixelRatio\n\n  cxt.beginPath();\n  cxt.moveTo(x, y);\n  if (this.treeType == \"rectangular\" || this.treeType == \"diagonal\") {\n    cxt.lineTo(x-50, y);\n  } else if (this.treeType == \"hierarchical\") {\n    cxt.lineTo(x, y-50);\n  }\n  cxt.stroke();\n  cxt.closePath();\n\n  cxt.restore();\n}\n\nexport default function plugin(decorate) {\n  decorate(this, 'createTree', (delegate, args) => {\n    const tree = delegate(...args);\n    const [ , config = {} ] = args;\n    tree.rootLine = Object.assign({}, DEFAULTS, config.rootLine || {});\n    return tree;\n  });\n  decorate(Tree, 'draw', function (delegate, args) {\n    delegate.apply(this, args);\n    if (this.rootLine.active) {\n      drawRoot.apply(this);\n    }\n  });\n}\n"]},"metadata":{},"sourceType":"module"}