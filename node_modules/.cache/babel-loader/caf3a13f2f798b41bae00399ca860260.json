{"ast":null,"code":"import { Tree, utils } from 'phylocanvas';\nconst {\n  getPixelRatio\n} = utils.canvas;\nconst DEFAULTS = {\n  active: true\n};\n\nfunction addListeners() {\n  const tree = this;\n  const ctx = this.canvas;\n  const canvas = ctx.canvas;\n  const pixelRatio = getPixelRatio(ctx);\n  const textSize = this.textSize;\n\n  if (this.treeStats.active) {\n    //cleanup old event listeners\n    for (let eventListener of this.eventListeners.mousemove.filter(eventListener => eventListener.listener.name == \"treeStats\")) {\n      this.removeListener('mousemove', eventListener.listener, canvas);\n    }\n\n    console.log(this);\n\n    for (let leaf of this.leaves) {\n      this.addListener('mousemove', treeStats, canvas);\n\n      function treeStats(e) {\n        let path = new Path2D();\n        ctx.save();\n        ctx.font = `${tree.textSize * pixelRatio}px ${tree.font}`;\n        let width = ctx.measureText(leaf.label).width * pixelRatio * tree.zoom / tree.zoomFactor;\n        let height = ctx.measureText(\"M\").width * pixelRatio * tree.zoom / tree.zoomFactor / 2;\n        let centerX = (tree.offsetx + (leaf.minx + leaf.maxx) * tree.zoom / pixelRatio / 2) * pixelRatio;\n        let centerY = (tree.offsety + (leaf.miny + leaf.maxy) * tree.zoom / pixelRatio / 2) * pixelRatio; //let startX = centerX + (-20 * Math.cos(leaf.angle))\n\n        let startX = centerX - tree.baseNodeSize * tree.zoom * Math.cos(leaf.angle);\n        let startY = centerY - tree.baseNodeSize * tree.zoom * Math.sin(leaf.angle);\n        let endX = centerX + (-tree.baseNodeSize * tree.zoom + leaf.getLabelStartX() * tree.zoom + width) * Math.cos(leaf.angle);\n        let endY = centerY + (-tree.baseNodeSize * tree.zoom + leaf.getLabelStartX() * tree.zoom + width) * Math.sin(leaf.angle);\n        ctx.fillStyle = \"rgb(0, 0, 255)\";\n        ctx.strokeStyle = \"rgb(0, 0, 255)\";\n        ctx.lineWidth = height * 2;\n        ctx.beginPath();\n        ctx.moveTo(centerX, centerY);\n        ctx.lineTo(endX, endY);\n        ctx.stroke();\n        ctx.restore();\n        let x = (tree.offsetx - tree.baseNodeSize * tree.zoom + leaf.getLabelStartX() * tree.zoom / pixelRatio + leaf.maxx * tree.zoom / pixelRatio) * pixelRatio;\n        let y = (tree.offsety + (leaf.maxy + leaf.miny) / 2 * tree.zoom / pixelRatio) * pixelRatio;\n        ctx.save();\n        ctx.font = `${tree.textSize * pixelRatio}px ${tree.font}`;\n        width = ctx.measureText(leaf.label).width * pixelRatio * tree.zoom / tree.zoomFactor;\n        height = ctx.measureText(\"M\").width * pixelRatio * tree.zoom / tree.zoomFactor / 2;\n        ctx.restore();\n        path.moveTo(x, y + height);\n        path.lineTo(x + width, y + height);\n        path.lineTo(x + width, y - height);\n        path.lineTo(x, y - height);\n        path.lineTo(x, y + height);\n        path.closePath();\n        ctx.stroke(path);\n\n        if (ctx.isPointInPath(path, e.offsetX * pixelRatio, e.offsetY * pixelRatio)) {\n          leaf.highlighted = true;\n          ctx.save();\n          ctx.fillStyle = \"rgb(255, 255, 255)\";\n          x = e.offsetX * pixelRatio;\n          y = e.offsetY * pixelRatio;\n          ctx.clearRect(x + 20, y + 10, 200, 100);\n          ctx.fillRect(x + 20, y + 10, 200, 100);\n          ctx.restore();\n          console.log(leaf);\n        } else {\n          leaf.highlighted = false;\n        }\n      }\n    }\n  }\n}\n\nexport default function plugin(decorate) {\n  decorate(this, 'createTree', (delegate, args) => {\n    const tree = delegate(...args);\n    const [, config = {}] = args;\n    tree.treeStats = Object.assign({}, DEFAULTS, config.treeStats || {});\n    return tree;\n  });\n  decorate(Tree, 'load', function (delegate, args) {\n    delegate.apply(this, args);\n    addListeners.apply(this);\n    let ctx = this.canvas;\n    this.addListener('mousemove', e => {\n      let path = new Path2D();\n      path.moveTo(0, 0);\n      path.lineTo(e.offsetX * getPixelRatio(ctx), e.offsetY * getPixelRatio(ctx));\n      path.closePath();\n      ctx.stroke(path);\n    });\n  });\n}","map":{"version":3,"sources":["/var/www/pathogen-intelligence.tgen.org/epitools/my_modules/phylocanvas-plugin-tree-stats/index.js"],"names":["Tree","utils","getPixelRatio","canvas","DEFAULTS","active","addListeners","tree","ctx","pixelRatio","textSize","treeStats","eventListener","eventListeners","mousemove","filter","listener","name","removeListener","console","log","leaf","leaves","addListener","e","path","Path2D","save","font","width","measureText","label","zoom","zoomFactor","height","centerX","offsetx","minx","maxx","centerY","offsety","miny","maxy","startX","baseNodeSize","Math","cos","angle","startY","sin","endX","getLabelStartX","endY","fillStyle","strokeStyle","lineWidth","beginPath","moveTo","lineTo","stroke","restore","x","y","closePath","isPointInPath","offsetX","offsetY","highlighted","clearRect","fillRect","plugin","decorate","delegate","args","config","Object","assign","apply"],"mappings":"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","sourcesContent":["import { Tree, utils } from 'phylocanvas';\n\nconst { getPixelRatio } = utils.canvas;\n\nconst DEFAULTS = {\n  active: true,\n};\n\nfunction addListeners() {\n  const tree = this\n  const ctx = this.canvas;\n  const canvas = ctx.canvas;\n  const pixelRatio = getPixelRatio(ctx);\n  const textSize = this.textSize\n  if (this.treeStats.active) {\n      //cleanup old event listeners\n      for (let eventListener of this.eventListeners.mousemove.filter(eventListener => eventListener.listener.name == \"treeStats\")) {\n        this.removeListener('mousemove', eventListener.listener, canvas)\n      }\n      console.log(this)\n      for (let leaf of this.leaves) {\n        this.addListener('mousemove', treeStats, canvas)\n        function treeStats(e) {\n          let path = new Path2D()\n\n          ctx.save()\n          ctx.font = `${tree.textSize * pixelRatio}px ${tree.font}`;\n          let width = ctx.measureText(leaf.label).width * pixelRatio * tree.zoom / tree.zoomFactor\n          let height = ctx.measureText(\"M\").width * pixelRatio * tree.zoom / tree.zoomFactor / 2\n\n\n          let centerX = (tree.offsetx + (leaf.minx + leaf.maxx) * tree.zoom / pixelRatio / 2) * pixelRatio\n          let centerY = (tree.offsety + (leaf.miny + leaf.maxy) * tree.zoom / pixelRatio / 2) * pixelRatio\n          //let startX = centerX + (-20 * Math.cos(leaf.angle))\n          let startX = centerX - (tree.baseNodeSize * tree.zoom * Math.cos(leaf.angle))\n          let startY = centerY - (tree.baseNodeSize * tree.zoom * Math.sin(leaf.angle))\n          let endX = centerX + ((-tree.baseNodeSize * tree.zoom + leaf.getLabelStartX() * tree.zoom + width) * Math.cos(leaf.angle))\n          let endY = centerY + ((-tree.baseNodeSize * tree.zoom + leaf.getLabelStartX() * tree.zoom + width) * Math.sin(leaf.angle))\n\n\n          ctx.fillStyle = \"rgb(0, 0, 255)\"\n          ctx.strokeStyle = \"rgb(0, 0, 255)\"\n          ctx.lineWidth = height * 2\n          ctx.beginPath()\n          ctx.moveTo(centerX, centerY)\n          ctx.lineTo(endX, endY)\n          ctx.stroke()\n          ctx.restore()\n\n          let x = (tree.offsetx - tree.baseNodeSize * tree.zoom + leaf.getLabelStartX() * tree.zoom / pixelRatio + leaf.maxx * tree.zoom / pixelRatio) * pixelRatio\n          let y = (tree.offsety + (leaf.maxy + leaf.miny) / 2 * tree.zoom / pixelRatio) * pixelRatio\n          ctx.save()\n          ctx.font = `${tree.textSize * pixelRatio}px ${tree.font}`;\n          width = ctx.measureText(leaf.label).width * pixelRatio * tree.zoom / tree.zoomFactor\n          height = ctx.measureText(\"M\").width * pixelRatio * tree.zoom / tree.zoomFactor / 2\n          ctx.restore()\n          path.moveTo(x, y + height)\n          path.lineTo(x + width, y + height)\n          path.lineTo(x + width, y - height)\n          path.lineTo(x, y - height)\n          path.lineTo(x, y + height)\n          path.closePath()\n          ctx.stroke(path)\n          if (ctx.isPointInPath(path, e.offsetX * pixelRatio, e.offsetY * pixelRatio)) {\n            leaf.highlighted = true\n            ctx.save()\n            ctx.fillStyle = \"rgb(255, 255, 255)\"\n            x = e.offsetX * pixelRatio\n            y = e.offsetY * pixelRatio\n            ctx.clearRect(x + 20, y + 10, 200, 100)\n            ctx.fillRect(x + 20, y + 10, 200, 100)\n            ctx.restore()\n            console.log(leaf)\n          } else {\n            leaf.highlighted = false\n          }\n        }\n      }\n  }\n}\n\nexport default function plugin(decorate) {\n  decorate(this, 'createTree', (delegate, args) => {\n    const tree = delegate(...args);\n    const [ , config = {} ] = args;\n    tree.treeStats = Object.assign({}, DEFAULTS, config.treeStats || {});\n    return tree;\n  });\n  decorate(Tree, 'load', function (delegate, args) {\n    delegate.apply(this, args);\n    addListeners.apply(this)\n    let ctx = this.canvas\n    this.addListener('mousemove', (e) => {\n      let path = new Path2D()\n      path.moveTo(0, 0)\n      path.lineTo(e.offsetX * getPixelRatio(ctx), e.offsetY * getPixelRatio(ctx))\n      path.closePath()\n      ctx.stroke(path)\n    })\n\n  });\n}\n"]},"metadata":{},"sourceType":"module"}