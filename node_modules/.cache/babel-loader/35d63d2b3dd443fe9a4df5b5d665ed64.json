{"ast":null,"code":"import { Tree, utils } from 'phylocanvas';\nconst {\n  getPixelRatio\n} = utils.canvas;\nconst DEFAULTS = {\n  active: true,\n  width: 100,\n  height: 20,\n  fillStyle: 'black',\n  strokeStyle: 'black',\n  lineWidth: 1,\n  fontFamily: 'Sans-serif',\n  fontSize: 16,\n  textBaseline: 'bottom',\n  textAlign: 'center',\n  digits: 2,\n  position: {\n    bottom: 10,\n    left: 10\n  }\n};\nconst INVALID_HORIZONTAL_POSITION = 'Invalid horizontal position specified' + 'Supported values are `left`, `centre`, or `right`';\nconst INVALID_VERTICAL_POSITION = 'Invalid vertical position specified' + 'Supported values are `top`, `middle`, or `bottom`';\nconst LOG10 = Math.log(10);\n\nfunction drawScalebar() {\n  for (branch in this.branches) {\n    console.log(branch);\n  }\n\n  const {\n    scalebar,\n    zoom,\n    branchScalar\n  } = this;\n  const {\n    position\n  } = scalebar;\n  const cxt = this.canvas;\n  const canvas = cxt.canvas;\n  const pixelRatio = getPixelRatio(cxt);\n  const width = pixelRatio * scalebar.width;\n  const height = pixelRatio * scalebar.height;\n  const lineWidth = pixelRatio * scalebar.lineWidth;\n  const fontSize = pixelRatio * scalebar.fontSize;\n  cxt.save();\n  let x = 0;\n\n  if (typeof position.left !== 'undefined') {\n    x = scalebar.lineWidth + position.left;\n  } else if (typeof position.centre !== 'undefined') {\n    x = canvas.width / 2 - width / 2 + position.centre;\n  } else if (typeof position.right !== 'undefined') {\n    x = canvas.width - width - scalebar.lineWidth - position.right;\n  } else {\n    this.loadError(INVALID_HORIZONTAL_POSITION);\n  }\n\n  let y = 0;\n\n  if (typeof position.top !== 'undefined') {\n    y = position.top;\n  } else if (typeof position.middle !== 'undefined') {\n    y = canvas.height / 2 - height + position.middle;\n  } else if (typeof position.bottom !== 'undefined') {\n    y = canvas.height - height - position.bottom;\n  } else {\n    this.loadError(INVALID_VERTICAL_POSITION);\n  }\n\n  cxt.clearRect(x, y, width, height);\n  cxt.font = `${fontSize}px ${scalebar.fontFamily}`;\n  cxt.fillStyle = scalebar.fillStyle;\n  cxt.strokeStyle = scalebar.strokeStyle;\n  cxt.lineWidth = lineWidth;\n  cxt.textBaseline = scalebar.textBaseline;\n  cxt.textAlign = scalebar.textAlign;\n  cxt.beginPath();\n  cxt.moveTo(x, y);\n  cxt.lineTo(x + width, y);\n  cxt.stroke();\n  cxt.moveTo(x, y);\n  cxt.lineTo(x, y + height);\n  cxt.stroke();\n  cxt.moveTo(x + width, y);\n  cxt.lineTo(x + width, y + height);\n  cxt.stroke();\n  cxt.closePath();\n  const scale = width / branchScalar / zoom;\n  const minDigitis = parseInt(Math.abs(Math.log(scale) / LOG10), 10);\n  const label = scale.toFixed(minDigitis + scalebar.digits);\n  cxt.fillText(label, x + width / 2, y + height);\n  cxt.restore();\n}\n\nexport default function plugin(decorate) {\n  decorate(this, 'createTree', (delegate, args) => {\n    const tree = delegate(...args);\n    const [, config = {}] = args;\n    tree.scalebar = Object.assign({}, DEFAULTS, config.scalebar || {});\n    return tree;\n  });\n  decorate(Tree, 'draw', function (delegate, args) {\n    delegate.apply(this, args);\n\n    if (this.scalebar.active) {\n      drawScalebar.apply(this);\n    }\n  });\n}","map":{"version":3,"sources":["/var/www/epitools/my_modules/phylocanvas-plugin-branch-length/index.js"],"names":["Tree","utils","getPixelRatio","canvas","DEFAULTS","active","width","height","fillStyle","strokeStyle","lineWidth","fontFamily","fontSize","textBaseline","textAlign","digits","position","bottom","left","INVALID_HORIZONTAL_POSITION","INVALID_VERTICAL_POSITION","LOG10","Math","log","drawScalebar","branch","branches","console","scalebar","zoom","branchScalar","cxt","pixelRatio","save","x","centre","right","loadError","y","top","middle","clearRect","font","beginPath","moveTo","lineTo","stroke","closePath","scale","minDigitis","parseInt","abs","label","toFixed","fillText","restore","plugin","decorate","delegate","args","tree","config","Object","assign","apply"],"mappings":"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","sourcesContent":["import { Tree, utils } from 'phylocanvas';\n\nconst { getPixelRatio } = utils.canvas;\n\nconst DEFAULTS = {\n  active: true,\n  width: 100,\n  height: 20,\n  fillStyle: 'black',\n  strokeStyle: 'black',\n  lineWidth: 1,\n  fontFamily: 'Sans-serif',\n  fontSize: 16,\n  textBaseline: 'bottom',\n  textAlign: 'center',\n  digits: 2,\n  position: {\n    bottom: 10,\n    left: 10,\n  },\n};\n\nconst INVALID_HORIZONTAL_POSITION = 'Invalid horizontal position specified' +\n  'Supported values are `left`, `centre`, or `right`';\nconst INVALID_VERTICAL_POSITION = 'Invalid vertical position specified' +\n  'Supported values are `top`, `middle`, or `bottom`';\n\nconst LOG10 = Math.log(10);\n\nfunction drawScalebar() {\n\n  for (branch in this.branches) {\n    console.log(branch)\n  }\n\n  const { scalebar, zoom, branchScalar } = this;\n  const { position } = scalebar;\n  const cxt = this.canvas;\n  const canvas = cxt.canvas;\n  const pixelRatio = getPixelRatio(cxt);\n  const width = pixelRatio * scalebar.width;\n  const height = pixelRatio * scalebar.height;\n  const lineWidth = pixelRatio * scalebar.lineWidth;\n  const fontSize = pixelRatio * scalebar.fontSize;\n\n  cxt.save();\n\n  let x = 0;\n  if (typeof position.left !== 'undefined') {\n    x = scalebar.lineWidth + position.left;\n  } else if (typeof position.centre !== 'undefined') {\n    x = (canvas.width / 2) - (width / 2) + position.centre;\n  } else if (typeof position.right !== 'undefined') {\n    x = canvas.width - width - scalebar.lineWidth - position.right;\n  } else {\n    this.loadError(INVALID_HORIZONTAL_POSITION);\n  }\n  let y = 0;\n  if (typeof position.top !== 'undefined') {\n    y = position.top;\n  } else if (typeof position.middle !== 'undefined') {\n    y = (canvas.height / 2) - height + position.middle;\n  } else if (typeof position.bottom !== 'undefined') {\n    y = canvas.height - height - position.bottom;\n  } else {\n    this.loadError(INVALID_VERTICAL_POSITION);\n  }\n  cxt.clearRect(x, y, width, height);\n\n  cxt.font = `${fontSize}px ${scalebar.fontFamily}`;\n  cxt.fillStyle = scalebar.fillStyle;\n  cxt.strokeStyle = scalebar.strokeStyle;\n  cxt.lineWidth = lineWidth;\n  cxt.textBaseline = scalebar.textBaseline;\n  cxt.textAlign = scalebar.textAlign;\n\n  cxt.beginPath();\n  cxt.moveTo(x, y);\n  cxt.lineTo(x + width, y);\n  cxt.stroke();\n  cxt.moveTo(x, y);\n  cxt.lineTo(x, y + height);\n  cxt.stroke();\n  cxt.moveTo(x + width, y);\n  cxt.lineTo(x + width, y + height);\n  cxt.stroke();\n  cxt.closePath();\n\n  const scale = width / branchScalar / zoom;\n  const minDigitis = parseInt(Math.abs(Math.log(scale) / LOG10), 10);\n  const label = scale.toFixed(minDigitis + scalebar.digits);\n  cxt.fillText(label, x + width / 2, y + height);\n\n  cxt.restore();\n}\n\nexport default function plugin(decorate) {\n  decorate(this, 'createTree', (delegate, args) => {\n    const tree = delegate(...args);\n    const [ , config = {} ] = args;\n    tree.scalebar = Object.assign({}, DEFAULTS, config.scalebar || {});\n    return tree;\n  });\n  decorate(Tree, 'draw', function (delegate, args) {\n    delegate.apply(this, args);\n    if (this.scalebar.active) {\n      drawScalebar.apply(this);\n    }\n  });\n}\n"]},"metadata":{},"sourceType":"module"}