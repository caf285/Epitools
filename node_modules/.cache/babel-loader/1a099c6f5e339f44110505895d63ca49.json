{"ast":null,"code":"import _slicedToArray from \"/var/www/pathogen-intelligence.tgen.org/epitools/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"/var/www/pathogen-intelligence.tgen.org/epitools/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _createForOfIteratorHelper from \"/var/www/pathogen-intelligence.tgen.org/epitools/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport { Tree, utils } from 'phylocanvas';\nvar getPixelRatio = utils.canvas.getPixelRatio;\nvar DEFAULTS = {\n  active: true,\n  debug: false,\n  margin: 20,\n  fontFamily: \"Sans-serif\",\n  fontSize: 30,\n  textBaseLine: \"top\",\n  textAlign: \"left\"\n};\n\nfunction addListeners() {\n  var _this = this;\n\n  var tree = this;\n  var ctx = this.canvas;\n  var canvas = ctx.canvas;\n  var pixelRatio = getPixelRatio(ctx);\n  var treeStats = this.treeStats,\n      textSize = this.textSize;\n\n  if (this.treeStats.active) {\n    //cleanup old event listeners\n    var _iterator = _createForOfIteratorHelper(this.eventListeners.mousemove.filter(function (eventListener) {\n      return eventListener.listener.name == \"treeStatsListener\";\n    })),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var eventListener = _step.value;\n        this.removeListener('mousemove', eventListener.listener, canvas);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    console.log(this);\n\n    var _iterator2 = _createForOfIteratorHelper(this.leaves),\n        _step2;\n\n    try {\n      var _loop = function _loop() {\n        var leaf = _step2.value;\n\n        _this.addListener('mousemove', treeStatsListener, canvas);\n\n        function treeStatsListener(e) {\n          var path = new Path2D();\n          ctx.save();\n          ctx.font = \"\".concat(tree.textSize * 4, \"px \").concat(tree.font);\n          var lineLength = ctx.measureText(leaf.label).width * tree.zoom / tree.zoomFactor;\n          var lineWidth = ctx.measureText(\"M\").width * tree.zoom / tree.zoomFactor; // get X and Y values\n\n          var centerX = (tree.offsetx + (leaf.minx + leaf.maxx) * tree.zoom / pixelRatio / 2) * pixelRatio;\n          var centerY = (tree.offsety + (leaf.miny + leaf.maxy) * tree.zoom / pixelRatio / 2) * pixelRatio;\n          var startX = centerX - tree.baseNodeSize * tree.zoom * Math.cos(leaf.angle);\n          var startY = centerY - tree.baseNodeSize * tree.zoom * Math.sin(leaf.angle);\n          var endX = centerX + (-tree.baseNodeSize * tree.zoom + leaf.getLabelStartX() * tree.zoom + lineLength) * Math.cos(leaf.angle);\n          var endY = centerY + (-tree.baseNodeSize * tree.zoom + leaf.getLabelStartX() * tree.zoom + lineLength) * Math.sin(leaf.angle); // stroke line for mouseover detection\n\n          if (tree.treeStats.debug) {\n            ctx.strokeStyle = \"rgba(0, 0, 255, 1)\";\n          } else {\n            ctx.strokeStyle = \"rgba(0, 0, 255, 0)\";\n          }\n\n          ctx.lineWidth = lineWidth;\n          path.moveTo(centerX, centerY);\n          path.lineTo(endX, endY);\n          path.closePath();\n          ctx.stroke(path); // draw treeStats window\n\n          if (ctx.isPointInStroke(path, e.offsetX * pixelRatio, e.offsetY * pixelRatio)) {\n            leaf.highlighted = true;\n            var x = e.offsetX * pixelRatio;\n            var y = e.offsetY * pixelRatio;\n            ctx.save();\n            ctx.font = \"\".concat(treeStats.fontSize * pixelRatio / 2, \"px \").concat(treeStats.fontFamily);\n            ctx.textBaseline = treeStats.textBaseLine;\n            ctx.textAlign = treeStats.textAlign;\n            var boxWidth = ctx.measureText(leaf.id).width + treeStats.margin * 2;\n            var boxHeight = ctx.measureText(\"W\").width + treeStats.margin * 2; // TODO: for loop for writing multiple lines and getting the proper box size\n            // fill box\n\n            ctx.fillStyle = \"rgba(240, 240, 240, 0.9)\";\n            ctx.fillRect(x, y, boxWidth, boxHeight); // fill text\n\n            ctx.fillStyle = \"rgb(0, 0, 0)\";\n            ctx.fillText(leaf.id, x + treeStats.margin, y + treeStats.margin);\n            ctx.restore();\n          } else {\n            leaf.highlighted = false;\n          }\n\n          ctx.restore();\n        }\n      };\n\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        _loop();\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  }\n}\n\nexport default function plugin(decorate) {\n  decorate(this, 'createTree', function (delegate, args) {\n    var tree = delegate.apply(void 0, _toConsumableArray(args));\n\n    var _args = _slicedToArray(args, 2),\n        _args$ = _args[1],\n        config = _args$ === void 0 ? {} : _args$;\n\n    tree.treeStats = Object.assign({}, DEFAULTS, config.treeStats || {});\n    return tree;\n  });\n  decorate(Tree, 'load', function (delegate, args) {\n    var _this2 = this;\n\n    delegate.apply(this, args);\n    addListeners.apply(this);\n    var ctx = this.canvas;\n    this.addListener('mousemove', function (e) {\n      if (_this2.treeStats.debug) {\n        var path = new Path2D();\n        path.moveTo(0, 0);\n        path.lineTo(e.offsetX * getPixelRatio(ctx), e.offsetY * getPixelRatio(ctx));\n        path.closePath();\n        ctx.stroke(path);\n      }\n    });\n  });\n}","map":{"version":3,"sources":["/var/www/pathogen-intelligence.tgen.org/epitools/my_modules/phylocanvas-plugin-tree-stats/index.js"],"names":["Tree","utils","getPixelRatio","canvas","DEFAULTS","active","debug","margin","fontFamily","fontSize","textBaseLine","textAlign","addListeners","tree","ctx","pixelRatio","treeStats","textSize","eventListeners","mousemove","filter","eventListener","listener","name","removeListener","console","log","leaves","leaf","addListener","treeStatsListener","e","path","Path2D","save","font","lineLength","measureText","label","width","zoom","zoomFactor","lineWidth","centerX","offsetx","minx","maxx","centerY","offsety","miny","maxy","startX","baseNodeSize","Math","cos","angle","startY","sin","endX","getLabelStartX","endY","strokeStyle","moveTo","lineTo","closePath","stroke","isPointInStroke","offsetX","offsetY","highlighted","x","y","textBaseline","boxWidth","id","boxHeight","fillStyle","fillRect","fillText","restore","plugin","decorate","delegate","args","config","Object","assign","apply"],"mappings":"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","sourcesContent":["import { Tree, utils } from 'phylocanvas';\n\nconst { getPixelRatio } = utils.canvas;\n\nconst DEFAULTS = {\n  active: true,\n  debug: false,\n  margin: 20,\n  fontFamily: \"Sans-serif\",\n  fontSize: 30,\n  textBaseLine: \"top\",\n  textAlign: \"left\",\n};\n\nfunction addListeners() {\n  const tree = this\n  const ctx = this.canvas;\n  const canvas = ctx.canvas;\n  const pixelRatio = getPixelRatio(ctx);\n  const { treeStats, textSize } = this\n  if (this.treeStats.active) {\n      //cleanup old event listeners\n      for (let eventListener of this.eventListeners.mousemove.filter(eventListener => eventListener.listener.name == \"treeStatsListener\")) {\n        this.removeListener('mousemove', eventListener.listener, canvas)\n      }\n      console.log(this)\n      for (let leaf of this.leaves) {\n        this.addListener('mousemove', treeStatsListener, canvas)\n        function treeStatsListener(e) {\n          let path = new Path2D()\n          ctx.save()\n          ctx.font = `${tree.textSize * 4}px ${tree.font}`;\n          let lineLength = ctx.measureText(leaf.label).width * tree.zoom / tree.zoomFactor\n          let lineWidth = ctx.measureText(\"M\").width * tree.zoom / tree.zoomFactor\n\n          // get X and Y values\n          let centerX = (tree.offsetx + (leaf.minx + leaf.maxx) * tree.zoom / pixelRatio / 2) * pixelRatio\n          let centerY = (tree.offsety + (leaf.miny + leaf.maxy) * tree.zoom / pixelRatio / 2) * pixelRatio\n          let startX = centerX - (tree.baseNodeSize * tree.zoom * Math.cos(leaf.angle))\n          let startY = centerY - (tree.baseNodeSize * tree.zoom * Math.sin(leaf.angle))\n          let endX = centerX + ((-tree.baseNodeSize * tree.zoom + leaf.getLabelStartX() * tree.zoom + lineLength) * Math.cos(leaf.angle))\n          let endY = centerY + ((-tree.baseNodeSize * tree.zoom + leaf.getLabelStartX() * tree.zoom + lineLength) * Math.sin(leaf.angle))\n\n          // stroke line for mouseover detection\n          if (tree.treeStats.debug) {\n            ctx.strokeStyle = \"rgba(0, 0, 255, 1)\"\n          } else {\n            ctx.strokeStyle = \"rgba(0, 0, 255, 0)\"\n          }\n          ctx.lineWidth = lineWidth\n          path.moveTo(centerX, centerY)\n          path.lineTo(endX, endY)\n          path.closePath()\n          ctx.stroke(path)\n\n          // draw treeStats window\n          if (ctx.isPointInStroke(path, e.offsetX * pixelRatio, e.offsetY * pixelRatio)) {\n            leaf.highlighted = true\n            let x = e.offsetX * pixelRatio\n            let y = e.offsetY * pixelRatio\n            ctx.save()\n            ctx.font = `${treeStats.fontSize * pixelRatio / 2}px ${treeStats.fontFamily}`;\n            ctx.textBaseline = treeStats.textBaseLine\n            ctx.textAlign = treeStats.textAlign\n            let boxWidth = ctx.measureText(leaf.id).width + treeStats.margin * 2\n            let boxHeight = ctx.measureText(\"W\").width + treeStats.margin * 2\n            // TODO: for loop for writing multiple lines and getting the proper box size\n            // fill box\n            ctx.fillStyle = \"rgba(240, 240, 240, 0.9)\"\n            ctx.fillRect(x, y, boxWidth, boxHeight)\n\n            // fill text\n            ctx.fillStyle = \"rgb(0, 0, 0)\"\n            ctx.fillText(leaf.id, x + treeStats.margin, y + treeStats.margin)\n            ctx.restore()\n          } else {\n            leaf.highlighted = false\n          }\n          ctx.restore()\n        }\n      }\n  }\n}\n\nexport default function plugin(decorate) {\n  decorate(this, 'createTree', (delegate, args) => {\n    const tree = delegate(...args);\n    const [ , config = {} ] = args;\n    tree.treeStats = Object.assign({}, DEFAULTS, config.treeStats || {});\n    return tree;\n  });\n  decorate(Tree, 'load', function (delegate, args) {\n    delegate.apply(this, args);\n    addListeners.apply(this)\n    let ctx = this.canvas\n    this.addListener('mousemove', (e) => {\n      if (this.treeStats.debug) {\n      let path = new Path2D()\n      path.moveTo(0, 0)\n      path.lineTo(e.offsetX * getPixelRatio(ctx), e.offsetY * getPixelRatio(ctx))\n      path.closePath()\n      ctx.stroke(path)\n      }\n    })\n\n  });\n}\n"]},"metadata":{},"sourceType":"module"}