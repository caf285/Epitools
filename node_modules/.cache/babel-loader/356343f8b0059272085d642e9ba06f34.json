{"ast":null,"code":"import { Tree, utils } from 'phylocanvas';\nconst {\n  getPixelRatio\n} = utils.canvas;\nconst DEFAULTS = {\n  active: true,\n  width: 100,\n  height: 20,\n  fillStyle: 'black',\n  strokeStyle: 'black',\n  lineWidth: 1,\n  fontFamily: 'Sans-serif',\n  fontSize: 16,\n  textBaseline: 'bottom',\n  textAlign: 'center',\n  digits: 2,\n  position: {\n    bottom: 10,\n    left: 10\n  }\n};\nconst INVALID_HORIZONTAL_POSITION = 'Invalid horizontal position specified' + 'Supported values are `left`, `centre`, or `right`';\nconst INVALID_VERTICAL_POSITION = 'Invalid vertical position specified' + 'Supported values are `top`, `middle`, or `bottom`';\nconst LOG10 = Math.log(10);\n\nfunction drawRoot() {\n  const cxt = this.canvas;\n  const pixelRatio = getPixelRatio(cxt);\n  cxt.save();\n  cxt.strokeStyle = this.branchColour;\n  cxt.lineWidth = this.lineWidth;\n  console.log(this.root);\n  let x = (this.offsetx + this.root.centerx * this.zoom / 2) * pixelRatio;\n  let y = (this.offsety + this.root.centery * this.zoom / 2) * pixelRatio;\n\n  if (this.treeType == \"rectangular\" || this.treeType == \"diagonal\") {\n    cxt.beginPath();\n    cxt.moveTo(x, y);\n    cxt.lineTo(x - 50, y);\n    cxt.stroke();\n    cxt.closePath();\n  } else if (this.treeType == \"hierarchical\") {\n    cxt.beginPath();\n    cxt.moveTo(x, y);\n    cxt.lineTo(x, y - 50);\n    cxt.stroke();\n    cxt.closePath();\n  }\n\n  cxt.restore();\n}\n\nexport default function plugin(decorate) {\n  decorate(this, 'createTree', (delegate, args) => {\n    const tree = delegate(...args);\n    const [, config = {}] = args;\n    tree.rootLine = Object.assign({}, DEFAULTS, config.rootLine || {});\n    return tree;\n  });\n  decorate(Tree, 'draw', function (delegate, args) {\n    delegate.apply(this, args);\n\n    if (this.rootLine.active) {\n      drawRoot.apply(this);\n    }\n  });\n}","map":{"version":3,"sources":["/var/www/epitools/my_modules/phylocanvas-plugin-root/index.js"],"names":["Tree","utils","getPixelRatio","canvas","DEFAULTS","active","width","height","fillStyle","strokeStyle","lineWidth","fontFamily","fontSize","textBaseline","textAlign","digits","position","bottom","left","INVALID_HORIZONTAL_POSITION","INVALID_VERTICAL_POSITION","LOG10","Math","log","drawRoot","cxt","pixelRatio","save","branchColour","console","root","x","offsetx","centerx","zoom","y","offsety","centery","treeType","beginPath","moveTo","lineTo","stroke","closePath","restore","plugin","decorate","delegate","args","tree","config","rootLine","Object","assign","apply"],"mappings":"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","sourcesContent":["import { Tree, utils } from 'phylocanvas';\n\nconst { getPixelRatio } = utils.canvas;\n\nconst DEFAULTS = {\n  active: true,\n  width: 100,\n  height: 20,\n  fillStyle: 'black',\n  strokeStyle: 'black',\n  lineWidth: 1,\n  fontFamily: 'Sans-serif',\n  fontSize: 16,\n  textBaseline: 'bottom',\n  textAlign: 'center',\n  digits: 2,\n  position: {\n    bottom: 10,\n    left: 10,\n  },\n};\n\nconst INVALID_HORIZONTAL_POSITION = 'Invalid horizontal position specified' +\n  'Supported values are `left`, `centre`, or `right`';\nconst INVALID_VERTICAL_POSITION = 'Invalid vertical position specified' +\n  'Supported values are `top`, `middle`, or `bottom`';\n\nconst LOG10 = Math.log(10);\n\nfunction drawRoot() {\n\n  const cxt = this.canvas;\n  const pixelRatio = getPixelRatio(cxt);\n\n  cxt.save();\n\n  cxt.strokeStyle = this.branchColour;\n  cxt.lineWidth = this.lineWidth;\n  console.log(this.root)\n\n  let x = (this.offsetx + (this.root.centerx) * this.zoom / 2) * pixelRatio\n  let y = (this.offsety + (this.root.centery) * this.zoom / 2) * pixelRatio\n\n  if (this.treeType == \"rectangular\" || this.treeType == \"diagonal\") {\n    cxt.beginPath();\n    cxt.moveTo(x, y);\n    cxt.lineTo(x-50, y);\n    cxt.stroke();\n    cxt.closePath();\n  } else if (this.treeType == \"hierarchical\") {\n    cxt.beginPath();\n    cxt.moveTo(x, y);\n    cxt.lineTo(x, y-50);\n    cxt.stroke();\n    cxt.closePath();\n  }\n\n\n\n  cxt.restore();\n}\n\nexport default function plugin(decorate) {\n  decorate(this, 'createTree', (delegate, args) => {\n    const tree = delegate(...args);\n    const [ , config = {} ] = args;\n    tree.rootLine = Object.assign({}, DEFAULTS, config.rootLine || {});\n    return tree;\n  });\n  decorate(Tree, 'draw', function (delegate, args) {\n    delegate.apply(this, args);\n    if (this.rootLine.active) {\n      drawRoot.apply(this);\n    }\n  });\n}\n"]},"metadata":{},"sourceType":"module"}