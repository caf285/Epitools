{"ast":null,"code":"import _slicedToArray from \"/var/www/epitools/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"/var/www/epitools/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _createForOfIteratorHelper from \"/var/www/epitools/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport { Tree, utils } from 'phylocanvas';\nvar getPixelRatio = utils.canvas.getPixelRatio;\nvar DEFAULTS = {\n  active: true,\n  pairwiseMatrix: {},\n  clusterActive: true,\n  clusterDraw: true,\n  clusterMatrix: [],\n  clusterMaxDistance: 20,\n  clusterDistance: 3,\n  clusterSamples: 3\n};\n\nfunction walkMatrix(tree, start, node, walked, distance, max) {\n  walked.push(node);\n\n  if (distance >= max) {\n    return;\n  }\n\n  if (node !== start && node.leaf === true) {\n    tree.pairwiseOps.pairwiseMatrix[start.id].push([node.id, distance]);\n  }\n\n  var _iterator = _createForOfIteratorHelper(node.children),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var child = _step.value;\n\n      if (!walked.includes(child)) {\n        var _newDistance = distance + child.branchLength;\n\n        _newDistance = parseFloat(_newDistance.toFixed(10));\n        walkMatrix(tree, start, child, walked, _newDistance, max);\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  if (node.parent && !walked.includes(node.parent)) {\n    var newDistance = distance + node.branchLength;\n    newDistance = parseFloat(newDistance.toFixed(10));\n    walkMatrix(tree, start, node.parent, walked, newDistance, max);\n  }\n}\n\nfunction buildPairwiseMatrix() {\n  var _iterator2 = _createForOfIteratorHelper(this.leaves),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var leaf = _step2.value;\n      this.pairwiseOps.pairwiseMatrix[leaf.id] = [];\n      walkMatrix(this, leaf, leaf, [], 0, this.pairwiseOps.clusterMaxDistance);\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n}\n\nfunction buildClusterMatrix() {\n  console.log(this.pairwiseOps.pairwiseMatrix);\n\n  for (var leaf in this.pairwiseOps.pairwiseMatrix) {\n    var cluster = [leaf];\n\n    var _iterator3 = _createForOfIteratorHelper(this.pairwiseOps.pairwiseMatrix[leaf]),\n        _step3;\n\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var node = _step3.value;\n\n        if (node[1] <= this.pairwiseOps.clusterDistance) {\n          cluster.push(node[0]);\n        }\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n\n    if (cluster.length >= this.pairwiseOps.clusterSamples) {\n      this.pairwiseOps.clusterMatrix.push(cluster);\n    }\n  }\n}\n\nfunction colorNode() {\n  var _this = this;\n\n  var _iterator4 = _createForOfIteratorHelper(this.pairwiseOps.clusterMatrix),\n      _step4;\n\n  try {\n    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n      var cluster = _step4.value;\n\n      var _iterator5 = _createForOfIteratorHelper(cluster),\n          _step5;\n\n      try {\n        var _loop = function _loop() {\n          var leaf = _step5.value;\n\n          _this.leaves.filter(function (x) {\n            return x.id === leaf;\n          })[0].setDisplay({\n            colour: 'red'\n          });\n        };\n\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          _loop();\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n    }\n  } catch (err) {\n    _iterator4.e(err);\n  } finally {\n    _iterator4.f();\n  }\n}\n\nexport default function plugin(decorate) {\n  decorate(this, 'createTree', function (delegate, args) {\n    var tree = delegate.apply(void 0, _toConsumableArray(args));\n\n    var _args = _slicedToArray(args, 2),\n        _args$ = _args[1],\n        config = _args$ === void 0 ? {} : _args$;\n\n    tree.pairwiseOps = Object.assign({}, DEFAULTS, config.pairwiseOps || {});\n    return tree;\n  });\n  decorate(Tree, 'load', function (delegate, args) {\n    delegate.apply(this, args);\n\n    if (this.pairwiseOps.active) {\n      buildPairwiseMatrix.apply(this);\n\n      if (this.pairwiseOps.clusterActive) {\n        this.pairwiseOps.clusterDraw = true;\n      }\n    }\n  });\n  decorate(Tree, 'draw', function (delegate, args) {\n    delegate.apply(this, args);\n\n    if (this.pairwiseOps.clusterActive) {\n      if (this.pairwiseOps.clusterDraw) {\n        this.pairwiseOps.clusterDraw = false;\n        buildClusterMatrix.apply(this);\n        colorNode.apply(this);\n      }\n    }\n  });\n}","map":{"version":3,"sources":["/var/www/epitools/my_modules/phylocanvas-plugin-pairwise-ops/index.js"],"names":["Tree","utils","getPixelRatio","canvas","DEFAULTS","active","pairwiseMatrix","clusterActive","clusterDraw","clusterMatrix","clusterMaxDistance","clusterDistance","clusterSamples","walkMatrix","tree","start","node","walked","distance","max","push","leaf","pairwiseOps","id","children","child","includes","newDistance","branchLength","parseFloat","toFixed","parent","buildPairwiseMatrix","leaves","buildClusterMatrix","console","log","cluster","length","colorNode","filter","x","setDisplay","colour","plugin","decorate","delegate","args","config","Object","assign","apply"],"mappings":"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","sourcesContent":["import { Tree, utils } from 'phylocanvas';\n\nconst { getPixelRatio } = utils.canvas;\n\nconst DEFAULTS = {\n  active: true,\n  pairwiseMatrix: {},\n  clusterActive: true,\n  clusterDraw: true,\n  clusterMatrix: [],\n  clusterMaxDistance: 20,\n  clusterDistance: 3,\n  clusterSamples: 3,\n};\n\nfunction walkMatrix(tree, start, node, walked, distance, max) {\n  walked.push(node)\n\n  if (distance >= max) {\n    return\n  }\n  if (node !== start && node.leaf === true) {\n    tree.pairwiseOps.pairwiseMatrix[start.id].push([node.id, distance])\n  }\n  for (let child of node.children) {\n    if (! walked.includes(child)) {\n      let newDistance = distance + child.branchLength\n      newDistance = parseFloat(newDistance.toFixed(10))\n      walkMatrix(tree, start, child, walked, newDistance, max)\n    }\n  }\n  if (node.parent && ! walked.includes(node.parent)) {\n    let newDistance = distance + node.branchLength\n    newDistance = parseFloat(newDistance.toFixed(10))\n    walkMatrix(tree, start, node.parent, walked, newDistance, max)\n  }\n}\n\nfunction buildPairwiseMatrix() {\n  for (let leaf of this.leaves) {\n    this.pairwiseOps.pairwiseMatrix[leaf.id] = []\n    walkMatrix(this, leaf, leaf, [], 0, this.pairwiseOps.clusterMaxDistance)\n  }\n}\n\nfunction buildClusterMatrix() {\n  console.log(this.pairwiseOps.pairwiseMatrix)\n  for (let leaf in this.pairwiseOps.pairwiseMatrix) {\n    let cluster = [leaf]\n    for (let node of this.pairwiseOps.pairwiseMatrix[leaf]) {\n      if (node[1] <= this.pairwiseOps.clusterDistance) {\n        cluster.push(node[0])\n      }\n    }\n    if (cluster.length >= this.pairwiseOps.clusterSamples) {\n      this.pairwiseOps.clusterMatrix.push(cluster)\n    }\n  }\n}\n\nfunction colorNode() {\n  for (let cluster of this.pairwiseOps.clusterMatrix) {\n    for (let leaf of cluster) {\n      this.leaves.filter(x => x.id === leaf)[0].setDisplay({\n        colour: 'red',\n\n      })\n    }\n  }\n}\n\nexport default function plugin(decorate) {\n  decorate(this, 'createTree', (delegate, args) => {\n    const tree = delegate(...args);\n    const [ , config = {} ] = args;\n    tree.pairwiseOps = Object.assign({}, DEFAULTS, config.pairwiseOps || {});\n    return tree;\n  });\n  decorate(Tree, 'load', function (delegate, args) {\n    delegate.apply(this, args);\n    if (this.pairwiseOps.active) {\n      buildPairwiseMatrix.apply(this);\n      if (this.pairwiseOps.clusterActive) {\n        this.pairwiseOps.clusterDraw = true;\n      }\n    }   \n  });\n  decorate(Tree, 'draw', function (delegate, args) {\n    delegate.apply(this, args);\n    if (this.pairwiseOps.clusterActive) {\n      if (this.pairwiseOps.clusterDraw) {\n        this.pairwiseOps.clusterDraw = false;\n        buildClusterMatrix.apply(this);\n        colorNode.apply(this)\n      }\n    }   \n  });\n}\n"]},"metadata":{},"sourceType":"module"}