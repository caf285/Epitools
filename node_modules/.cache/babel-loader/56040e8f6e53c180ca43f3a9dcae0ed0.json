{"ast":null,"code":"import { Tree, utils } from 'phylocanvas';\nconst {\n  getPixelRatio\n} = utils.canvas;\nconst DEFAULTS = {\n  active: true\n};\n\nfunction addListeners() {\n  const cxt = this.canvas;\n  const canvas = cxt.canvas;\n  const pixelRatio = getPixelRatio(cxt);\n  const textSize = this.textSize * this.zoom / 2;\n\n  if (this.treeStats.active) {\n    // cleanup old events\n    this.eventListeners.mousemove = this.eventListeners.mousemove.filter(eventListener => eventListener.listener.name !== 'respond');\n\n    for (let leaf of this.leaves) {\n      this.addListener('mousemove', respond, canvas);\n      let thing = this;\n\n      function respond(e) {\n        let path = new Path2D();\n        let x = (thing.offsetx + leaf.maxx * thing.zoom / 2) * pixelRatio;\n        let y = (thing.offsety + leaf.maxy * thing.zoom / 2) * pixelRatio;\n        path.moveTo(x, y);\n        path.lineTo(x + 600, y);\n        path.lineTo(x + 600, y + 30);\n        path.lineTo(x, y + 30);\n        path.lineTo(x, y);\n        path.closePath();\n        cxt.stroke(path);\n\n        if (cxt.isPointInPath(path, e.offsetX, e.offsetY)) {}\n      }\n    }\n  }\n}\n\nexport default function plugin(decorate) {\n  decorate(this, 'createTree', (delegate, args) => {\n    const tree = delegate(...args);\n    const [, config = {}] = args;\n    tree.treeStats = Object.assign({}, DEFAULTS, config.treeStats || {});\n    return tree;\n  });\n  decorate(Tree, 'load', function (delegate, args) {\n    delegate.apply(this, args);\n    addListeners.apply(this);\n  });\n}","map":{"version":3,"sources":["/var/www/pathogen-intelligence.tgen.org/epitools/my_modules/phylocanvas-plugin-tree-stats/index.js"],"names":["Tree","utils","getPixelRatio","canvas","DEFAULTS","active","addListeners","cxt","pixelRatio","textSize","zoom","treeStats","eventListeners","mousemove","filter","eventListener","listener","name","leaf","leaves","addListener","respond","thing","e","path","Path2D","x","offsetx","maxx","y","offsety","maxy","moveTo","lineTo","closePath","stroke","isPointInPath","offsetX","offsetY","plugin","decorate","delegate","args","tree","config","Object","assign","apply"],"mappings":"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","sourcesContent":["import { Tree, utils } from 'phylocanvas';\n\nconst { getPixelRatio } = utils.canvas;\n\nconst DEFAULTS = {\n  active: true,\n};\n\nfunction addListeners() {\n  const cxt = this.canvas;\n  const canvas = cxt.canvas;\n  const pixelRatio = getPixelRatio(cxt);\n  const textSize = this.textSize * this.zoom / 2 \n  if (this.treeStats.active) {\n      // cleanup old events\n      this.eventListeners.mousemove = this.eventListeners.mousemove.filter(eventListener => eventListener.listener.name !== 'respond')\n      for (let leaf of this.leaves) {\n        this.addListener('mousemove', respond, canvas)\n        let thing = this\n        function respond(e) {\n          let path = new Path2D()\n          let x = (thing.offsetx + leaf.maxx * thing.zoom / 2) * pixelRatio\n          let y = (thing.offsety + leaf.maxy * thing.zoom / 2) * pixelRatio\n          path.moveTo(x, y)\n          path.lineTo(x + 600, y)\n          path.lineTo(x + 600, y + 30)\n          path.lineTo(x, y + 30)\n          path.lineTo(x, y)\n          path.closePath()\n          cxt.stroke(path)\n          if (cxt.isPointInPath(path, e.offsetX, e.offsetY)) {\n          }\n        }\n      }\n  }\n}\n\nexport default function plugin(decorate) {\n  decorate(this, 'createTree', (delegate, args) => {\n    const tree = delegate(...args);\n    const [ , config = {} ] = args;\n    tree.treeStats = Object.assign({}, DEFAULTS, config.treeStats || {});\n    return tree;\n  });\n  decorate(Tree, 'load', function (delegate, args) {\n    delegate.apply(this, args);\n    addListeners.apply(this)\n  });\n}\n"]},"metadata":{},"sourceType":"module"}