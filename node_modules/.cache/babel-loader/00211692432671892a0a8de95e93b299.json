{"ast":null,"code":"var _jsxFileName = \"/var/www/pathogen-intelligence.tgen.org/epitools/src/phylocanvas/Phylocanvas.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useRef } from \"react\";\nimport Phylocanvas, { utils } from \"phylocanvas\";\nimport scalebar from \"phylocanvas-plugin-scalebar\";\nimport branchLength from \"phylocanvas-plugin-branch-length\";\nimport root from \"phylocanvas-plugin-root\";\nimport pairwiseOps from \"phylocanvas-plugin-pairwise-ops\";\nimport treeStats from \"phylocanvas-plugin-tree-stats\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nPhylocanvas.plugin(scalebar);\nPhylocanvas.plugin(branchLength);\nPhylocanvas.plugin(root);\nPhylocanvas.plugin(pairwiseOps);\nPhylocanvas.plugin(treeStats);\nconst {\n  getPixelRatio\n} = utils.canvas;\n\nfunction PhylocanvasView(props) {\n  _s();\n\n  let phylocanvas = useRef();\n  let minHeight = 100;\n  let minWidth = 100; // [height, width]\n\n  let [hw, _setHW] = useState([minHeight, minWidth]);\n  let heightRef = useRef(hw[0]);\n  let widthRef = useRef(hw[1]);\n\n  let setHW = data => {\n    heightRef.current = data[0];\n    widthRef.current = data[1];\n\n    _setHW(data);\n  }; // [nodeSize, textSize, lineWidth]\n\n\n  let typeList = useRef([\"radial\", \"rectangular\", \"circular\", \"diagonal\", \"hierarchical\"]); //TODO: Fix height inheritance problem (relative height to window size without adding to window size for positive feedback loop)\n\n  useEffect(() => {\n    function handleResize() {\n      //setHeight(document.getElementsByClassName(\"Nav-body\")[0].clientHeight)\n      let newHeight = Math.max(Math.max(document.documentElement.clientHeight || 0, window.innerHeight || 0) - document.getElementsByClassName(\"Nav-header\")[0].clientHeight * 2, minHeight);\n      let newWidth = Math.max(document.documentElement.clientWidth || minWidth, window.innerWidth || minWidth, minWidth);\n      let heightDelta = heightRef.current / newHeight;\n      let widthDelta = widthRef.current / newWidth;\n      setHW([newHeight, newWidth]);\n      let textSize = phylocanvas.current.textSize;\n      let nodeSize = phylocanvas.current.baseNodeSize;\n      phylocanvas.current.setTreeType(phylocanvas.current.treeType);\n      phylocanvas.current.setTextSize(textSize / heightDelta);\n      phylocanvas.current.setNodeSize(nodeSize / heightDelta);\n\n      if (phylocanvas.current.treeType == \"circular\") {}\n\n      if (phylocanvas.current.treeType == \"rectangular\") {}\n    }\n\n    function initialSize() {\n      window.dispatchEvent(new Event('resize'));\n      phylocanvas.current.setTreeType(phylocanvas.current.treeType);\n    }\n\n    window.addEventListener(\"resize\", handleResize);\n    window.addEventListener(\"load\", initialSize);\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n      window.removeEventListener(\"load\", initialSize);\n    };\n  }, []);\n  useEffect(() => {\n    phylocanvas.current = Phylocanvas.createTree(\"phylocanvas\");\n  }, []);\n  useEffect(() => {\n    phylocanvas.current.load(props.tree);\n  }, [props.tree]);\n  useEffect(() => {\n    if (typeList.current.includes(props.type)) {\n      phylocanvas.current.setTreeType(props.type);\n    } else {\n      phylocanvas.current.setTreeType(\"rectangular\");\n    }\n\n    phylocanvas.current.setNodeSize(props.nodeSize * getPixelRatio(phylocanvas.current.canvas) / 2);\n    phylocanvas.current.setTextSize(props.textSize * getPixelRatio(phylocanvas.current.canvas) / 2);\n    phylocanvas.current.lineWidth = props.lineWidth * getPixelRatio(phylocanvas.current.canvas) / 2;\n  }, [props.type]);\n  useEffect(() => {\n    phylocanvas.current.setNodeSize(props.nodeSize * getPixelRatio(phylocanvas.current.canvas) / 2);\n  }, [props.nodeSize]);\n  useEffect(() => {\n    phylocanvas.current.setTextSize(props.textSize * getPixelRatio(phylocanvas.current.canvas) / 2);\n  }, [props.textSize]);\n  useEffect(() => {\n    phylocanvas.current.showLabels = props.labels;\n    phylocanvas.current.alignLabels = props.align;\n    phylocanvas.current.lineWidth = props.lineWidth * getPixelRatio(phylocanvas.current.canvas) / 2;\n    phylocanvas.current.draw();\n  }, [props.labels, props.align, props.lineWidth]);\n  useEffect(() => {\n    phylocanvas.current.pairwiseOps.clusterDistance = props.clusterDistance;\n    phylocanvas.current.pairwiseOps.clusterSamples = props.clusterSamples;\n    console.log(phylocanvas.current);\n    phylocanvas.current.pairwiseOps.clusterDraw = true;\n    phylocanvas.current.draw();\n  }, [props.clusterDistance, props.clusterSamples]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"phylocanvas\",\n    style: {\n      height: heightRef.current + \"px\",\n      width: \"100%\",\n      minHeight: minHeight + \"px\",\n      minWidth: minWidth + \"px\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PhylocanvasView, \"9ogNFwCn8nJMMamT+BPgbM3fhDE=\");\n\n_c = PhylocanvasView;\nexport default PhylocanvasView;\n\nvar _c;\n\n$RefreshReg$(_c, \"PhylocanvasView\");","map":{"version":3,"sources":["/var/www/pathogen-intelligence.tgen.org/epitools/src/phylocanvas/Phylocanvas.js"],"names":["React","useEffect","useState","useRef","Phylocanvas","utils","scalebar","branchLength","root","pairwiseOps","treeStats","plugin","getPixelRatio","canvas","PhylocanvasView","props","phylocanvas","minHeight","minWidth","hw","_setHW","heightRef","widthRef","setHW","data","current","typeList","handleResize","newHeight","Math","max","document","documentElement","clientHeight","window","innerHeight","getElementsByClassName","newWidth","clientWidth","innerWidth","heightDelta","widthDelta","textSize","nodeSize","baseNodeSize","setTreeType","treeType","setTextSize","setNodeSize","initialSize","dispatchEvent","Event","addEventListener","removeEventListener","createTree","load","tree","includes","type","lineWidth","showLabels","labels","alignLabels","align","draw","clusterDistance","clusterSamples","console","log","clusterDraw","height","width"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\nimport Phylocanvas, { utils } from \"phylocanvas\";\nimport scalebar from \"phylocanvas-plugin-scalebar\";\nimport branchLength from \"phylocanvas-plugin-branch-length\";\nimport root from \"phylocanvas-plugin-root\";\nimport pairwiseOps from \"phylocanvas-plugin-pairwise-ops\";\nimport treeStats from \"phylocanvas-plugin-tree-stats\";\nPhylocanvas.plugin(scalebar)\nPhylocanvas.plugin(branchLength)\nPhylocanvas.plugin(root)\nPhylocanvas.plugin(pairwiseOps)\nPhylocanvas.plugin(treeStats)\n\nconst { getPixelRatio } = utils.canvas;\n\nfunction PhylocanvasView(props) {\n  let phylocanvas = useRef();\n  let minHeight = 100\n  let minWidth = 100\n\n  // [height, width]\n  let [hw, _setHW] = useState([minHeight, minWidth])\n  let heightRef = useRef(hw[0])\n  let widthRef = useRef(hw[1])\n  let setHW = data => {\n    heightRef.current = data[0]\n    widthRef.current = data[1]\n    _setHW(data)\n  }\n\n  // [nodeSize, textSize, lineWidth]\n\n  let typeList = useRef([\"radial\", \"rectangular\", \"circular\", \"diagonal\", \"hierarchical\"]);\n\n  //TODO: Fix height inheritance problem (relative height to window size without adding to window size for positive feedback loop)\n\n  useEffect(() => {\n    function handleResize() {\n      //setHeight(document.getElementsByClassName(\"Nav-body\")[0].clientHeight)\n      let newHeight = Math.max( Math.max( document.documentElement.clientHeight || 0, window.innerHeight || 0) - document.getElementsByClassName(\"Nav-header\")[0].clientHeight * 2, minHeight )\n      let newWidth = Math.max( document.documentElement.clientWidth || minWidth, window.innerWidth || minWidth, minWidth)\n      let heightDelta = heightRef.current / newHeight\n      let widthDelta = widthRef.current / newWidth\n      setHW([newHeight, newWidth])\n      let textSize = phylocanvas.current.textSize\n      let nodeSize = phylocanvas.current.baseNodeSize\n      phylocanvas.current.setTreeType(phylocanvas.current.treeType)\n      phylocanvas.current.setTextSize(textSize / heightDelta)\n      phylocanvas.current.setNodeSize(nodeSize / heightDelta)\n      if (phylocanvas.current.treeType == \"circular\") {\n      }\n      if (phylocanvas.current.treeType == \"rectangular\") {\n      }\n    }\n    function initialSize() {\n      window.dispatchEvent(new Event('resize')) \n      phylocanvas.current.setTreeType(phylocanvas.current.treeType)\n    } \n    window.addEventListener(\"resize\", handleResize);\n    window.addEventListener(\"load\", initialSize);\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n      window.removeEventListener(\"load\", initialSize);\n    };\n  }, [])\n\n  useEffect(() => {\n    phylocanvas.current = Phylocanvas.createTree(\"phylocanvas\")\n  }, [])\n\n  useEffect(() => {\n    phylocanvas.current.load(props.tree)\n  }, [props.tree])\n\n  useEffect(() => {\n    if (typeList.current.includes(props.type)) {\n      phylocanvas.current.setTreeType(props.type)\n    } else {\n      phylocanvas.current.setTreeType(\"rectangular\")\n    }\n    phylocanvas.current.setNodeSize(props.nodeSize * getPixelRatio(phylocanvas.current.canvas) / 2)\n    phylocanvas.current.setTextSize(props.textSize * getPixelRatio(phylocanvas.current.canvas) / 2)\n    phylocanvas.current.lineWidth = props.lineWidth * getPixelRatio(phylocanvas.current.canvas) / 2\n }, [props.type])\n\n  useEffect(() => {\n    phylocanvas.current.setNodeSize(props.nodeSize * getPixelRatio(phylocanvas.current.canvas) / 2)\n  }, [props.nodeSize])\n\n  useEffect(() => {\n    phylocanvas.current.setTextSize(props.textSize * getPixelRatio(phylocanvas.current.canvas) / 2)\n  }, [props.textSize])\n\n  useEffect(() => {\n    phylocanvas.current.showLabels = props.labels\n    phylocanvas.current.alignLabels = props.align\n    phylocanvas.current.lineWidth = props.lineWidth * getPixelRatio(phylocanvas.current.canvas) / 2\n    phylocanvas.current.draw()\n  }, [props.labels, props.align, props.lineWidth])\n\n  useEffect(() => {\n    phylocanvas.current.pairwiseOps.clusterDistance = props.clusterDistance\n    phylocanvas.current.pairwiseOps.clusterSamples = props.clusterSamples\n    console.log(phylocanvas.current)\n    phylocanvas.current.pairwiseOps.clusterDraw = true\n    phylocanvas.current.draw()\n  }, [props.clusterDistance, props.clusterSamples])\n\n  return (\n    <div id=\"phylocanvas\" style={{height: heightRef.current + \"px\", width: \"100%\", minHeight: minHeight + \"px\", minWidth: minWidth + \"px\"}}></div>\n  )\n}\n\nexport default PhylocanvasView;\n"]},"metadata":{},"sourceType":"module"}