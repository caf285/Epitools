{"ast":null,"code":"import { Tree, utils } from 'phylocanvas';\nconst {\n  getPixelRatio\n} = utils.canvas;\nconst DEFAULTS = {\n  active: true,\n  width: 100,\n  height: 20,\n  fillStyle: 'black',\n  strokeStyle: 'black',\n  lineWidth: 1,\n  fontFamily: 'Sans-serif',\n  fontSize: 16,\n  textBaseline: 'bottom',\n  textAlign: 'center',\n  digits: 2,\n  position: {\n    bottom: 10,\n    left: 10\n  }\n};\nconst INVALID_HORIZONTAL_POSITION = 'Invalid horizontal position specified' + 'Supported values are `left`, `centre`, or `right`';\nconst INVALID_VERTICAL_POSITION = 'Invalid vertical position specified' + 'Supported values are `top`, `middle`, or `bottom`';\nconst LOG10 = Math.log(10);\n\nfunction drawBranchLength() {\n  const {\n    branchLength,\n    zoom,\n    branchScalar\n  } = this;\n  const {\n    position\n  } = branchLength;\n  const cxt = this.canvas;\n  const canvas = cxt.canvas;\n  const pixelRatio = getPixelRatio(cxt);\n  const width = pixelRatio * branchLength.width;\n  const height = pixelRatio * branchLength.height;\n  const lineWidth = pixelRatio * branchLength.lineWidth;\n  const fontSize = pixelRatio * branchLength.fontSize;\n  cxt.save(); //console.log(this)\n  //console.log(this.branches[\"A\"])\n  //console.log(this.offsetx, this.offsety)\n\n  cxt.font = `${fontSize}px ${branchLength.fontFamily}`;\n  cxt.fillStyle = branchLength.fillStyle;\n  cxt.strokeStyle = branchLength.strokeStyle;\n  cxt.lineWidth = lineWidth;\n  cxt.textBaseline = branchLength.textBaseline;\n  cxt.textAlign = branchLength.textAlign;\n\n  for (let branch in this.branches) {\n    branch = this.branches[branch];\n    console.log(branch); //let x = (this.offsetx + branch.centerx * this.zoom / 2) * pixelRatio\n\n    let x = (this.offsetx + branch.startx * this.zoom / 2) * pixelRatio;\n    let y = (this.offsety + branch.centery * this.zoom / 2) * pixelRatio;\n    cxt.fillText(branch.branchLength, x, y);\n  }\n  /*cxt.clearRect(x, y, width, height);\n    cxt.beginPath();\n  cxt.moveTo(x, y);\n  cxt.lineTo(x + width, y);\n  cxt.stroke();\n  cxt.moveTo(x, y);\n  cxt.lineTo(x, y + height);\n  cxt.stroke();\n  cxt.moveTo(x + width, y);\n  cxt.lineTo(x + width, y + height);\n  cxt.stroke();\n  cxt.closePath();\n   const scale = width / branchScalar / zoom;\n  const minDigitis = parseInt(Math.abs(Math.log(scale) / LOG10), 10);\n  const label = scale.toFixed(minDigitis + branchLength.digits);\n  cxt.fillText(label, x + width / 2, y + height);*/\n\n\n  cxt.restore();\n}\n\nexport default function plugin(decorate) {\n  decorate(this, 'createTree', (delegate, args) => {\n    const tree = delegate(...args);\n    const [, config = {}] = args;\n    tree.branchLength = Object.assign({}, DEFAULTS, config.branchLength || {});\n    return tree;\n  });\n  decorate(Tree, 'draw', function (delegate, args) {\n    delegate.apply(this, args);\n\n    if (this.branchLength.active) {\n      drawBranchLength.apply(this);\n    }\n  });\n}","map":{"version":3,"sources":["/var/www/epitools/my_modules/phylocanvas-plugin-branch-length/index.js"],"names":["Tree","utils","getPixelRatio","canvas","DEFAULTS","active","width","height","fillStyle","strokeStyle","lineWidth","fontFamily","fontSize","textBaseline","textAlign","digits","position","bottom","left","INVALID_HORIZONTAL_POSITION","INVALID_VERTICAL_POSITION","LOG10","Math","log","drawBranchLength","branchLength","zoom","branchScalar","cxt","pixelRatio","save","font","branch","branches","console","x","offsetx","startx","y","offsety","centery","fillText","restore","plugin","decorate","delegate","args","tree","config","Object","assign","apply"],"mappings":"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","sourcesContent":["import { Tree, utils } from 'phylocanvas';\n\nconst { getPixelRatio } = utils.canvas;\n\nconst DEFAULTS = {\n  active: true,\n  width: 100,\n  height: 20,\n  fillStyle: 'black',\n  strokeStyle: 'black',\n  lineWidth: 1,\n  fontFamily: 'Sans-serif',\n  fontSize: 16,\n  textBaseline: 'bottom',\n  textAlign: 'center',\n  digits: 2,\n  position: {\n    bottom: 10,\n    left: 10,\n  },\n};\n\nconst INVALID_HORIZONTAL_POSITION = 'Invalid horizontal position specified' +\n  'Supported values are `left`, `centre`, or `right`';\nconst INVALID_VERTICAL_POSITION = 'Invalid vertical position specified' +\n  'Supported values are `top`, `middle`, or `bottom`';\n\nconst LOG10 = Math.log(10);\n\nfunction drawBranchLength() {\n\n  const { branchLength, zoom, branchScalar } = this;\n  const { position } = branchLength;\n  const cxt = this.canvas;\n  const canvas = cxt.canvas;\n  const pixelRatio = getPixelRatio(cxt);\n  const width = pixelRatio * branchLength.width;\n  const height = pixelRatio * branchLength.height;\n  const lineWidth = pixelRatio * branchLength.lineWidth;\n  const fontSize = pixelRatio * branchLength.fontSize;\n\n  cxt.save();\n\n  //console.log(this)\n  //console.log(this.branches[\"A\"])\n  //console.log(this.offsetx, this.offsety)\n\n  cxt.font = `${fontSize}px ${branchLength.fontFamily}`;\n  cxt.fillStyle = branchLength.fillStyle;\n  cxt.strokeStyle = branchLength.strokeStyle;\n  cxt.lineWidth = lineWidth;\n  cxt.textBaseline = branchLength.textBaseline;\n  cxt.textAlign = branchLength.textAlign;\n\n  for (let branch in this.branches) {\n    branch = this.branches[branch]\n    console.log(branch)\n    //let x = (this.offsetx + branch.centerx * this.zoom / 2) * pixelRatio\n    let x = (this.offsetx + branch.startx * this.zoom / 2) * pixelRatio\n    let y = (this.offsety + branch.centery * this.zoom / 2) * pixelRatio\n    cxt.fillText(branch.branchLength, x, y)\n  }\n\n  /*cxt.clearRect(x, y, width, height);\n\n\n  cxt.beginPath();\n  cxt.moveTo(x, y);\n  cxt.lineTo(x + width, y);\n  cxt.stroke();\n  cxt.moveTo(x, y);\n  cxt.lineTo(x, y + height);\n  cxt.stroke();\n  cxt.moveTo(x + width, y);\n  cxt.lineTo(x + width, y + height);\n  cxt.stroke();\n  cxt.closePath();\n\n  const scale = width / branchScalar / zoom;\n  const minDigitis = parseInt(Math.abs(Math.log(scale) / LOG10), 10);\n  const label = scale.toFixed(minDigitis + branchLength.digits);\n  cxt.fillText(label, x + width / 2, y + height);*/\n\n  cxt.restore();\n}\n\nexport default function plugin(decorate) {\n  decorate(this, 'createTree', (delegate, args) => {\n    const tree = delegate(...args);\n    const [ , config = {} ] = args;\n    tree.branchLength = Object.assign({}, DEFAULTS, config.branchLength || {});\n    return tree;\n  });\n  decorate(Tree, 'draw', function (delegate, args) {\n    delegate.apply(this, args);\n    if (this.branchLength.active) {\n      drawBranchLength.apply(this);\n    }\n  });\n}\n"]},"metadata":{},"sourceType":"module"}