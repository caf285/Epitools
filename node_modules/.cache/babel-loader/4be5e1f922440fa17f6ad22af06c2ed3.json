{"ast":null,"code":"import { Tree, utils } from 'phylocanvas';\nconst {\n  getPixelRatio\n} = utils.canvas;\nconst DEFAULTS = {\n  active: true,\n  debug: true,\n  margin: 20,\n  fontFamily: \"Sans-serif\",\n  fontSize: 16,\n  textBaseLine: \"top\",\n  textAlign: \"left\"\n};\n\nfunction addListeners() {\n  const tree = this;\n  const ctx = this.canvas;\n  const canvas = ctx.canvas;\n  const pixelRatio = getPixelRatio(ctx);\n  const {\n    treeStats,\n    textSize\n  } = this;\n\n  if (this.treeStats.active) {\n    //cleanup old event listeners\n    for (let eventListener of this.eventListeners.mousemove.filter(eventListener => eventListener.listener.name == \"treeStatsListener\")) {\n      this.removeListener('mousemove', eventListener.listener, canvas);\n    }\n\n    console.log(this);\n\n    for (let leaf of this.leaves) {\n      this.addListener('mousemove', treeStatsListener, canvas);\n\n      function treeStatsListener(e) {\n        let path = new Path2D();\n        ctx.save();\n        ctx.font = `${tree.textSize * pixelRatio}px ${tree.font}`;\n        let lineLength = ctx.measureText(leaf.label).width * pixelRatio * tree.zoom / tree.zoomFactor;\n        let lineWidth = ctx.measureText(\"M\").width * pixelRatio * tree.zoom / tree.zoomFactor; // get X and Y values\n\n        let centerX = (tree.offsetx + (leaf.minx + leaf.maxx) * tree.zoom / pixelRatio / 2) * pixelRatio;\n        let centerY = (tree.offsety + (leaf.miny + leaf.maxy) * tree.zoom / pixelRatio / 2) * pixelRatio;\n        let startX = centerX - tree.baseNodeSize * tree.zoom * Math.cos(leaf.angle);\n        let startY = centerY - tree.baseNodeSize * tree.zoom * Math.sin(leaf.angle);\n        let endX = centerX + (-tree.baseNodeSize * tree.zoom + leaf.getLabelStartX() * tree.zoom + lineLength) * Math.cos(leaf.angle);\n        let endY = centerY + (-tree.baseNodeSize * tree.zoom + leaf.getLabelStartX() * tree.zoom + lineLength) * Math.sin(leaf.angle); // stroke line for mouseover detection\n\n        if (tree.treeStats.debug) {\n          ctx.strokeStyle = \"rgba(0, 0, 255, 1)\";\n        } else {\n          ctx.strokeStyle = \"rgba(0, 0, 255, 0)\";\n        }\n\n        ctx.lineWidth = lineWidth;\n        path.moveTo(centerX, centerY);\n        path.lineTo(endX, endY);\n        path.closePath();\n        ctx.stroke(path); // draw treeStats window\n\n        if (ctx.isPointInStroke(path, e.offsetX * pixelRatio, e.offsetY * pixelRatio)) {\n          leaf.highlighted = true;\n          let x = e.offsetX * pixelRatio;\n          let y = e.offsetY * pixelRatio;\n          ctx.save();\n          ctx.font = `${treeStats.fontSize}px ${treeStats.fontFamily}`;\n          ctx.textBaseline = treeStats.textBaseLine;\n          ctx.textAlign = treeStats.textAlign;\n          let boxWidth = ctx.measureText(leaf.id).width + treeStats.margin * 2;\n          let boxHeight = ctx.measureText(\"W\").width + treeStats.margin * 2; // TODO: for loop for writing multiple lines and getting the proper box size\n          // fill box\n\n          ctx.fillStyle = \"rgba(240, 240, 240, 0.9)\";\n          ctx.fillRect(x, y, boxWidth, boxHeight); // fill text\n\n          ctx.fillStyle = \"rgb(0, 0, 0)\";\n          ctx.fillText(leaf.id, x + treeStats.margin, y + treeStats.margin);\n          ctx.restore();\n        } else {\n          leaf.highlighted = false;\n        }\n\n        ctx.restore();\n      }\n    }\n  }\n}\n\nexport default function plugin(decorate) {\n  decorate(this, 'createTree', (delegate, args) => {\n    const tree = delegate(...args);\n    const [, config = {}] = args;\n    tree.treeStats = Object.assign({}, DEFAULTS, config.treeStats || {});\n    return tree;\n  });\n  decorate(Tree, 'load', function (delegate, args) {\n    delegate.apply(this, args);\n    addListeners.apply(this);\n    let ctx = this.canvas;\n    this.addListener('mousemove', e => {\n      if (this.treeStats.debug) {\n        let path = new Path2D();\n        path.moveTo(0, 0);\n        path.lineTo(e.offsetX * getPixelRatio(ctx), e.offsetY * getPixelRatio(ctx));\n        path.closePath();\n        ctx.stroke(path);\n      }\n    });\n  });\n}","map":{"version":3,"sources":["/var/www/pathogen-intelligence.tgen.org/epitools/my_modules/phylocanvas-plugin-tree-stats/index.js"],"names":["Tree","utils","getPixelRatio","canvas","DEFAULTS","active","debug","margin","fontFamily","fontSize","textBaseLine","textAlign","addListeners","tree","ctx","pixelRatio","treeStats","textSize","eventListener","eventListeners","mousemove","filter","listener","name","removeListener","console","log","leaf","leaves","addListener","treeStatsListener","e","path","Path2D","save","font","lineLength","measureText","label","width","zoom","zoomFactor","lineWidth","centerX","offsetx","minx","maxx","centerY","offsety","miny","maxy","startX","baseNodeSize","Math","cos","angle","startY","sin","endX","getLabelStartX","endY","strokeStyle","moveTo","lineTo","closePath","stroke","isPointInStroke","offsetX","offsetY","highlighted","x","y","textBaseline","boxWidth","id","boxHeight","fillStyle","fillRect","fillText","restore","plugin","decorate","delegate","args","config","Object","assign","apply"],"mappings":"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","sourcesContent":["import { Tree, utils } from 'phylocanvas';\n\nconst { getPixelRatio } = utils.canvas;\n\nconst DEFAULTS = {\n  active: true,\n  debug: true,\n  margin: 20,\n  fontFamily: \"Sans-serif\",\n  fontSize: 16,\n  textBaseLine: \"top\",\n  textAlign: \"left\",\n};\n\nfunction addListeners() {\n  const tree = this\n  const ctx = this.canvas;\n  const canvas = ctx.canvas;\n  const pixelRatio = getPixelRatio(ctx);\n  const { treeStats, textSize } = this\n  if (this.treeStats.active) {\n      //cleanup old event listeners\n      for (let eventListener of this.eventListeners.mousemove.filter(eventListener => eventListener.listener.name == \"treeStatsListener\")) {\n        this.removeListener('mousemove', eventListener.listener, canvas)\n      }\n      console.log(this)\n      for (let leaf of this.leaves) {\n        this.addListener('mousemove', treeStatsListener, canvas)\n        function treeStatsListener(e) {\n          let path = new Path2D()\n          ctx.save()\n          ctx.font = `${tree.textSize * pixelRatio}px ${tree.font}`;\n          let lineLength = ctx.measureText(leaf.label).width * pixelRatio * tree.zoom / tree.zoomFactor\n          let lineWidth = ctx.measureText(\"M\").width * pixelRatio * tree.zoom / tree.zoomFactor\n\n          // get X and Y values\n          let centerX = (tree.offsetx + (leaf.minx + leaf.maxx) * tree.zoom / pixelRatio / 2) * pixelRatio\n          let centerY = (tree.offsety + (leaf.miny + leaf.maxy) * tree.zoom / pixelRatio / 2) * pixelRatio\n          let startX = centerX - (tree.baseNodeSize * tree.zoom * Math.cos(leaf.angle))\n          let startY = centerY - (tree.baseNodeSize * tree.zoom * Math.sin(leaf.angle))\n          let endX = centerX + ((-tree.baseNodeSize * tree.zoom + leaf.getLabelStartX() * tree.zoom + lineLength) * Math.cos(leaf.angle))\n          let endY = centerY + ((-tree.baseNodeSize * tree.zoom + leaf.getLabelStartX() * tree.zoom + lineLength) * Math.sin(leaf.angle))\n\n          // stroke line for mouseover detection\n          if (tree.treeStats.debug) {\n            ctx.strokeStyle = \"rgba(0, 0, 255, 1)\"\n          } else {\n            ctx.strokeStyle = \"rgba(0, 0, 255, 0)\"\n          }\n          ctx.lineWidth = lineWidth\n          path.moveTo(centerX, centerY)\n          path.lineTo(endX, endY)\n          path.closePath()\n          ctx.stroke(path)\n\n          // draw treeStats window\n          if (ctx.isPointInStroke(path, e.offsetX * pixelRatio, e.offsetY * pixelRatio)) {\n            leaf.highlighted = true\n            let x = e.offsetX * pixelRatio\n            let y = e.offsetY * pixelRatio\n            ctx.save()\n            ctx.font = `${treeStats.fontSize}px ${treeStats.fontFamily}`;\n            ctx.textBaseline = treeStats.textBaseLine\n            ctx.textAlign = treeStats.textAlign\n            let boxWidth = ctx.measureText(leaf.id).width + treeStats.margin * 2\n            let boxHeight = ctx.measureText(\"W\").width + treeStats.margin * 2\n            // TODO: for loop for writing multiple lines and getting the proper box size\n            // fill box\n            ctx.fillStyle = \"rgba(240, 240, 240, 0.9)\"\n            ctx.fillRect(x, y, boxWidth, boxHeight)\n\n            // fill text\n            ctx.fillStyle = \"rgb(0, 0, 0)\"\n            ctx.fillText(leaf.id, x + treeStats.margin, y + treeStats.margin)\n            ctx.restore()\n          } else {\n            leaf.highlighted = false\n          }\n          ctx.restore()\n        }\n      }\n  }\n}\n\nexport default function plugin(decorate) {\n  decorate(this, 'createTree', (delegate, args) => {\n    const tree = delegate(...args);\n    const [ , config = {} ] = args;\n    tree.treeStats = Object.assign({}, DEFAULTS, config.treeStats || {});\n    return tree;\n  });\n  decorate(Tree, 'load', function (delegate, args) {\n    delegate.apply(this, args);\n    addListeners.apply(this)\n    let ctx = this.canvas\n    this.addListener('mousemove', (e) => {\n      if (this.treeStats.debug) {\n      let path = new Path2D()\n      path.moveTo(0, 0)\n      path.lineTo(e.offsetX * getPixelRatio(ctx), e.offsetY * getPixelRatio(ctx))\n      path.closePath()\n      ctx.stroke(path)\n      }\n    })\n\n  });\n}\n"]},"metadata":{},"sourceType":"module"}