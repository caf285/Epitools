{"ast":null,"code":"import { Tree, utils } from 'phylocanvas';\nconst {\n  getPixelRatio\n} = utils.canvas;\nconst DEFAULTS = {\n  active: true,\n  debug: false,\n  margin: 20,\n  fontFamily: \"Sans-serif\",\n  fontSize: 30,\n  textBaseLine: \"top\",\n  textAlign: \"left\"\n};\n\nfunction addListeners() {\n  const tree = this;\n  const ctx = this.canvas;\n  const canvas = ctx.canvas;\n  const pixelRatio = getPixelRatio(ctx);\n  const {\n    treeStats,\n    textSize\n  } = this;\n\n  if (this.treeStats.active) {\n    //cleanup old event listeners\n    for (let eventListener of this.eventListeners.mousemove.filter(eventListener => eventListener.listener.name == \"treeStatsListener\")) {\n      this.removeListener('mousemove', eventListener.listener, canvas);\n    }\n\n    console.log(this);\n\n    for (let leaf of this.leaves) {\n      this.addListener('mousemove', treeStatsListener, canvas);\n\n      function treeStatsListener(e) {\n        let path = new Path2D();\n        ctx.save();\n        ctx.font = `${tree.textSize * 4}px ${tree.font}`;\n        let lineLength = ctx.measureText(leaf.label).width * tree.zoom / tree.zoomFactor;\n        let lineWidth = ctx.measureText(\"M\").width * tree.zoom / tree.zoomFactor; // get X and Y values\n\n        let centerX = (tree.offsetx + (leaf.minx + leaf.maxx) * tree.zoom / pixelRatio / 2) * pixelRatio;\n        let centerY = (tree.offsety + (leaf.miny + leaf.maxy) * tree.zoom / pixelRatio / 2) * pixelRatio;\n        let startX = centerX - tree.baseNodeSize * tree.zoom * Math.cos(leaf.angle);\n        let startY = centerY - tree.baseNodeSize * tree.zoom * Math.sin(leaf.angle);\n        let endX = centerX + (-tree.baseNodeSize * tree.zoom + leaf.getLabelStartX() * tree.zoom + lineLength) * Math.cos(leaf.angle);\n        let endY = centerY + (-tree.baseNodeSize * tree.zoom + leaf.getLabelStartX() * tree.zoom + lineLength) * Math.sin(leaf.angle); // stroke line for mouseover detection\n\n        if (tree.treeStats.debug) {\n          ctx.strokeStyle = \"rgba(0, 0, 255, 1)\";\n        } else {\n          ctx.strokeStyle = \"rgba(0, 0, 255, 0)\";\n        }\n\n        ctx.lineWidth = lineWidth;\n        path.moveTo(centerX, centerY);\n        path.lineTo(endX, endY);\n        path.closePath();\n        ctx.stroke(path); //==================================================( DEMO: replace this code with getting per node treeStats )\n\n        let windowText = [leaf.id];\n\n        for (let i = 0; i < Math.max(Math.ceil(Math.random() * 3), 1); i++) {\n          let rand = Math.random();\n          rand = rand.toFixed(Math.ceil(Math.random() * String(rand).length));\n          windowText.push(String(rand));\n        } //==================================================( END DEMO )\n        // draw treeStats window\n\n\n        if (ctx.isPointInStroke(path, e.offsetX * pixelRatio, e.offsetY * pixelRatio)) {\n          leaf.highlighted = true;\n          let x = e.offsetX * pixelRatio;\n          let y = e.offsetY * pixelRatio;\n          ctx.save();\n          ctx.font = `${treeStats.fontSize * pixelRatio / 2}px ${treeStats.fontFamily}`;\n          ctx.textBaseline = treeStats.textBaseLine;\n          ctx.textAlign = treeStats.textAlign;\n          let boxWidth = 0;\n\n          for (let text of windowText) {\n            boxWidth = Math.max(boxWidth, ctx.measureText(text).width + treeStats.margin * 2);\n          }\n\n          let lineHeight = ctx.measureText(\"w\").width + treeStats.margin / 2;\n          let boxHeight = lineHeight * windowText.length + treeStats.margin * 2; // fill box\n\n          if (x + boxWidth > canvas.width) {\n            x -= boxWidth;\n          }\n\n          if (y + boxHeight > canvas.height) {\n            y -= boxHeight;\n          }\n\n          ctx.fillStyle = \"rgba(240, 240, 240, 0.9)\";\n          ctx.fillRect(x, y, boxWidth, boxHeight); // fill text\n\n          ctx.fillStyle = \"rgb(0, 0, 0)\";\n\n          for (let i = 0; i < windowText.length; i++) {\n            ctx.fillText(windowText[i], x + treeStats.margin, y + treeStats.margin + i * lineHeight);\n          }\n\n          ctx.restore();\n        } else {\n          leaf.highlighted = false;\n        }\n\n        ctx.restore();\n      }\n    }\n  }\n}\n\nexport default function plugin(decorate) {\n  decorate(this, 'createTree', (delegate, args) => {\n    const tree = delegate(...args);\n    const [, config = {}] = args;\n    tree.treeStats = Object.assign({}, DEFAULTS, config.treeStats || {});\n    return tree;\n  });\n  decorate(Tree, 'load', function (delegate, args) {\n    delegate.apply(this, args);\n    addListeners.apply(this);\n    let ctx = this.canvas;\n    this.addListener('mousemove', e => {\n      if (this.treeStats.debug) {\n        let path = new Path2D();\n        path.moveTo(0, 0);\n        path.lineTo(e.offsetX * getPixelRatio(ctx), e.offsetY * getPixelRatio(ctx));\n        path.closePath();\n        ctx.stroke(path);\n      }\n    });\n  });\n}","map":{"version":3,"sources":["/var/www/pathogen-intelligence.tgen.org/epitools/my_modules/phylocanvas-plugin-tree-stats/index.js"],"names":["Tree","utils","getPixelRatio","canvas","DEFAULTS","active","debug","margin","fontFamily","fontSize","textBaseLine","textAlign","addListeners","tree","ctx","pixelRatio","treeStats","textSize","eventListener","eventListeners","mousemove","filter","listener","name","removeListener","console","log","leaf","leaves","addListener","treeStatsListener","e","path","Path2D","save","font","lineLength","measureText","label","width","zoom","zoomFactor","lineWidth","centerX","offsetx","minx","maxx","centerY","offsety","miny","maxy","startX","baseNodeSize","Math","cos","angle","startY","sin","endX","getLabelStartX","endY","strokeStyle","moveTo","lineTo","closePath","stroke","windowText","id","i","max","ceil","random","rand","toFixed","String","length","push","isPointInStroke","offsetX","offsetY","highlighted","x","y","textBaseline","boxWidth","text","lineHeight","boxHeight","height","fillStyle","fillRect","fillText","restore","plugin","decorate","delegate","args","config","Object","assign","apply"],"mappings":"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","sourcesContent":["import { Tree, utils } from 'phylocanvas';\n\nconst { getPixelRatio } = utils.canvas;\n\nconst DEFAULTS = {\n  active: true,\n  debug: false,\n  margin: 20,\n  fontFamily: \"Sans-serif\",\n  fontSize: 30,\n  textBaseLine: \"top\",\n  textAlign: \"left\",\n};\n\nfunction addListeners() {\n  const tree = this\n  const ctx = this.canvas;\n  const canvas = ctx.canvas;\n  const pixelRatio = getPixelRatio(ctx);\n  const { treeStats, textSize } = this\n  if (this.treeStats.active) {\n      //cleanup old event listeners\n      for (let eventListener of this.eventListeners.mousemove.filter(eventListener => eventListener.listener.name == \"treeStatsListener\")) {\n        this.removeListener('mousemove', eventListener.listener, canvas)\n      }\n      console.log(this)\n      for (let leaf of this.leaves) {\n        this.addListener('mousemove', treeStatsListener, canvas)\n        function treeStatsListener(e) {\n          let path = new Path2D()\n          ctx.save()\n          ctx.font = `${tree.textSize * 4}px ${tree.font}`;\n          let lineLength = ctx.measureText(leaf.label).width * tree.zoom / tree.zoomFactor\n          let lineWidth = ctx.measureText(\"M\").width * tree.zoom / tree.zoomFactor\n\n          // get X and Y values\n          let centerX = (tree.offsetx + (leaf.minx + leaf.maxx) * tree.zoom / pixelRatio / 2) * pixelRatio\n          let centerY = (tree.offsety + (leaf.miny + leaf.maxy) * tree.zoom / pixelRatio / 2) * pixelRatio\n          let startX = centerX - (tree.baseNodeSize * tree.zoom * Math.cos(leaf.angle))\n          let startY = centerY - (tree.baseNodeSize * tree.zoom * Math.sin(leaf.angle))\n          let endX = centerX + ((-tree.baseNodeSize * tree.zoom + leaf.getLabelStartX() * tree.zoom + lineLength) * Math.cos(leaf.angle))\n          let endY = centerY + ((-tree.baseNodeSize * tree.zoom + leaf.getLabelStartX() * tree.zoom + lineLength) * Math.sin(leaf.angle))\n\n          // stroke line for mouseover detection\n          if (tree.treeStats.debug) {\n            ctx.strokeStyle = \"rgba(0, 0, 255, 1)\"\n          } else {\n            ctx.strokeStyle = \"rgba(0, 0, 255, 0)\"\n          }\n          ctx.lineWidth = lineWidth\n          path.moveTo(centerX, centerY)\n          path.lineTo(endX, endY)\n          path.closePath()\n          ctx.stroke(path)\n          //==================================================( DEMO: replace this code with getting per node treeStats )\n          let windowText = [leaf.id]\n          for (let i = 0; i < Math.max(Math.ceil(Math.random() * 3), 1); i++) {\n            let rand = Math.random()\n            rand = rand.toFixed(Math.ceil(Math.random() * String(rand).length))\n            windowText.push(String(rand))\n          }\n            //==================================================( END DEMO )\n\n          // draw treeStats window\n          if (ctx.isPointInStroke(path, e.offsetX * pixelRatio, e.offsetY * pixelRatio)) {\n            leaf.highlighted = true\n            let x = e.offsetX * pixelRatio\n            let y = e.offsetY * pixelRatio\n            ctx.save()\n            ctx.font = `${treeStats.fontSize * pixelRatio / 2}px ${treeStats.fontFamily}`;\n            ctx.textBaseline = treeStats.textBaseLine\n            ctx.textAlign = treeStats.textAlign\n\n            let boxWidth = 0\n            for (let text of windowText) {\n              boxWidth = Math.max(boxWidth, ctx.measureText(text).width + treeStats.margin * 2)\n            }\n            let lineHeight = ctx.measureText(\"w\").width + treeStats.margin / 2\n            let boxHeight = lineHeight * windowText.length + treeStats.margin * 2\n\n            // fill box\n            if (x + boxWidth > canvas.width) {\n              x -= boxWidth\n            }\n            if (y + boxHeight > canvas.height) {\n              y -= boxHeight\n            }\n            ctx.fillStyle = \"rgba(240, 240, 240, 0.9)\"\n            ctx.fillRect(x, y, boxWidth, boxHeight)\n\n            // fill text\n            ctx.fillStyle = \"rgb(0, 0, 0)\"\n            for (let i = 0; i < windowText.length; i++) {\n              ctx.fillText(windowText[i], x + treeStats.margin, y + treeStats.margin + i * lineHeight)\n            }\n            ctx.restore()\n          } else {\n            leaf.highlighted = false\n          }\n          ctx.restore()\n        }\n      }\n  }\n}\n\nexport default function plugin(decorate) {\n  decorate(this, 'createTree', (delegate, args) => {\n    const tree = delegate(...args);\n    const [ , config = {} ] = args;\n    tree.treeStats = Object.assign({}, DEFAULTS, config.treeStats || {});\n    return tree;\n  });\n  decorate(Tree, 'load', function (delegate, args) {\n    delegate.apply(this, args);\n    addListeners.apply(this)\n    let ctx = this.canvas\n    this.addListener('mousemove', (e) => {\n      if (this.treeStats.debug) {\n      let path = new Path2D()\n      path.moveTo(0, 0)\n      path.lineTo(e.offsetX * getPixelRatio(ctx), e.offsetY * getPixelRatio(ctx))\n      path.closePath()\n      ctx.stroke(path)\n      }\n    })\n\n  });\n}\n"]},"metadata":{},"sourceType":"module"}