{"ast":null,"code":"import { Tree, utils } from 'phylocanvas';\nconst {\n  getPixelRatio\n} = utils.canvas;\nconst DEFAULTS = {\n  active: true,\n  pairwiseMatrix: {},\n  clusterActive: true,\n  clusterDraw: true,\n  clusterMatrix: [],\n  clusterMaxDistance: 20,\n  clusterDistance: 3,\n  clusterSamples: 3\n};\n/*\nfunction walkMatrix(tree, start, node, walked, distance, max) {\n  walked.push(node)\n\n  if (distance >= max) {\n    return\n  }\n  if (node !== start && node.leaf === true) {\n    tree.pairwiseOps.pairwiseMatrix[start.id].push([node.id, distance])\n  }\n  for (let child of node.children) {\n    if (! walked.includes(child)) {\n      let newDistance = distance + child.branchLength\n      newDistance = parseFloat(newDistance.toFixed(10))\n      walkMatrix(tree, start, child, walked, newDistance, max)\n    }\n  }\n  if (node.parent && ! walked.includes(node.parent)) {\n    let newDistance = distance + node.branchLength\n    newDistance = parseFloat(newDistance.toFixed(10))\n    walkMatrix(tree, start, node.parent, walked, newDistance, max)\n  }\n}\n\nfunction buildPairwiseMatrix() {\n  for (let leaf of this.leaves) {\n    this.pairwiseOps.pairwiseMatrix[leaf.id] = []\n    walkMatrix(this, leaf, leaf, [], 0, this.pairwiseOps.clusterMaxDistance)\n  }\n  console.log(this.pairwiseOps.pairwiseMatrix)\n}\n*/\n\nfunction walkMatrix(tree, node, path, distance) {\n  let newDistance = Array.from(distance);\n  let newPath = Array.from(path);\n  newDistance.push(node.branchLength);\n\n  if (node.leaf === false) {\n    newPath.push(node.id);\n    tree.pairwiseOps.pairwiseMatrix.internalNodes[node.id] = [];\n\n    for (let child of node.children) {\n      walkMatrix(tree, child, newPath, newDistance);\n    }\n  } else {\n    tree.pairwiseOps.pairwiseMatrix.leaves[node.id] = {};\n    newDistance.push(newDistance.shift());\n\n    for (let i in newPath) {\n      let nodeLength = newDistance.slice(i).reduce((previousValue, currentValue) => previousValue + currentValue);\n\n      for (let leaf of tree.pairwiseOps.pairwiseMatrix.internalNodes[newPath[i]]) {\n        console.log(leaf);\n\n        if (!Object.keys(tree.pairwiseOps.pairwiseMatrix.leaves[node.id]).includes(leaf[0])) {\n          tree.pairwiseOps.pairwiseMatrix.leaves[node.id][leaf[0]] = leaf[1] + nodeLength;\n        } else if (tree.pairwiseOps.pairwiseMatrix.leaves[node.id][leaf[0]] > leaf[1] + nodeLength) {\n          tree.pairwiseOps.pairwiseMatrix.leaves[node.id][leaf[0]] = leaf[1] + nodeLength;\n        }\n      }\n\n      tree.pairwiseOps.pairwiseMatrix.internalNodes[newPath[i]].push([node.id, nodeLength]);\n    }\n  }\n}\n\nfunction buildPairwiseMatrix() {\n  this.pairwiseOps.pairwiseMatrix = {\n    \"internalNodes\": {},\n    \"leaves\": {}\n  };\n  walkMatrix(this, this.root, [], []);\n  console.log(this.pairwiseOps.pairwiseMatrix.internalNodes);\n}\n/*\nfunction buildClusterMatrix() {\n  this.pairwiseOps.clusterMatrix = []\n  for (let leaf in this.pairwiseOps.pairwiseMatrix) {\n    let cluster = [leaf]\n    for (let node of this.pairwiseOps.pairwiseMatrix[leaf]) {\n      if (node[1] <= this.pairwiseOps.clusterDistance) {\n        cluster.push(node[0])\n      }\n    }\n    if (cluster.length >= this.pairwiseOps.clusterSamples) {\n      cluster.sort()\n      cluster = JSON.stringify(cluster)\n      if (! this.pairwiseOps.clusterMatrix.includes(cluster)) {\n        this.pairwiseOps.clusterMatrix.push(cluster)\n      }\n    }\n  }\n}\n*/\n\n\nfunction colorNode() {\n  for (let leaf of this.leaves) {\n    leaf.setDisplay({\n      colour: this.branchColour\n    });\n    leaf.label = leaf.id;\n  }\n\n  for (let cluster of this.pairwiseOps.clusterMatrix) {\n    cluster = JSON.parse(cluster);\n\n    for (let id of cluster) {\n      for (let leaf of this.findLeaves(id)) {\n        leaf.label += \"+\";\n        leaf.setDisplay({\n          colour: 'red'\n        });\n      }\n    }\n  }\n\n  this.draw();\n}\n\nexport default function plugin(decorate) {\n  decorate(this, 'createTree', (delegate, args) => {\n    const tree = delegate(...args);\n    const [, config = {}] = args;\n    tree.pairwiseOps = Object.assign({}, DEFAULTS, config.pairwiseOps || {});\n    return tree;\n  });\n  decorate(Tree, 'load', function (delegate, args) {\n    delegate.apply(this, args);\n\n    if (this.pairwiseOps.active) {\n      buildPairwiseMatrix.apply(this);\n\n      if (this.pairwiseOps.clusterActive) {\n        this.pairwiseOps.clusterDraw = true;\n      }\n    }\n  });\n  decorate(Tree, 'draw', function (delegate, args) {\n    delegate.apply(this, args);\n\n    if (this.pairwiseOps.clusterActive) {\n      if (this.pairwiseOps.clusterDraw) {\n        this.pairwiseOps.clusterDraw = false; //buildClusterMatrix.apply(this);\n        //colorNode.apply(this)\n      }\n    }\n  });\n}","map":{"version":3,"sources":["/var/www/pathogen-intelligence.tgen.org/epitools/my_modules/phylocanvas-plugin-pairwise-ops/index.js"],"names":["Tree","utils","getPixelRatio","canvas","DEFAULTS","active","pairwiseMatrix","clusterActive","clusterDraw","clusterMatrix","clusterMaxDistance","clusterDistance","clusterSamples","walkMatrix","tree","node","path","distance","newDistance","Array","from","newPath","push","branchLength","leaf","id","pairwiseOps","internalNodes","child","children","leaves","shift","i","nodeLength","slice","reduce","previousValue","currentValue","console","log","Object","keys","includes","buildPairwiseMatrix","root","colorNode","setDisplay","colour","branchColour","label","cluster","JSON","parse","findLeaves","draw","plugin","decorate","delegate","args","config","assign","apply"],"mappings":"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","sourcesContent":["import { Tree, utils } from 'phylocanvas';\n\nconst { getPixelRatio } = utils.canvas;\n\nconst DEFAULTS = {\n  active: true,\n  pairwiseMatrix: {},\n  clusterActive: true,\n  clusterDraw: true,\n  clusterMatrix: [],\n  clusterMaxDistance: 20,\n  clusterDistance: 3,\n  clusterSamples: 3,\n};\n\n/*\nfunction walkMatrix(tree, start, node, walked, distance, max) {\n  walked.push(node)\n\n  if (distance >= max) {\n    return\n  }\n  if (node !== start && node.leaf === true) {\n    tree.pairwiseOps.pairwiseMatrix[start.id].push([node.id, distance])\n  }\n  for (let child of node.children) {\n    if (! walked.includes(child)) {\n      let newDistance = distance + child.branchLength\n      newDistance = parseFloat(newDistance.toFixed(10))\n      walkMatrix(tree, start, child, walked, newDistance, max)\n    }\n  }\n  if (node.parent && ! walked.includes(node.parent)) {\n    let newDistance = distance + node.branchLength\n    newDistance = parseFloat(newDistance.toFixed(10))\n    walkMatrix(tree, start, node.parent, walked, newDistance, max)\n  }\n}\n\nfunction buildPairwiseMatrix() {\n  for (let leaf of this.leaves) {\n    this.pairwiseOps.pairwiseMatrix[leaf.id] = []\n    walkMatrix(this, leaf, leaf, [], 0, this.pairwiseOps.clusterMaxDistance)\n  }\n  console.log(this.pairwiseOps.pairwiseMatrix)\n}\n*/\n\nfunction walkMatrix(tree, node, path, distance) {\n  let newDistance = Array.from(distance)\n  let newPath = Array.from(path)\n  newDistance.push(node.branchLength)\n  if (node.leaf === false) {\n    newPath.push(node.id)\n    tree.pairwiseOps.pairwiseMatrix.internalNodes[node.id] = []\n    for (let child of node.children) {\n      walkMatrix(tree, child, newPath, newDistance)\n    }\n  } else {\n    tree.pairwiseOps.pairwiseMatrix.leaves[node.id] = {}\n    newDistance.push(newDistance.shift())\n    for (let i in newPath) {\n      let nodeLength = newDistance.slice(i).reduce((previousValue, currentValue) => previousValue + currentValue)\n      for (let leaf of tree.pairwiseOps.pairwiseMatrix.internalNodes[newPath[i]]) {\n        console.log(leaf)\n        if (! Object.keys(tree.pairwiseOps.pairwiseMatrix.leaves[node.id]).includes(leaf[0])) {\n          tree.pairwiseOps.pairwiseMatrix.leaves[node.id][leaf[0]] = leaf[1] + nodeLength\n        } else if (tree.pairwiseOps.pairwiseMatrix.leaves[node.id][leaf[0]] > leaf[1] + nodeLength) {\n          tree.pairwiseOps.pairwiseMatrix.leaves[node.id][leaf[0]] = leaf[1] + nodeLength\n        }\n      }\n      tree.pairwiseOps.pairwiseMatrix.internalNodes[newPath[i]].push([node.id, nodeLength])\n    }\n  }  \n}\n\nfunction buildPairwiseMatrix() {\n  this.pairwiseOps.pairwiseMatrix = {\"internalNodes\": {}, \"leaves\": {}}\n  walkMatrix(this, this.root, [], [])\n  console.log(this.pairwiseOps.pairwiseMatrix.internalNodes)\n}\n\n/*\nfunction buildClusterMatrix() {\n  this.pairwiseOps.clusterMatrix = []\n  for (let leaf in this.pairwiseOps.pairwiseMatrix) {\n    let cluster = [leaf]\n    for (let node of this.pairwiseOps.pairwiseMatrix[leaf]) {\n      if (node[1] <= this.pairwiseOps.clusterDistance) {\n        cluster.push(node[0])\n      }\n    }\n    if (cluster.length >= this.pairwiseOps.clusterSamples) {\n      cluster.sort()\n      cluster = JSON.stringify(cluster)\n      if (! this.pairwiseOps.clusterMatrix.includes(cluster)) {\n        this.pairwiseOps.clusterMatrix.push(cluster)\n      }\n    }\n  }\n}\n*/\n\nfunction colorNode() {\n  for (let leaf of this.leaves) {\n    leaf.setDisplay({\n      colour: this.branchColour,\n    })\n    leaf.label = leaf.id\n  }\n  for (let cluster of this.pairwiseOps.clusterMatrix) {\n    cluster = JSON.parse(cluster)\n    for (let id of cluster) {\n      \n      for (let leaf of this.findLeaves(id)) {\n        leaf.label += \"+\"\n        leaf.setDisplay({\n          colour: 'red',\n        })\n      }\n    }\n  }\n  this.draw()\n}\n\nexport default function plugin(decorate) {\n  decorate(this, 'createTree', (delegate, args) => {\n    const tree = delegate(...args);\n    const [ , config = {} ] = args;\n    tree.pairwiseOps = Object.assign({}, DEFAULTS, config.pairwiseOps || {});\n    return tree;\n  });\n  decorate(Tree, 'load', function (delegate, args) {\n    delegate.apply(this, args);\n    if (this.pairwiseOps.active) {\n      buildPairwiseMatrix.apply(this);\n      if (this.pairwiseOps.clusterActive) {\n        this.pairwiseOps.clusterDraw = true;\n      }\n    }   \n  });\n  decorate(Tree, 'draw', function (delegate, args) {\n    delegate.apply(this, args);\n    if (this.pairwiseOps.clusterActive) {\n      if (this.pairwiseOps.clusterDraw) {\n        this.pairwiseOps.clusterDraw = false;\n        //buildClusterMatrix.apply(this);\n        //colorNode.apply(this)\n      }\n    }\n  });\n}\n"]},"metadata":{},"sourceType":"module"}