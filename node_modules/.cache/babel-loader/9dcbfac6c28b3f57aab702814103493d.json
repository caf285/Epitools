{"ast":null,"code":"var _jsxFileName = \"/var/www/pathogen-intelligence.tgen.org/epitools/src/phylocanvas/Phylocanvas.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useRef } from \"react\";\nimport Phylocanvas, { utils } from \"phylocanvas\";\nimport scalebar from \"phylocanvas-plugin-scalebar\";\nimport branchLength from \"phylocanvas-plugin-branch-length\";\nimport root from \"phylocanvas-plugin-root\";\nimport pairwiseOps from \"phylocanvas-plugin-pairwise-ops\";\nimport treeStats from \"phylocanvas-plugin-tree-stats\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nPhylocanvas.plugin(scalebar);\nPhylocanvas.plugin(branchLength);\nPhylocanvas.plugin(root);\nPhylocanvas.plugin(pairwiseOps);\nPhylocanvas.plugin(treeStats);\nconst {\n  getPixelRatio\n} = utils.canvas;\n\nfunction PhylocanvasView(props) {\n  _s();\n\n  let phylocanvas = useRef();\n  let minHeight = 100;\n  let minWidth = 100; // [height, width]\n\n  let [hw, _setHW] = useState([minHeight, minWidth]);\n  let heightRef = useRef(hw[0]);\n  let widthRef = useRef(hw[1]);\n\n  let setHW = data => {\n    heightRef.current = data[0];\n    widthRef.current = data[1];\n\n    _setHW(data);\n  };\n\n  let typeList = useRef([\"radial\", \"rectangular\", \"circular\", \"diagonal\", \"hierarchical\"]); //TODO: Fix height inheritance problem (relative height to window size without adding to window size for positive feedback loop)\n\n  useEffect(() => {\n    function handleResize() {\n      //setHeight(document.getElementsByClassName(\"Nav-body\")[0].clientHeight)\n      let heightChange = heightRef.current;\n      let widthChange = widthRef.current;\n      setHW([Math.max(Math.max(document.documentElement.clientHeight || 0, window.innerHeight || 0) - document.getElementsByClassName(\"Nav-header\")[0].clientHeight * 2, minHeight), Math.max(document.documentElement.clientWidth || minWidth, window.innerWidth || minWidth, minWidth)]);\n      heightChange = heightChange / heightRef.current;\n      widthChange = widthChange / widthRef.current;\n      phylocanvas.current.setTreeType(phylocanvas.current.treeType);\n      phylocanvas.current.setNodeSize(props.nodeSize * getPixelRatio(phylocanvas.current.canvas) / 2);\n      phylocanvas.current.setTextSize(props.textSize * getPixelRatio(phylocanvas.current.canvas) / 2);\n      phylocanvas.current.lineWidth = props.lineWidth * getPixelRatio(phylocanvas.current.canvas) / 2;\n\n      if (phylocanvas.current.treeType == \"circular\") {}\n\n      if (phylocanvas.current.treeType == \"rectangular\") {}\n    }\n\n    function initialSize() {//window.dispatchEvent(new Event('resize')) \n      //phylocanvas.current.setTreeType(phylocanvas.current.treeType)\n    }\n\n    window.addEventListener(\"resize\", handleResize); //window.addEventListener(\"load\", initialSize);\n\n    return () => {\n      window.removeEventListener(\"resize\", handleResize); //window.removeEventListener(\"load\", initialSize);\n    };\n  }, []);\n  useEffect(() => {\n    phylocanvas.current = Phylocanvas.createTree(\"phylocanvas\");\n    setHW([Math.max(Math.max(document.documentElement.clientHeight || 0, window.innerHeight || 0) - document.getElementsByClassName(\"Nav-header\")[0].clientHeight * 2, minHeight), Math.max(document.documentElement.clientWidth || minWidth, window.innerWidth || minWidth, minWidth)]);\n  }, []);\n  useEffect(() => {\n    phylocanvas.current.load(props.tree);\n  }, [props.tree]);\n  useEffect(() => {\n    if (typeList.current.includes(props.type)) {\n      phylocanvas.current.setTreeType(props.type);\n    } else {\n      phylocanvas.current.setTreeType(\"rectangular\");\n    }\n\n    phylocanvas.current.setNodeSize(props.nodeSize * getPixelRatio(phylocanvas.current.canvas) / 2);\n    phylocanvas.current.setTextSize(props.textSize * getPixelRatio(phylocanvas.current.canvas) / 2);\n    phylocanvas.current.lineWidth = props.lineWidth * getPixelRatio(phylocanvas.current.canvas) / 2;\n  }, [props.type]);\n  useEffect(() => {\n    phylocanvas.current.setNodeSize(props.nodeSize * getPixelRatio(phylocanvas.current.canvas) / 2);\n  }, [props.nodeSize]);\n  useEffect(() => {\n    phylocanvas.current.setTextSize(props.textSize * getPixelRatio(phylocanvas.current.canvas) / 2);\n  }, [props.textSize]);\n  useEffect(() => {\n    phylocanvas.current.showLabels = props.labels;\n    phylocanvas.current.alignLabels = props.align;\n    phylocanvas.current.lineWidth = props.lineWidth * getPixelRatio(phylocanvas.current.canvas) / 2;\n    phylocanvas.current.draw();\n  }, [props.labels, props.align, props.lineWidth]);\n  useEffect(() => {\n    phylocanvas.current.pairwiseOps.clusterDistance = props.clusterDistance;\n    phylocanvas.current.pairwiseOps.clusterSamples = props.clusterSamples;\n    console.log(phylocanvas.current);\n    phylocanvas.current.pairwiseOps.clusterDraw = true;\n    phylocanvas.current.draw();\n  }, [props.clusterDistance, props.clusterSamples]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"phylocanvas\",\n    style: {\n      height: heightRef.current + \"px\",\n      width: \"100%\",\n      minHeight: minHeight + \"px\",\n      minWidth: minWidth + \"px\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PhylocanvasView, \"9ogNFwCn8nJMMamT+BPgbM3fhDE=\");\n\n_c = PhylocanvasView;\nexport default PhylocanvasView;\n\nvar _c;\n\n$RefreshReg$(_c, \"PhylocanvasView\");","map":{"version":3,"sources":["/var/www/pathogen-intelligence.tgen.org/epitools/src/phylocanvas/Phylocanvas.js"],"names":["React","useEffect","useState","useRef","Phylocanvas","utils","scalebar","branchLength","root","pairwiseOps","treeStats","plugin","getPixelRatio","canvas","PhylocanvasView","props","phylocanvas","minHeight","minWidth","hw","_setHW","heightRef","widthRef","setHW","data","current","typeList","handleResize","heightChange","widthChange","Math","max","document","documentElement","clientHeight","window","innerHeight","getElementsByClassName","clientWidth","innerWidth","setTreeType","treeType","setNodeSize","nodeSize","setTextSize","textSize","lineWidth","initialSize","addEventListener","removeEventListener","createTree","load","tree","includes","type","showLabels","labels","alignLabels","align","draw","clusterDistance","clusterSamples","console","log","clusterDraw","height","width"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\nimport Phylocanvas, { utils } from \"phylocanvas\";\nimport scalebar from \"phylocanvas-plugin-scalebar\";\nimport branchLength from \"phylocanvas-plugin-branch-length\";\nimport root from \"phylocanvas-plugin-root\";\nimport pairwiseOps from \"phylocanvas-plugin-pairwise-ops\";\nimport treeStats from \"phylocanvas-plugin-tree-stats\";\nPhylocanvas.plugin(scalebar)\nPhylocanvas.plugin(branchLength)\nPhylocanvas.plugin(root)\nPhylocanvas.plugin(pairwiseOps)\nPhylocanvas.plugin(treeStats)\n\nconst { getPixelRatio } = utils.canvas;\n\nfunction PhylocanvasView(props) {\n  let phylocanvas = useRef();\n  let minHeight = 100\n  let minWidth = 100\n\n  // [height, width]\n  let [hw, _setHW] = useState([minHeight, minWidth])\n  let heightRef = useRef(hw[0])\n  let widthRef = useRef(hw[1])\n  let setHW = data => {\n    heightRef.current = data[0]\n    widthRef.current = data[1]\n    _setHW(data)\n  }\n\n  let typeList = useRef([\"radial\", \"rectangular\", \"circular\", \"diagonal\", \"hierarchical\"]);\n\n  //TODO: Fix height inheritance problem (relative height to window size without adding to window size for positive feedback loop)\n\n  useEffect(() => {\n    function handleResize() {\n      //setHeight(document.getElementsByClassName(\"Nav-body\")[0].clientHeight)\n      let heightChange = heightRef.current\n      let widthChange = widthRef.current\n      setHW([Math.max( Math.max( document.documentElement.clientHeight || 0, window.innerHeight || 0) - document.getElementsByClassName(\"Nav-header\")[0].clientHeight * 2, minHeight ), Math.max( document.documentElement.clientWidth || minWidth, window.innerWidth || minWidth, minWidth)])\n      heightChange = heightChange/heightRef.current\n      widthChange = widthChange/widthRef.current\n      phylocanvas.current.setTreeType(phylocanvas.current.treeType)\n      phylocanvas.current.setNodeSize(props.nodeSize * getPixelRatio(phylocanvas.current.canvas) / 2)\n      phylocanvas.current.setTextSize(props.textSize * getPixelRatio(phylocanvas.current.canvas) / 2)\n      phylocanvas.current.lineWidth = props.lineWidth * getPixelRatio(phylocanvas.current.canvas) / 2\n      if (phylocanvas.current.treeType == \"circular\") {\n      }\n      if (phylocanvas.current.treeType == \"rectangular\") {\n      }\n    }\n    function initialSize() {\n      //window.dispatchEvent(new Event('resize')) \n      //phylocanvas.current.setTreeType(phylocanvas.current.treeType)\n    } \n    window.addEventListener(\"resize\", handleResize);\n    //window.addEventListener(\"load\", initialSize);\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n      //window.removeEventListener(\"load\", initialSize);\n    };\n  }, [])\n\n  useEffect(() => {\n    phylocanvas.current = Phylocanvas.createTree(\"phylocanvas\")\n    setHW([Math.max( Math.max( document.documentElement.clientHeight || 0, window.innerHeight || 0) - document.getElementsByClassName(\"Nav-header\")[0].clientHeight * 2, minHeight ), Math.max( document.documentElement.clientWidth || minWidth, window.innerWidth || minWidth, minWidth)])\n  }, [])\n\n  useEffect(() => {\n    phylocanvas.current.load(props.tree)\n  }, [props.tree])\n\n  useEffect(() => {\n    if (typeList.current.includes(props.type)) {\n      phylocanvas.current.setTreeType(props.type)\n    } else {\n      phylocanvas.current.setTreeType(\"rectangular\")\n    }\n    phylocanvas.current.setNodeSize(props.nodeSize * getPixelRatio(phylocanvas.current.canvas) / 2)\n    phylocanvas.current.setTextSize(props.textSize * getPixelRatio(phylocanvas.current.canvas) / 2)\n    phylocanvas.current.lineWidth = props.lineWidth * getPixelRatio(phylocanvas.current.canvas) / 2\n }, [props.type])\n\n  useEffect(() => {\n    phylocanvas.current.setNodeSize(props.nodeSize * getPixelRatio(phylocanvas.current.canvas) / 2)\n  }, [props.nodeSize])\n\n  useEffect(() => {\n    phylocanvas.current.setTextSize(props.textSize * getPixelRatio(phylocanvas.current.canvas) / 2)\n  }, [props.textSize])\n\n  useEffect(() => {\n    phylocanvas.current.showLabels = props.labels\n    phylocanvas.current.alignLabels = props.align\n    phylocanvas.current.lineWidth = props.lineWidth * getPixelRatio(phylocanvas.current.canvas) / 2\n    phylocanvas.current.draw()\n  }, [props.labels, props.align, props.lineWidth])\n\n  useEffect(() => {\n    phylocanvas.current.pairwiseOps.clusterDistance = props.clusterDistance\n    phylocanvas.current.pairwiseOps.clusterSamples = props.clusterSamples\n    console.log(phylocanvas.current)\n    phylocanvas.current.pairwiseOps.clusterDraw = true\n    phylocanvas.current.draw()\n  }, [props.clusterDistance, props.clusterSamples])\n\n  return (\n    <div id=\"phylocanvas\" style={{height: heightRef.current + \"px\", width: \"100%\", minHeight: minHeight + \"px\", minWidth: minWidth + \"px\"}}></div>\n  )\n}\n\nexport default PhylocanvasView;\n"]},"metadata":{},"sourceType":"module"}