{"ast":null,"code":"import { Tree, utils } from 'phylocanvas';\nconst {\n  getPixelRatio\n} = utils.canvas;\nconst DEFAULTS = {\n  active: true,\n  width: 100,\n  height: 20,\n  fillStyle: 'black',\n  strokeStyle: 'black',\n  lineWidth: 1,\n  fontFamily: 'Sans-serif',\n  fontSize: 16,\n  textBaseline: 'bottom',\n  textAlign: 'center',\n  digits: 2,\n  position: {\n    bottom: 10,\n    left: 10\n  }\n};\nconst INVALID_HORIZONTAL_POSITION = 'Invalid horizontal position specified' + 'Supported values are `left`, `centre`, or `right`';\nconst INVALID_VERTICAL_POSITION = 'Invalid vertical position specified' + 'Supported values are `top`, `middle`, or `bottom`';\nconst LOG10 = Math.log(10);\n\nfunction drawRoot() {\n  const {\n    root,\n    zoom,\n    branchScalar\n  } = this;\n  const {\n    position\n  } = root;\n  const cxt = this.canvas;\n  const canvas = cxt.canvas;\n  const pixelRatio = getPixelRatio(cxt);\n  const width = pixelRatio * root.width;\n  const height = pixelRatio * root.height;\n  const lineWidth = pixelRatio * root.lineWidth;\n  const fontSize = pixelRatio * root.fontSize;\n  cxt.save();\n  cxt.fillStyle = root.fillStyle;\n  cxt.strokeStyle = root.strokeStyle;\n  cxt.lineWidth = lineWidth;\n\n  for (let branch in this.branches.filter(branch => branch.parent == null)) {\n    console.log(\"root\", branch);\n  }\n\n  cxt.restore();\n}\n\nexport default function plugin(decorate) {\n  decorate(this, 'createTree', (delegate, args) => {\n    const tree = delegate(...args);\n    const [, config = {}] = args;\n    tree.root = Object.assign({}, DEFAULTS, config.root || {});\n    return tree;\n  });\n  decorate(Tree, 'draw', function (delegate, args) {\n    delegate.apply(this, args);\n\n    if (this.root.active) {\n      drawRoot.apply(this);\n    }\n  });\n}","map":{"version":3,"sources":["/var/www/epitools/my_modules/phylocanvas-plugin-root/index.js"],"names":["Tree","utils","getPixelRatio","canvas","DEFAULTS","active","width","height","fillStyle","strokeStyle","lineWidth","fontFamily","fontSize","textBaseline","textAlign","digits","position","bottom","left","INVALID_HORIZONTAL_POSITION","INVALID_VERTICAL_POSITION","LOG10","Math","log","drawRoot","root","zoom","branchScalar","cxt","pixelRatio","save","branch","branches","filter","parent","console","restore","plugin","decorate","delegate","args","tree","config","Object","assign","apply"],"mappings":"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","sourcesContent":["import { Tree, utils } from 'phylocanvas';\n\nconst { getPixelRatio } = utils.canvas;\n\nconst DEFAULTS = {\n  active: true,\n  width: 100,\n  height: 20,\n  fillStyle: 'black',\n  strokeStyle: 'black',\n  lineWidth: 1,\n  fontFamily: 'Sans-serif',\n  fontSize: 16,\n  textBaseline: 'bottom',\n  textAlign: 'center',\n  digits: 2,\n  position: {\n    bottom: 10,\n    left: 10,\n  },\n};\n\nconst INVALID_HORIZONTAL_POSITION = 'Invalid horizontal position specified' +\n  'Supported values are `left`, `centre`, or `right`';\nconst INVALID_VERTICAL_POSITION = 'Invalid vertical position specified' +\n  'Supported values are `top`, `middle`, or `bottom`';\n\nconst LOG10 = Math.log(10);\n\nfunction drawRoot() {\n\n  const { root, zoom, branchScalar } = this;\n  const { position } = root;\n  const cxt = this.canvas;\n  const canvas = cxt.canvas;\n  const pixelRatio = getPixelRatio(cxt);\n  const width = pixelRatio * root.width;\n  const height = pixelRatio * root.height;\n  const lineWidth = pixelRatio * root.lineWidth;\n  const fontSize = pixelRatio * root.fontSize;\n\n  cxt.save();\n\n  cxt.fillStyle = root.fillStyle;\n  cxt.strokeStyle = root.strokeStyle;\n  cxt.lineWidth = lineWidth;\n\n  for (let branch in this.branches.filter(branch => branch.parent == null)) {\n    console.log(\"root\", branch)\n  }\n\n  cxt.restore();\n}\n\nexport default function plugin(decorate) {\n  decorate(this, 'createTree', (delegate, args) => {\n    const tree = delegate(...args);\n    const [ , config = {} ] = args;\n    tree.root = Object.assign({}, DEFAULTS, config.root || {});\n    return tree;\n  });\n  decorate(Tree, 'draw', function (delegate, args) {\n    delegate.apply(this, args);\n    if (this.root.active) {\n      drawRoot.apply(this);\n    }\n  });\n}\n"]},"metadata":{},"sourceType":"module"}