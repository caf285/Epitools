{"ast":null,"code":"import { Tree, utils } from 'phylocanvas';\nconst {\n  getPixelRatio\n} = utils.canvas;\nconst DEFAULTS = {\n  active: true\n};\n\nfunction addListeners() {\n  const tree = this;\n  const ctx = this.canvas;\n  const canvas = ctx.canvas;\n  const pixelRatio = getPixelRatio(ctx);\n\n  if (this.treeStats.active) {\n    //cleanup old event listeners\n    for (let eventListener of this.eventListeners.mousemove.filter(eventListener => eventListener.listener.name == \"treeStats\")) {\n      this.removeListener('mousemove', eventListener.listener, canvas);\n    }\n\n    console.log(this);\n\n    for (let leaf of this.leaves) {\n      this.addListener('mousemove', treeStats, canvas);\n\n      function treeStats(e) {\n        let path = new Path2D();\n        let x = (tree.offsetx + leaf.maxx * tree.zoom / 2) * pixelRatio;\n        let y = (tree.offsety + leaf.maxy * tree.zoom / 2) * pixelRatio;\n        let width = ctx.measureText(leaf.label).width * pixelRatio * tree.zoom / tree.zoomFactor;\n        let height = ctx.measureText(\"M\").width * pixelRatio * tree.zoom / tree.zoomFactor;\n        path.moveTo(x, y);\n        path.lineTo(x + width, y);\n        path.lineTo(x + width, y - height);\n        path.lineTo(x, y - height);\n        path.lineTo(x, y);\n        path.closePath();\n        ctx.stroke(path);\n\n        if (ctx.isPointInPath(path, e.offsetX, e.offsetY)) {\n          console.log(leaf);\n        }\n      }\n    }\n  }\n}\n\nexport default function plugin(decorate) {\n  decorate(this, 'createTree', (delegate, args) => {\n    const tree = delegate(...args);\n    const [, config = {}] = args;\n    tree.treeStats = Object.assign({}, DEFAULTS, config.treeStats || {});\n    return tree;\n  });\n  decorate(Tree, 'load', function (delegate, args) {\n    delegate.apply(this, args);\n    addListeners.apply(this);\n  });\n}","map":{"version":3,"sources":["/var/www/pathogen-intelligence.tgen.org/epitools/my_modules/phylocanvas-plugin-tree-stats/index.js"],"names":["Tree","utils","getPixelRatio","canvas","DEFAULTS","active","addListeners","tree","ctx","pixelRatio","treeStats","eventListener","eventListeners","mousemove","filter","listener","name","removeListener","console","log","leaf","leaves","addListener","e","path","Path2D","x","offsetx","maxx","zoom","y","offsety","maxy","width","measureText","label","zoomFactor","height","moveTo","lineTo","closePath","stroke","isPointInPath","offsetX","offsetY","plugin","decorate","delegate","args","config","Object","assign","apply"],"mappings":"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","sourcesContent":["import { Tree, utils } from 'phylocanvas';\n\nconst { getPixelRatio } = utils.canvas;\n\nconst DEFAULTS = {\n  active: true,\n};\n\nfunction addListeners() {\n  const tree = this\n  const ctx = this.canvas;\n  const canvas = ctx.canvas;\n  const pixelRatio = getPixelRatio(ctx);\n  if (this.treeStats.active) {\n      //cleanup old event listeners\n      for (let eventListener of this.eventListeners.mousemove.filter(eventListener => eventListener.listener.name == \"treeStats\")) {\n        this.removeListener('mousemove', eventListener.listener, canvas)\n      }\n      console.log(this)\n      for (let leaf of this.leaves) {\n        this.addListener('mousemove', treeStats, canvas)\n        function treeStats(e) {\n          let path = new Path2D()\n          let x = (tree.offsetx + leaf.maxx * tree.zoom / 2) * pixelRatio\n          let y = (tree.offsety + leaf.maxy * tree.zoom / 2) * pixelRatio\n          let width = ctx.measureText(leaf.label).width * pixelRatio * tree.zoom / tree.zoomFactor\n          let height = ctx.measureText(\"M\").width * pixelRatio * tree.zoom / tree.zoomFactor\n          path.moveTo(x, y)\n          path.lineTo(x + width, y)\n          path.lineTo(x + width, y - height)\n          path.lineTo(x, y - height)\n          path.lineTo(x, y)\n          path.closePath()\n          ctx.stroke(path)\n          if (ctx.isPointInPath(path, e.offsetX, e.offsetY)) {\n            console.log(leaf)\n          }\n        }\n      }\n  }\n}\n\nexport default function plugin(decorate) {\n  decorate(this, 'createTree', (delegate, args) => {\n    const tree = delegate(...args);\n    const [ , config = {} ] = args;\n    tree.treeStats = Object.assign({}, DEFAULTS, config.treeStats || {});\n    return tree;\n  });\n  decorate(Tree, 'load', function (delegate, args) {\n    delegate.apply(this, args);\n    addListeners.apply(this)\n  });\n}\n"]},"metadata":{},"sourceType":"module"}