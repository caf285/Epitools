{"ast":null,"code":"import { Tree, utils } from 'phylocanvas';\nconst {\n  getPixelRatio\n} = utils.canvas;\nconst DEFAULTS = {\n  active: true\n};\n\nfunction addListeners() {\n  const tree = this;\n  const ctx = this.canvas;\n  const canvas = ctx.canvas;\n  const pixelRatio = getPixelRatio(ctx);\n  const textSize = this.textSize * this.zoom / pixelRatio;\n\n  if (this.treeStats.active) {\n    //cleanup old event listeners\n    for (let eventListener of this.eventListeners.mousemove.filter(eventListener => eventListener.listener.name == \"treeStats\")) {\n      this.removeListener('mousemove', eventListener.listener, canvas);\n    }\n\n    console.log(this);\n\n    for (let leaf of this.leaves) {\n      this.addListener('mousemove', treeStats, canvas);\n\n      function treeStats(e) {\n        let path = new Path2D();\n        let x = (tree.offsetx + leaf.maxx * tree.zoom / pixelRatio) * pixelRatio;\n        let y = (tree.offsety + leaf.maxy * tree.zoom / pixelRatio) * pixelRatio;\n        ctx.save();\n        ctx.font = `${textSize * pixelRatio}px ${this.font}`;\n        let width = ctx.measureText(leaf.label).width * pixelRatio * tree.zoom / tree.zoomFactor;\n        ctx.restore();\n        let height = ctx.measureText(\"M\").width * pixelRatio * tree.zoom / tree.zoomFactor;\n        path.moveTo(x, y);\n        path.lineTo(x + width, y);\n        path.lineTo(x + width, y - height);\n        path.lineTo(x, y - height);\n        path.lineTo(x, y);\n        path.closePath();\n        ctx.stroke(path);\n\n        if (ctx.isPointInPath(path, e.offsetX * pixelRatio, e.offsetY * pixelRatio)) {\n          console.log(leaf.id);\n        }\n      }\n    }\n  }\n}\n\nexport default function plugin(decorate) {\n  decorate(this, 'createTree', (delegate, args) => {\n    const tree = delegate(...args);\n    const [, config = {}] = args;\n    tree.treeStats = Object.assign({}, DEFAULTS, config.treeStats || {});\n    return tree;\n  });\n  decorate(Tree, 'load', function (delegate, args) {\n    delegate.apply(this, args);\n    addListeners.apply(this);\n    let ctx = this.canvas;\n    this.addListener('mousemove', e => {\n      let path = new Path2D();\n      path.moveTo(0, 0);\n      path.lineTo(e.offsetX * getPixelRatio(ctx), e.offsetY * getPixelRatio(ctx));\n      path.closePath();\n      ctx.stroke(path);\n    });\n  });\n}","map":{"version":3,"sources":["/var/www/pathogen-intelligence.tgen.org/epitools/my_modules/phylocanvas-plugin-tree-stats/index.js"],"names":["Tree","utils","getPixelRatio","canvas","DEFAULTS","active","addListeners","tree","ctx","pixelRatio","textSize","zoom","treeStats","eventListener","eventListeners","mousemove","filter","listener","name","removeListener","console","log","leaf","leaves","addListener","e","path","Path2D","x","offsetx","maxx","y","offsety","maxy","save","font","width","measureText","label","zoomFactor","restore","height","moveTo","lineTo","closePath","stroke","isPointInPath","offsetX","offsetY","id","plugin","decorate","delegate","args","config","Object","assign","apply"],"mappings":"AAAA,SAASA,IAAT,EAAeC,KAAf,QAA4B,aAA5B;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAoBD,KAAK,CAACE,MAAhC;AAEA,MAAMC,QAAQ,GAAG;AACfC,EAAAA,MAAM,EAAE;AADO,CAAjB;;AAIA,SAASC,YAAT,GAAwB;AACtB,QAAMC,IAAI,GAAG,IAAb;AACA,QAAMC,GAAG,GAAG,KAAKL,MAAjB;AACA,QAAMA,MAAM,GAAGK,GAAG,CAACL,MAAnB;AACA,QAAMM,UAAU,GAAGP,aAAa,CAACM,GAAD,CAAhC;AACA,QAAME,QAAQ,GAAG,KAAKA,QAAL,GAAgB,KAAKC,IAArB,GAA4BF,UAA7C;;AACA,MAAI,KAAKG,SAAL,CAAeP,MAAnB,EAA2B;AACvB;AACA,SAAK,IAAIQ,aAAT,IAA0B,KAAKC,cAAL,CAAoBC,SAApB,CAA8BC,MAA9B,CAAqCH,aAAa,IAAIA,aAAa,CAACI,QAAd,CAAuBC,IAAvB,IAA+B,WAArF,CAA1B,EAA6H;AAC3H,WAAKC,cAAL,CAAoB,WAApB,EAAiCN,aAAa,CAACI,QAA/C,EAAyDd,MAAzD;AACD;;AACDiB,IAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;;AACA,SAAK,IAAIC,IAAT,IAAiB,KAAKC,MAAtB,EAA8B;AAC5B,WAAKC,WAAL,CAAiB,WAAjB,EAA8BZ,SAA9B,EAAyCT,MAAzC;;AACA,eAASS,SAAT,CAAmBa,CAAnB,EAAsB;AACpB,YAAIC,IAAI,GAAG,IAAIC,MAAJ,EAAX;AACA,YAAIC,CAAC,GAAG,CAACrB,IAAI,CAACsB,OAAL,GAAeP,IAAI,CAACQ,IAAL,GAAYvB,IAAI,CAACI,IAAjB,GAAwBF,UAAxC,IAAsDA,UAA9D;AACA,YAAIsB,CAAC,GAAG,CAACxB,IAAI,CAACyB,OAAL,GAAeV,IAAI,CAACW,IAAL,GAAY1B,IAAI,CAACI,IAAjB,GAAwBF,UAAxC,IAAsDA,UAA9D;AACAD,QAAAA,GAAG,CAAC0B,IAAJ;AACA1B,QAAAA,GAAG,CAAC2B,IAAJ,GAAY,GAAEzB,QAAQ,GAAGD,UAAW,MAAK,KAAK0B,IAAK,EAAnD;AACA,YAAIC,KAAK,GAAG5B,GAAG,CAAC6B,WAAJ,CAAgBf,IAAI,CAACgB,KAArB,EAA4BF,KAA5B,GAAoC3B,UAApC,GAAiDF,IAAI,CAACI,IAAtD,GAA6DJ,IAAI,CAACgC,UAA9E;AACA/B,QAAAA,GAAG,CAACgC,OAAJ;AACA,YAAIC,MAAM,GAAGjC,GAAG,CAAC6B,WAAJ,CAAgB,GAAhB,EAAqBD,KAArB,GAA6B3B,UAA7B,GAA0CF,IAAI,CAACI,IAA/C,GAAsDJ,IAAI,CAACgC,UAAxE;AACAb,QAAAA,IAAI,CAACgB,MAAL,CAAYd,CAAZ,EAAeG,CAAf;AACAL,QAAAA,IAAI,CAACiB,MAAL,CAAYf,CAAC,GAAGQ,KAAhB,EAAuBL,CAAvB;AACAL,QAAAA,IAAI,CAACiB,MAAL,CAAYf,CAAC,GAAGQ,KAAhB,EAAuBL,CAAC,GAAGU,MAA3B;AACAf,QAAAA,IAAI,CAACiB,MAAL,CAAYf,CAAZ,EAAeG,CAAC,GAAGU,MAAnB;AACAf,QAAAA,IAAI,CAACiB,MAAL,CAAYf,CAAZ,EAAeG,CAAf;AACAL,QAAAA,IAAI,CAACkB,SAAL;AACApC,QAAAA,GAAG,CAACqC,MAAJ,CAAWnB,IAAX;;AACA,YAAIlB,GAAG,CAACsC,aAAJ,CAAkBpB,IAAlB,EAAwBD,CAAC,CAACsB,OAAF,GAAYtC,UAApC,EAAgDgB,CAAC,CAACuB,OAAF,GAAYvC,UAA5D,CAAJ,EAA6E;AAC3EW,UAAAA,OAAO,CAACC,GAAR,CAAYC,IAAI,CAAC2B,EAAjB;AACD;AACF;AACF;AACJ;AACF;;AAED,eAAe,SAASC,MAAT,CAAgBC,QAAhB,EAA0B;AACvCA,EAAAA,QAAQ,CAAC,IAAD,EAAO,YAAP,EAAqB,CAACC,QAAD,EAAWC,IAAX,KAAoB;AAC/C,UAAM9C,IAAI,GAAG6C,QAAQ,CAAC,GAAGC,IAAJ,CAArB;AACA,UAAM,GAAIC,MAAM,GAAG,EAAb,IAAoBD,IAA1B;AACA9C,IAAAA,IAAI,CAACK,SAAL,GAAiB2C,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBpD,QAAlB,EAA4BkD,MAAM,CAAC1C,SAAP,IAAoB,EAAhD,CAAjB;AACA,WAAOL,IAAP;AACD,GALO,CAAR;AAMA4C,EAAAA,QAAQ,CAACnD,IAAD,EAAO,MAAP,EAAe,UAAUoD,QAAV,EAAoBC,IAApB,EAA0B;AAC/CD,IAAAA,QAAQ,CAACK,KAAT,CAAe,IAAf,EAAqBJ,IAArB;AACA/C,IAAAA,YAAY,CAACmD,KAAb,CAAmB,IAAnB;AACA,QAAIjD,GAAG,GAAG,KAAKL,MAAf;AACA,SAAKqB,WAAL,CAAiB,WAAjB,EAA+BC,CAAD,IAAO;AACnC,UAAIC,IAAI,GAAG,IAAIC,MAAJ,EAAX;AACAD,MAAAA,IAAI,CAACgB,MAAL,CAAY,CAAZ,EAAe,CAAf;AACAhB,MAAAA,IAAI,CAACiB,MAAL,CAAYlB,CAAC,CAACsB,OAAF,GAAY7C,aAAa,CAACM,GAAD,CAArC,EAA4CiB,CAAC,CAACuB,OAAF,GAAY9C,aAAa,CAACM,GAAD,CAArE;AACAkB,MAAAA,IAAI,CAACkB,SAAL;AACApC,MAAAA,GAAG,CAACqC,MAAJ,CAAWnB,IAAX;AACD,KAND;AAQD,GAZO,CAAR;AAaD","sourcesContent":["import { Tree, utils } from 'phylocanvas';\n\nconst { getPixelRatio } = utils.canvas;\n\nconst DEFAULTS = {\n  active: true,\n};\n\nfunction addListeners() {\n  const tree = this\n  const ctx = this.canvas;\n  const canvas = ctx.canvas;\n  const pixelRatio = getPixelRatio(ctx);\n  const textSize = this.textSize * this.zoom / pixelRatio\n  if (this.treeStats.active) {\n      //cleanup old event listeners\n      for (let eventListener of this.eventListeners.mousemove.filter(eventListener => eventListener.listener.name == \"treeStats\")) {\n        this.removeListener('mousemove', eventListener.listener, canvas)\n      }\n      console.log(this)\n      for (let leaf of this.leaves) {\n        this.addListener('mousemove', treeStats, canvas)\n        function treeStats(e) {\n          let path = new Path2D()\n          let x = (tree.offsetx + leaf.maxx * tree.zoom / pixelRatio) * pixelRatio\n          let y = (tree.offsety + leaf.maxy * tree.zoom / pixelRatio) * pixelRatio\n          ctx.save()\n          ctx.font = `${textSize * pixelRatio}px ${this.font}`;\n          let width = ctx.measureText(leaf.label).width * pixelRatio * tree.zoom / tree.zoomFactor\n          ctx.restore()\n          let height = ctx.measureText(\"M\").width * pixelRatio * tree.zoom / tree.zoomFactor\n          path.moveTo(x, y)\n          path.lineTo(x + width, y)\n          path.lineTo(x + width, y - height)\n          path.lineTo(x, y - height)\n          path.lineTo(x, y)\n          path.closePath()\n          ctx.stroke(path)\n          if (ctx.isPointInPath(path, e.offsetX * pixelRatio, e.offsetY * pixelRatio)) {\n            console.log(leaf.id)\n          }\n        }\n      }\n  }\n}\n\nexport default function plugin(decorate) {\n  decorate(this, 'createTree', (delegate, args) => {\n    const tree = delegate(...args);\n    const [ , config = {} ] = args;\n    tree.treeStats = Object.assign({}, DEFAULTS, config.treeStats || {});\n    return tree;\n  });\n  decorate(Tree, 'load', function (delegate, args) {\n    delegate.apply(this, args);\n    addListeners.apply(this)\n    let ctx = this.canvas\n    this.addListener('mousemove', (e) => {\n      let path = new Path2D()\n      path.moveTo(0, 0)\n      path.lineTo(e.offsetX * getPixelRatio(ctx), e.offsetY * getPixelRatio(ctx))\n      path.closePath()\n      ctx.stroke(path)\n    })\n\n  });\n}\n"]},"metadata":{},"sourceType":"module"}