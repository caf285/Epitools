{"ast":null,"code":"import { Tree, utils } from 'phylocanvas';\nconst {\n  getPixelRatio\n} = utils.canvas;\nconst DEFAULTS = {\n  active: true,\n  pairwiseMatrix: {},\n  clusterActive: true,\n  clusterDraw: true,\n  clusterMatrix: [],\n  clusterMaxDistance: 20,\n  clusterDistance: 3,\n  clusterSamples: 3,\n  clusterTest: () => {\n    buildClusterMatrix();\n  }\n};\n\nfunction walkMatrix(tree, start, node, walked, distance, max) {\n  walked.push(node);\n\n  if (distance >= max) {\n    return;\n  }\n\n  if (node !== start && node.leaf === true) {\n    tree.pairwiseOps.pairwiseMatrix[start.id].push([node.id, distance]);\n  }\n\n  for (let child of node.children) {\n    if (!walked.includes(child)) {\n      let newDistance = distance + child.branchLength;\n      newDistance = parseFloat(newDistance.toFixed(10));\n      walkMatrix(tree, start, child, walked, newDistance, max);\n    }\n  }\n\n  if (node.parent && !walked.includes(node.parent)) {\n    let newDistance = distance + node.branchLength;\n    newDistance = parseFloat(newDistance.toFixed(10));\n    walkMatrix(tree, start, node.parent, walked, newDistance, max);\n  }\n}\n\nfunction buildPairwiseMatrix() {\n  for (let leaf of this.leaves) {\n    this.pairwiseOps.pairwiseMatrix[leaf.id] = [];\n    walkMatrix(this, leaf, leaf, [], 0, this.pairwiseOps.clusterMaxDistance);\n  }\n}\n\nfunction buildClusterMatrix() {\n  console.log(this.pairwiseOps.pairwiseMatrix);\n\n  for (let leaf in this.pairwiseOps.pairwiseMatrix) {\n    let cluster = [leaf];\n\n    for (let node of this.pairwiseOps.pairwiseMatrix[leaf]) {\n      if (node[1] <= this.pairwiseOps.clusterDistance) {\n        cluster.push(node[0]);\n      }\n    }\n\n    if (cluster.length >= this.pairwiseOps.clusterSamples) {\n      this.pairwiseOps.clusterMatrix.push(cluster);\n    }\n  }\n}\n\nfunction colorNode() {\n  for (let cluster of this.pairwiseOps.clusterMatrix) {\n    for (let leaf of cluster) {\n      this.leaves.filter(x => x.id === leaf)[0].setDisplay({\n        colour: 'red'\n      });\n    }\n  }\n\n  this.draw();\n}\n\nexport default function plugin(decorate) {\n  decorate(this, 'createTree', (delegate, args) => {\n    const tree = delegate(...args);\n    const [, config = {}] = args;\n    tree.pairwiseOps = Object.assign({}, DEFAULTS, config.pairwiseOps || {});\n    return tree;\n  });\n  decorate(Tree, 'load', function (delegate, args) {\n    delegate.apply(this, args);\n\n    if (this.pairwiseOps.active) {\n      buildPairwiseMatrix.apply(this);\n\n      if (this.pairwiseOps.clusterActive) {\n        this.pairwiseOps.clusterDraw = true;\n      }\n    }\n  });\n  decorate(Tree, 'draw', function (delegate, args) {\n    delegate.apply(this, args);\n\n    if (this.pairwiseOps.clusterActive) {\n      if (this.pairwiseOps.clusterDraw) {\n        this.pairwiseOps.clusterDraw = false;\n        buildClusterMatrix.apply(this);\n        colorNode.apply(this);\n      }\n    }\n  });\n}","map":{"version":3,"sources":["/var/www/pathogen-intelligence.tgen.org/epitools/my_modules/phylocanvas-plugin-pairwise-ops/index.js"],"names":["Tree","utils","getPixelRatio","canvas","DEFAULTS","active","pairwiseMatrix","clusterActive","clusterDraw","clusterMatrix","clusterMaxDistance","clusterDistance","clusterSamples","clusterTest","buildClusterMatrix","walkMatrix","tree","start","node","walked","distance","max","push","leaf","pairwiseOps","id","child","children","includes","newDistance","branchLength","parseFloat","toFixed","parent","buildPairwiseMatrix","leaves","console","log","cluster","length","colorNode","filter","x","setDisplay","colour","draw","plugin","decorate","delegate","args","config","Object","assign","apply"],"mappings":"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","sourcesContent":["import { Tree, utils } from 'phylocanvas';\n\nconst { getPixelRatio } = utils.canvas;\n\nconst DEFAULTS = {\n  active: true,\n  pairwiseMatrix: {},\n  clusterActive: true,\n  clusterDraw: true,\n  clusterMatrix: [],\n  clusterMaxDistance: 20,\n  clusterDistance: 3,\n  clusterSamples: 3,\n  clusterTest: () => {buildClusterMatrix()},\n};\n\nfunction walkMatrix(tree, start, node, walked, distance, max) {\n  walked.push(node)\n\n  if (distance >= max) {\n    return\n  }\n  if (node !== start && node.leaf === true) {\n    tree.pairwiseOps.pairwiseMatrix[start.id].push([node.id, distance])\n  }\n  for (let child of node.children) {\n    if (! walked.includes(child)) {\n      let newDistance = distance + child.branchLength\n      newDistance = parseFloat(newDistance.toFixed(10))\n      walkMatrix(tree, start, child, walked, newDistance, max)\n    }\n  }\n  if (node.parent && ! walked.includes(node.parent)) {\n    let newDistance = distance + node.branchLength\n    newDistance = parseFloat(newDistance.toFixed(10))\n    walkMatrix(tree, start, node.parent, walked, newDistance, max)\n  }\n}\n\nfunction buildPairwiseMatrix() {\n  for (let leaf of this.leaves) {\n    this.pairwiseOps.pairwiseMatrix[leaf.id] = []\n    walkMatrix(this, leaf, leaf, [], 0, this.pairwiseOps.clusterMaxDistance)\n  }\n}\n\nfunction buildClusterMatrix() {\n  console.log(this.pairwiseOps.pairwiseMatrix)\n  for (let leaf in this.pairwiseOps.pairwiseMatrix) {\n    let cluster = [leaf]\n    for (let node of this.pairwiseOps.pairwiseMatrix[leaf]) {\n      if (node[1] <= this.pairwiseOps.clusterDistance) {\n        cluster.push(node[0])\n      }\n    }\n    if (cluster.length >= this.pairwiseOps.clusterSamples) {\n      this.pairwiseOps.clusterMatrix.push(cluster)\n    }\n  }\n}\n\nfunction colorNode() {\n  for (let cluster of this.pairwiseOps.clusterMatrix) {\n    for (let leaf of cluster) {\n      this.leaves.filter(x => x.id === leaf)[0].setDisplay({\n        colour: 'red',\n      })\n    }\n  }\n  this.draw()\n}\n\nexport default function plugin(decorate) {\n  decorate(this, 'createTree', (delegate, args) => {\n    const tree = delegate(...args);\n    const [ , config = {} ] = args;\n    tree.pairwiseOps = Object.assign({}, DEFAULTS, config.pairwiseOps || {});\n    return tree;\n  });\n  decorate(Tree, 'load', function (delegate, args) {\n    delegate.apply(this, args);\n    if (this.pairwiseOps.active) {\n      buildPairwiseMatrix.apply(this);\n      if (this.pairwiseOps.clusterActive) {\n        this.pairwiseOps.clusterDraw = true;\n      }\n    }   \n  });\n  decorate(Tree, 'draw', function (delegate, args) {\n    delegate.apply(this, args);\n    if (this.pairwiseOps.clusterActive) {\n      if (this.pairwiseOps.clusterDraw) {\n        this.pairwiseOps.clusterDraw = false;\n        buildClusterMatrix.apply(this);\n        colorNode.apply(this)\n      }\n    }\n  });\n}\n"]},"metadata":{},"sourceType":"module"}