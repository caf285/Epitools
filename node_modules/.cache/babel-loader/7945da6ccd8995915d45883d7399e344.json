{"ast":null,"code":"import { Tree, utils } from 'phylocanvas';\nconst {\n  getPixelRatio\n} = utils.canvas;\nconst DEFAULTS = {\n  active: true\n};\n\nfunction drawBranchLength() {\n  const {\n    branchLength\n  } = this;\n  const cxt = this.canvas;\n  const canvas = cxt.canvas;\n  const pixelRatio = getPixelRatio(cxt);\n  const textSize = this.textSize * this.zoom / 2 * pixelRatio;\n  const pi = 3.141592653589793;\n  cxt.save();\n  cxt.font = `${textSize}px ${this.font}`;\n  cxt.fillStyle = this.branchColour;\n  cxt.textBaseline = \"bottom\";\n  cxt.textAlign = \"center\";\n\n  for (let branch in this.branches) {\n    if (this.branches[branch].branchLength == 0) {\n      continue;\n    }\n\n    branch = this.branches[branch];\n    let x = (this.offsetx + (branch.startx + (branch.centerx - branch.startx) / 2) * this.zoom / 2) * pixelRatio;\n    let y = (this.offsety + (branch.starty + (branch.centery - branch.starty) / 2) * this.zoom / 2) * pixelRatio;\n\n    if (this.treeType == \"rectangular\") {\n      y = (this.offsety + branch.centery * this.zoom / 2) * pixelRatio;\n    } else if (pi * 1 / 4 < branch.angle && branch.angle < pi * 3 / 4 || pi + pi * 1 / 4 < branch.angle && branch.angle < pi + pi * 3 / 4) {\n      x = (this.offsetx + textSize + branch.centerx * this.zoom / 2) * pixelRatio;\n      y += textSize;\n    }\n\n    cxt.fillText(branch.branchLength, x, y);\n  }\n\n  cxt.restore();\n}\n\nexport default function plugin(decorate) {\n  decorate(this, 'createTree', (delegate, args) => {\n    const tree = delegate(...args);\n    const [, config = {}] = args;\n    tree.branchLength = Object.assign({}, DEFAULTS, config.branchLength || {});\n    return tree;\n  });\n  decorate(Tree, 'draw', function (delegate, args) {\n    delegate.apply(this, args);\n\n    if (this.branchLength.active) {\n      drawBranchLength.apply(this);\n    }\n  });\n}","map":{"version":3,"sources":["/var/www/epitools/my_modules/phylocanvas-plugin-branch-length/index.js"],"names":["Tree","utils","getPixelRatio","canvas","DEFAULTS","active","drawBranchLength","branchLength","cxt","pixelRatio","textSize","zoom","pi","save","font","fillStyle","branchColour","textBaseline","textAlign","branch","branches","x","offsetx","startx","centerx","y","offsety","starty","centery","treeType","angle","fillText","restore","plugin","decorate","delegate","args","tree","config","Object","assign","apply"],"mappings":"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","sourcesContent":["import { Tree, utils } from 'phylocanvas';\n\nconst { getPixelRatio } = utils.canvas;\n\nconst DEFAULTS = {\n  active: true,\n};\n\nfunction drawBranchLength() {\n\n  const { branchLength } = this;\n  const cxt = this.canvas;\n  const canvas = cxt.canvas;\n  const pixelRatio = getPixelRatio(cxt);\n  const textSize = this.textSize * this.zoom / 2  * pixelRatio\n  const pi = 3.141592653589793\n\n  cxt.save();\n\n  cxt.font = `${textSize}px ${this.font}`;\n  cxt.fillStyle = this.branchColour;\n  cxt.textBaseline = \"bottom\";\n  cxt.textAlign = \"center\";\n\n  for (let branch in this.branches) {\n    if (this.branches[branch].branchLength == 0) {\n      continue\n    }\n    branch = this.branches[branch]\n    let x = (this.offsetx + (branch.startx + (branch.centerx - branch.startx) / 2) * this.zoom / 2) * pixelRatio\n    let y = (this.offsety + (branch.starty + (branch.centery - branch.starty) / 2) * this.zoom / 2) * pixelRatio\n    if (this.treeType == \"rectangular\") {\n      y = (this.offsety + branch.centery * this.zoom / 2) * pixelRatio\n    } else if (pi * 1 / 4 < branch.angle && branch.angle < pi * 3 / 4 || pi + pi * 1 / 4 < branch.angle && branch.angle < pi + pi * 3 / 4) {\n      x = (this.offsetx + textSize + branch.centerx * this.zoom / 2) * pixelRatio\n      y += textSize\n    }\n    cxt.fillText(branch.branchLength, x, y)\n  }\n\n  cxt.restore();\n}\n\nexport default function plugin(decorate) {\n  decorate(this, 'createTree', (delegate, args) => {\n    const tree = delegate(...args);\n    const [ , config = {} ] = args;\n    tree.branchLength = Object.assign({}, DEFAULTS, config.branchLength || {});\n    return tree;\n  });\n  decorate(Tree, 'draw', function (delegate, args) {\n    delegate.apply(this, args);\n    if (this.branchLength.active) {\n      drawBranchLength.apply(this);\n    }\n  });\n}\n"]},"metadata":{},"sourceType":"module"}