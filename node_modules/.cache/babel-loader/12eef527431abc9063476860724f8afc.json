{"ast":null,"code":"import { Tree, utils } from 'phylocanvas';\nconst {\n  getPixelRatio\n} = utils.canvas;\nconst DEFAULTS = {\n  active: true,\n  pairwiseMatrix: {}\n};\n\nfunction walkMatrix(tree, start, node, walked, distance) {\n  distance += node.branchLength;\n  distance = parseFloat(distance.toFixed(10));\n  walked.push(node);\n\n  if (node != start && node.children.length == 0) {\n    console.log(start.id, node.id, distance);\n    console.log(tree.pairwiseOps.pairwiseMatrix);\n    tree.pairwiseOps.pairwiseMatrix[start].push([node, distance]); //pairwiseMatrix[leaf].push([node, distance])\n  }\n\n  for (let child of node.children) {\n    if (!walked.includes(child)) {\n      walkMatrix(tree, start, child, walked, distance);\n    }\n  }\n\n  if (node.parent && !walked.includes(node.parent)) {\n    walkMatrix(tree, start, node.parent, walked, distance);\n  }\n}\n\nfunction buildPairwiseMatrix() {\n  console.log(this.leaves);\n\n  for (let leaf of this.leaves) {\n    this.pairwiseOps.pairwiseMatrix[leaf] = [];\n    walkMatrix(this, leaf, leaf, [], 0);\n  }\n\n  console.log(this);\n  console.log(this.pairwiseOps.pairwiseMatrix);\n}\n\nexport default function plugin(decorate) {\n  decorate(this, 'createTree', (delegate, args) => {\n    const tree = delegate(...args);\n    const [, config = {}] = args;\n    tree.pairwiseOps = Object.assign({}, DEFAULTS, config.pairwiseOps || {});\n    return tree;\n  });\n  decorate(Tree, 'load', function (delegate, args) {\n    delegate.apply(this, args);\n\n    if (this.pairwiseOps.active) {\n      buildPairwiseMatrix.apply(this);\n    }\n  });\n}","map":{"version":3,"sources":["/var/www/epitools/my_modules/phylocanvas-plugin-pairwise-ops/index.js"],"names":["Tree","utils","getPixelRatio","canvas","DEFAULTS","active","pairwiseMatrix","walkMatrix","tree","start","node","walked","distance","branchLength","parseFloat","toFixed","push","children","length","console","log","id","pairwiseOps","child","includes","parent","buildPairwiseMatrix","leaves","leaf","plugin","decorate","delegate","args","config","Object","assign","apply"],"mappings":"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","sourcesContent":["import { Tree, utils } from 'phylocanvas';\n\nconst { getPixelRatio } = utils.canvas;\n\nconst DEFAULTS = {\n  active: true,\n  pairwiseMatrix: {},\n};\n\nfunction walkMatrix(tree, start, node, walked, distance) {\n  distance += node.branchLength\n  distance = parseFloat(distance.toFixed(10))\n  walked.push(node)\n\n  if (node != start && node.children.length == 0) {\n    console.log(start.id, node.id, distance)\n    console.log(tree.pairwiseOps.pairwiseMatrix)\n    tree.pairwiseOps.pairwiseMatrix[start].push([node, distance])\n    //pairwiseMatrix[leaf].push([node, distance])\n  }\n\n  for (let child of node.children) {\n    if (! walked.includes(child)) {\n      walkMatrix(tree, start, child, walked, distance)\n    }\n  }\n  if (node.parent && ! walked.includes(node.parent)) {\n    walkMatrix(tree, start, node.parent, walked, distance)\n  }\n}\n\nfunction buildPairwiseMatrix() {\n  console.log(this.leaves)\n  for (let leaf of this.leaves) {\n    this.pairwiseOps.pairwiseMatrix[leaf] = []\n    walkMatrix(this, leaf, leaf, [], 0)\n  }\n  console.log(this)\n  console.log(this.pairwiseOps.pairwiseMatrix)\n}\n\nexport default function plugin(decorate) {\n  decorate(this, 'createTree', (delegate, args) => {\n    const tree = delegate(...args);\n    const [ , config = {} ] = args;\n    tree.pairwiseOps = Object.assign({}, DEFAULTS, config.pairwiseOps || {});\n    return tree;\n  });\n  decorate(Tree, 'load', function (delegate, args) {\n    delegate.apply(this, args);\n    if (this.pairwiseOps.active) {\n      buildPairwiseMatrix.apply(this);\n    }   \n  });\n}\n"]},"metadata":{},"sourceType":"module"}