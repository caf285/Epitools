{"ast":null,"code":"import { Tree, utils } from 'phylocanvas';\nconst {\n  getPixelRatio\n} = utils.canvas;\nconst DEFAULTS = {\n  active: true\n};\n\nfunction lineCoord() {}\n\nfunction addListeners() {\n  const cxt = this.canvas;\n  const canvas = cxt.canvas;\n  const pixelRatio = getPixelRatio(cxt);\n  const textSize = this.textSize * this.zoom / 2;\n\n  if (this.treeStats.active) {\n    for (let leaf of this.leaves) {\n      this.addListener('mousemove', function poo(e) {\n        let path = new Path2D();\n        let x = (this.offsetx + leaf.maxx * this.zoom / 2) * pixelRatio;\n        let y = (this.offsety + leaf.maxy * this.zoom / 2) * pixelRatio;\n        path.moveTo(x, y);\n        path.lineTo(x + 600, y);\n        path.lineTo(x + 600, y + 30);\n        path.lineTo(x, y + 30);\n        path.lineTo(x, y);\n        path.closePath();\n        cxt.stroke(path);\n\n        if (this.canvas.isPointInPath(path, e.offsetX, e.offsetY)) {}\n      }, canvas);\n    }\n  }\n}\n\nexport default function plugin(decorate) {\n  decorate(this, 'createTree', (delegate, args) => {\n    const tree = delegate(...args);\n    const [, config = {}] = args;\n    tree.treeStats = Object.assign({}, DEFAULTS, config.treeStats || {});\n    return tree;\n  });\n  decorate(Tree, 'load', function (delegate, args) {\n    delegate.apply(this, args);\n    this.removeListener();\n    addListeners.apply(this);\n  });\n}","map":{"version":3,"sources":["/var/www/pathogen-intelligence.tgen.org/epitools/my_modules/phylocanvas-plugin-tree-stats/index.js"],"names":["Tree","utils","getPixelRatio","canvas","DEFAULTS","active","lineCoord","addListeners","cxt","pixelRatio","textSize","zoom","treeStats","leaf","leaves","addListener","poo","e","path","Path2D","x","offsetx","maxx","y","offsety","maxy","moveTo","lineTo","closePath","stroke","isPointInPath","offsetX","offsetY","plugin","decorate","delegate","args","tree","config","Object","assign","apply","removeListener"],"mappings":"AAAA,SAASA,IAAT,EAAeC,KAAf,QAA4B,aAA5B;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAoBD,KAAK,CAACE,MAAhC;AAEA,MAAMC,QAAQ,GAAG;AACfC,EAAAA,MAAM,EAAE;AADO,CAAjB;;AAIA,SAASC,SAAT,GAAqB,CAEpB;;AAED,SAASC,YAAT,GAAwB;AACtB,QAAMC,GAAG,GAAG,KAAKL,MAAjB;AACA,QAAMA,MAAM,GAAGK,GAAG,CAACL,MAAnB;AACA,QAAMM,UAAU,GAAGP,aAAa,CAACM,GAAD,CAAhC;AACA,QAAME,QAAQ,GAAG,KAAKA,QAAL,GAAgB,KAAKC,IAArB,GAA4B,CAA7C;;AACA,MAAI,KAAKC,SAAL,CAAeP,MAAnB,EAA2B;AACvB,SAAK,IAAIQ,IAAT,IAAiB,KAAKC,MAAtB,EAA8B;AAC5B,WAAKC,WAAL,CAAiB,WAAjB,EAA8B,SAASC,GAAT,CAAaC,CAAb,EAAgB;AAC5C,YAAIC,IAAI,GAAG,IAAIC,MAAJ,EAAX;AACA,YAAIC,CAAC,GAAG,CAAC,KAAKC,OAAL,GAAeR,IAAI,CAACS,IAAL,GAAY,KAAKX,IAAjB,GAAwB,CAAxC,IAA6CF,UAArD;AACA,YAAIc,CAAC,GAAG,CAAC,KAAKC,OAAL,GAAeX,IAAI,CAACY,IAAL,GAAY,KAAKd,IAAjB,GAAwB,CAAxC,IAA6CF,UAArD;AACAS,QAAAA,IAAI,CAACQ,MAAL,CAAYN,CAAZ,EAAeG,CAAf;AACAL,QAAAA,IAAI,CAACS,MAAL,CAAYP,CAAC,GAAG,GAAhB,EAAqBG,CAArB;AACAL,QAAAA,IAAI,CAACS,MAAL,CAAYP,CAAC,GAAG,GAAhB,EAAqBG,CAAC,GAAG,EAAzB;AACAL,QAAAA,IAAI,CAACS,MAAL,CAAYP,CAAZ,EAAeG,CAAC,GAAG,EAAnB;AACAL,QAAAA,IAAI,CAACS,MAAL,CAAYP,CAAZ,EAAeG,CAAf;AACAL,QAAAA,IAAI,CAACU,SAAL;AACEpB,QAAAA,GAAG,CAACqB,MAAJ,CAAWX,IAAX;;AACF,YAAI,KAAKf,MAAL,CAAY2B,aAAZ,CAA0BZ,IAA1B,EAAgCD,CAAC,CAACc,OAAlC,EAA2Cd,CAAC,CAACe,OAA7C,CAAJ,EAA2D,CAC1D;AACF,OAbD,EAaG7B,MAbH;AAcD;AACJ;AACF;;AAED,eAAe,SAAS8B,MAAT,CAAgBC,QAAhB,EAA0B;AACvCA,EAAAA,QAAQ,CAAC,IAAD,EAAO,YAAP,EAAqB,CAACC,QAAD,EAAWC,IAAX,KAAoB;AAC/C,UAAMC,IAAI,GAAGF,QAAQ,CAAC,GAAGC,IAAJ,CAArB;AACA,UAAM,GAAIE,MAAM,GAAG,EAAb,IAAoBF,IAA1B;AACAC,IAAAA,IAAI,CAACzB,SAAL,GAAiB2B,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBpC,QAAlB,EAA4BkC,MAAM,CAAC1B,SAAP,IAAoB,EAAhD,CAAjB;AACA,WAAOyB,IAAP;AACD,GALO,CAAR;AAMAH,EAAAA,QAAQ,CAAClC,IAAD,EAAO,MAAP,EAAe,UAAUmC,QAAV,EAAoBC,IAApB,EAA0B;AAC/CD,IAAAA,QAAQ,CAACM,KAAT,CAAe,IAAf,EAAqBL,IAArB;AACA,SAAKM,cAAL;AACAnC,IAAAA,YAAY,CAACkC,KAAb,CAAmB,IAAnB;AACD,GAJO,CAAR;AAKD","sourcesContent":["import { Tree, utils } from 'phylocanvas';\n\nconst { getPixelRatio } = utils.canvas;\n\nconst DEFAULTS = {\n  active: true,\n};\n\nfunction lineCoord() {\n\n}\n\nfunction addListeners() {\n  const cxt = this.canvas;\n  const canvas = cxt.canvas;\n  const pixelRatio = getPixelRatio(cxt);\n  const textSize = this.textSize * this.zoom / 2 \n  if (this.treeStats.active) {\n      for (let leaf of this.leaves) {\n        this.addListener('mousemove', function poo(e) {\n          let path = new Path2D()\n          let x = (this.offsetx + leaf.maxx * this.zoom / 2) * pixelRatio\n          let y = (this.offsety + leaf.maxy * this.zoom / 2) * pixelRatio\n          path.moveTo(x, y)\n          path.lineTo(x + 600, y)\n          path.lineTo(x + 600, y + 30)\n          path.lineTo(x, y + 30)\n          path.lineTo(x, y)\n          path.closePath()\n            cxt.stroke(path)\n          if (this.canvas.isPointInPath(path, e.offsetX, e.offsetY)) {\n          }\n        }, canvas)\n      }\n  }\n}\n\nexport default function plugin(decorate) {\n  decorate(this, 'createTree', (delegate, args) => {\n    const tree = delegate(...args);\n    const [ , config = {} ] = args;\n    tree.treeStats = Object.assign({}, DEFAULTS, config.treeStats || {});\n    return tree;\n  });\n  decorate(Tree, 'load', function (delegate, args) {\n    delegate.apply(this, args);\n    this.removeListener()\n    addListeners.apply(this)\n  });\n}\n"]},"metadata":{},"sourceType":"module"}