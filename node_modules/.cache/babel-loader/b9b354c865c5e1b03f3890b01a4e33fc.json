{"ast":null,"code":"var _jsxFileName = \"/var/www/epitools/src/phylocanvas/Phylocanvas.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef } from \"react\";\nimport Phylocanvas from \"phylocanvas\";\nimport scalebar from \"phylocanvas-plugin-scalebar\";\nimport branchLength from \"phylocanvas-plugin-branch-length\";\nimport root from \"phylocanvas-plugin-root\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nPhylocanvas.plugin(scalebar);\nPhylocanvas.plugin(branchLength);\nPhylocanvas.plugin(root);\n\nfunction PhylocanvasView(props) {\n  _s();\n\n  let phylocanvas = useRef();\n  let typeList = useRef([\"radial\", \"rectangular\", \"circular\", \"diagonal\", \"hierarchical\"]);\n  useEffect(() => {\n    phylocanvas.current = Phylocanvas.createTree(\"phylocanvas\");\n    console.log(phylocanvas.current);\n  }, []);\n  useEffect(() => {\n    phylocanvas.current.load(props.tree);\n  }, [props.tree]);\n  useEffect(() => {\n    if (typeList.current.includes(props.type)) {\n      phylocanvas.current.setTreeType(props.type);\n    } else {\n      phylocanvas.current.setTreeType(\"circular\");\n    }\n  }, [props.type]);\n  useEffect(() => {\n    phylocanvas.current.showLabels = props.labels;\n    phylocanvas.current.alignLabels = props.align;\n    phylocanvas.current.setNodeSize(props.nodeSize);\n    phylocanvas.current.setTextSize(props.textSize);\n    phylocanvas.current.lineWidth = props.lineWidth;\n    phylocanvas.current.draw();\n  }, [props.type, props.labels, props.align, props.nodeSize, props.textSize, props.lineWidth]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"phylocanvas\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PhylocanvasView, \"dSEtlhw9IjmYonjwNu6sHbHx4ig=\");\n\n_c = PhylocanvasView;\nexport default PhylocanvasView;\n\nvar _c;\n\n$RefreshReg$(_c, \"PhylocanvasView\");","map":{"version":3,"sources":["/var/www/epitools/src/phylocanvas/Phylocanvas.js"],"names":["React","useEffect","useRef","Phylocanvas","scalebar","branchLength","root","plugin","PhylocanvasView","props","phylocanvas","typeList","current","createTree","console","log","load","tree","includes","type","setTreeType","showLabels","labels","alignLabels","align","setNodeSize","nodeSize","setTextSize","textSize","lineWidth","draw"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,QAAyC,OAAzC;AACA,OAAOC,WAAP,MAAwB,aAAxB;AACA,OAAOC,QAAP,MAAqB,6BAArB;AACA,OAAOC,YAAP,MAAyB,kCAAzB;AACA,OAAOC,IAAP,MAAiB,yBAAjB;;AACAH,WAAW,CAACI,MAAZ,CAAmBH,QAAnB;AACAD,WAAW,CAACI,MAAZ,CAAmBF,YAAnB;AACAF,WAAW,CAACI,MAAZ,CAAmBD,IAAnB;;AAEA,SAASE,eAAT,CAAyBC,KAAzB,EAAgC;AAAA;;AAC9B,MAAIC,WAAW,GAAGR,MAAM,EAAxB;AACA,MAAIS,QAAQ,GAAGT,MAAM,CAAC,CAAC,QAAD,EAAW,aAAX,EAA0B,UAA1B,EAAsC,UAAtC,EAAkD,cAAlD,CAAD,CAArB;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,WAAW,CAACE,OAAZ,GAAsBT,WAAW,CAACU,UAAZ,CAAuB,aAAvB,CAAtB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYL,WAAW,CAACE,OAAxB;AACD,GAHQ,EAGN,EAHM,CAAT;AAKAX,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,WAAW,CAACE,OAAZ,CAAoBI,IAApB,CAAyBP,KAAK,CAACQ,IAA/B;AACD,GAFQ,EAEN,CAACR,KAAK,CAACQ,IAAP,CAFM,CAAT;AAIAhB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIU,QAAQ,CAACC,OAAT,CAAiBM,QAAjB,CAA0BT,KAAK,CAACU,IAAhC,CAAJ,EAA2C;AACzCT,MAAAA,WAAW,CAACE,OAAZ,CAAoBQ,WAApB,CAAgCX,KAAK,CAACU,IAAtC;AACD,KAFD,MAEO;AACLT,MAAAA,WAAW,CAACE,OAAZ,CAAoBQ,WAApB,CAAgC,UAAhC;AACD;AACF,GANQ,EAMN,CAACX,KAAK,CAACU,IAAP,CANM,CAAT;AAQAlB,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,WAAW,CAACE,OAAZ,CAAoBS,UAApB,GAAiCZ,KAAK,CAACa,MAAvC;AACAZ,IAAAA,WAAW,CAACE,OAAZ,CAAoBW,WAApB,GAAkCd,KAAK,CAACe,KAAxC;AACAd,IAAAA,WAAW,CAACE,OAAZ,CAAoBa,WAApB,CAAgChB,KAAK,CAACiB,QAAtC;AACAhB,IAAAA,WAAW,CAACE,OAAZ,CAAoBe,WAApB,CAAgClB,KAAK,CAACmB,QAAtC;AACAlB,IAAAA,WAAW,CAACE,OAAZ,CAAoBiB,SAApB,GAAgCpB,KAAK,CAACoB,SAAtC;AACAnB,IAAAA,WAAW,CAACE,OAAZ,CAAoBkB,IAApB;AACD,GAPQ,EAON,CAACrB,KAAK,CAACU,IAAP,EAAaV,KAAK,CAACa,MAAnB,EAA2Bb,KAAK,CAACe,KAAjC,EAAwCf,KAAK,CAACiB,QAA9C,EAAwDjB,KAAK,CAACmB,QAA9D,EAAwEnB,KAAK,CAACoB,SAA9E,CAPM,CAAT;AASA,sBACE;AAAK,IAAA,EAAE,EAAC;AAAR;AAAA;AAAA;AAAA;AAAA,UADF;AAGD;;GAjCQrB,e;;KAAAA,e;AAmCT,eAAeA,eAAf","sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport Phylocanvas from \"phylocanvas\";\nimport scalebar from \"phylocanvas-plugin-scalebar\";\nimport branchLength from \"phylocanvas-plugin-branch-length\";\nimport root from \"phylocanvas-plugin-root\";\nPhylocanvas.plugin(scalebar)\nPhylocanvas.plugin(branchLength)\nPhylocanvas.plugin(root)\n\nfunction PhylocanvasView(props) {\n  let phylocanvas = useRef();\n  let typeList = useRef([\"radial\", \"rectangular\", \"circular\", \"diagonal\", \"hierarchical\"])\n\n  useEffect(() => {\n    phylocanvas.current = Phylocanvas.createTree(\"phylocanvas\")\n    console.log(phylocanvas.current)\n  }, [])\n\n  useEffect(() => {\n    phylocanvas.current.load(props.tree)\n  }, [props.tree])\n\n  useEffect(() => {\n    if (typeList.current.includes(props.type)) {\n      phylocanvas.current.setTreeType(props.type)\n    } else {\n      phylocanvas.current.setTreeType(\"circular\")\n    }\n  }, [props.type])\n\n  useEffect(() => {\n    phylocanvas.current.showLabels = props.labels\n    phylocanvas.current.alignLabels = props.align\n    phylocanvas.current.setNodeSize(props.nodeSize)\n    phylocanvas.current.setTextSize(props.textSize)\n    phylocanvas.current.lineWidth = props.lineWidth\n    phylocanvas.current.draw()\n  }, [props.type, props.labels, props.align, props.nodeSize, props.textSize, props.lineWidth])\n\n  return (\n    <div id=\"phylocanvas\"></div>\n  )\n}\n\nexport default PhylocanvasView;\n"]},"metadata":{},"sourceType":"module"}