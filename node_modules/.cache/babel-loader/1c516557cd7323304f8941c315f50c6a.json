{"ast":null,"code":"import { Tree, utils } from 'phylocanvas';\nconst {\n  getPixelRatio\n} = utils.canvas;\nconst DEFAULTS = {\n  active: true\n};\n\nfunction getLeafX(leaf) {\n  return [0, 0];\n}\n\nexport default function plugin(decorate) {\n  decorate(this, 'createTree', (delegate, args) => {\n    const tree = delegate(...args);\n    const [, config = {}] = args;\n    tree.treeStats = Object.assign({}, DEFAULTS, config.treeStats || {});\n    return tree;\n  });\n  decorate(Tree, 'load', function (delegate, args) {\n    delegate.apply(this, args);\n\n    if (this.treeStats.active) {\n      console.log(this.leaves[0]);\n      let ctx = this.canvas;\n      console.log(ctx);\n\n      for (let leaf of this.leaves) {\n        this.addListener('mousemove', e => {\n          let path = new Path2D();\n          let x = getLeafX(leaf);\n          path.moveTo(0, 0);\n          path.drawTo(0, 100);\n          path.drawTo(100, 100);\n          path.drawTo(100, 0);\n          path.drawTo(0, 0);\n          path.closePath();\n\n          if (this.canvas.isPointInPath(path, e.offsetX, e.offsetY)) {\n            ctx.fill(path);\n          }\n        });\n      }\n    }\n  });\n}","map":{"version":3,"sources":["/var/www/pathogen-intelligence.tgen.org/epitools/my_modules/phylocanvas-plugin-tree-stats/index.js"],"names":["Tree","utils","getPixelRatio","canvas","DEFAULTS","active","getLeafX","leaf","plugin","decorate","delegate","args","tree","config","treeStats","Object","assign","apply","console","log","leaves","ctx","addListener","e","path","Path2D","x","moveTo","drawTo","closePath","isPointInPath","offsetX","offsetY","fill"],"mappings":"AAAA,SAASA,IAAT,EAAeC,KAAf,QAA4B,aAA5B;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAoBD,KAAK,CAACE,MAAhC;AAEA,MAAMC,QAAQ,GAAG;AACfC,EAAAA,MAAM,EAAE;AADO,CAAjB;;AAIA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACtB,SAAO,CAAC,CAAD,EAAI,CAAJ,CAAP;AACD;;AAED,eAAe,SAASC,MAAT,CAAgBC,QAAhB,EAA0B;AACvCA,EAAAA,QAAQ,CAAC,IAAD,EAAO,YAAP,EAAqB,CAACC,QAAD,EAAWC,IAAX,KAAoB;AAC/C,UAAMC,IAAI,GAAGF,QAAQ,CAAC,GAAGC,IAAJ,CAArB;AACA,UAAM,GAAIE,MAAM,GAAG,EAAb,IAAoBF,IAA1B;AACAC,IAAAA,IAAI,CAACE,SAAL,GAAiBC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBZ,QAAlB,EAA4BS,MAAM,CAACC,SAAP,IAAoB,EAAhD,CAAjB;AACA,WAAOF,IAAP;AACD,GALO,CAAR;AAMAH,EAAAA,QAAQ,CAACT,IAAD,EAAO,MAAP,EAAe,UAAUU,QAAV,EAAoBC,IAApB,EAA0B;AAC/CD,IAAAA,QAAQ,CAACO,KAAT,CAAe,IAAf,EAAqBN,IAArB;;AAEA,QAAI,KAAKG,SAAL,CAAeT,MAAnB,EAA2B;AAEzBa,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,MAAL,CAAY,CAAZ,CAAZ;AACA,UAAIC,GAAG,GAAG,KAAKlB,MAAf;AACAe,MAAAA,OAAO,CAACC,GAAR,CAAYE,GAAZ;;AAEA,WAAK,IAAId,IAAT,IAAiB,KAAKa,MAAtB,EAA8B;AAC5B,aAAKE,WAAL,CAAiB,WAAjB,EAA+BC,CAAD,IAAO;AACnC,cAAIC,IAAI,GAAG,IAAIC,MAAJ,EAAX;AACA,cAAIC,CAAC,GAAGpB,QAAQ,CAACC,IAAD,CAAhB;AACAiB,UAAAA,IAAI,CAACG,MAAL,CAAY,CAAZ,EAAe,CAAf;AACAH,UAAAA,IAAI,CAACI,MAAL,CAAY,CAAZ,EAAe,GAAf;AACAJ,UAAAA,IAAI,CAACI,MAAL,CAAY,GAAZ,EAAiB,GAAjB;AACAJ,UAAAA,IAAI,CAACI,MAAL,CAAY,GAAZ,EAAiB,CAAjB;AACAJ,UAAAA,IAAI,CAACI,MAAL,CAAY,CAAZ,EAAe,CAAf;AACAJ,UAAAA,IAAI,CAACK,SAAL;;AACA,cAAI,KAAK1B,MAAL,CAAY2B,aAAZ,CAA0BN,IAA1B,EAAgCD,CAAC,CAACQ,OAAlC,EAA2CR,CAAC,CAACS,OAA7C,CAAJ,EAA2D;AACzDX,YAAAA,GAAG,CAACY,IAAJ,CAAST,IAAT;AACD;AACF,SAZD;AAcD;AAEF;AACF,GA3BO,CAAR;AA4BD","sourcesContent":["import { Tree, utils } from 'phylocanvas';\n\nconst { getPixelRatio } = utils.canvas;\n\nconst DEFAULTS = {\n  active: true,\n};\n\nfunction getLeafX(leaf) {\n  return [0, 0]\n}\n\nexport default function plugin(decorate) {\n  decorate(this, 'createTree', (delegate, args) => {\n    const tree = delegate(...args);\n    const [ , config = {} ] = args;\n    tree.treeStats = Object.assign({}, DEFAULTS, config.treeStats || {});\n    return tree;\n  });\n  decorate(Tree, 'load', function (delegate, args) {\n    delegate.apply(this, args);\n    \n    if (this.treeStats.active) {\n\n      console.log(this.leaves[0])\n      let ctx = this.canvas\n      console.log(ctx)\n\n      for (let leaf of this.leaves) {\n        this.addListener('mousemove', (e) => {\n          let path = new Path2D()\n          let x = getLeafX(leaf)\n          path.moveTo(0, 0)\n          path.drawTo(0, 100)\n          path.drawTo(100, 100)\n          path.drawTo(100, 0)\n          path.drawTo(0, 0)\n          path.closePath()\n          if (this.canvas.isPointInPath(path, e.offsetX, e.offsetY)) {\n            ctx.fill(path)\n          }\n        })\n\n      }\n \n    }\n  });\n}\n"]},"metadata":{},"sourceType":"module"}