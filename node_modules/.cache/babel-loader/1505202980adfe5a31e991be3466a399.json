{"ast":null,"code":"import { Tree, utils } from 'phylocanvas';\nconst {\n  getPixelRatio\n} = utils.canvas;\nconst DEFAULTS = {\n  active: true\n};\n\nfunction addListeners() {\n  if (this.treeStats.active) {\n    for (let leaf of this.leaves) {\n      this.addListener('mousemove', e => {\n        let cxt = this.canvas;\n        let path = new Path2D();\n        let x = (this.offsetx + leaf.endx * this.zoom / 2) * pixelRatio;\n        let y = (this.offsety + leaf.endy * this.zoom / 2) * pixelRatio;\n        path.moveTo(x, y);\n        path.lineTo(x + 10, y);\n        path.lineTo(x + 10, y + 10);\n        path.lineTo(x, y + 10);\n        path.lineTo(x, y);\n        path.closePath();\n        ctx.fill(path);\n\n        if (this.canvas.isPointInPath(path, e.offsetX, e.offsetY)) {}\n      });\n    }\n  }\n}\n\nexport default function plugin(decorate) {\n  decorate(this, 'createTree', (delegate, args) => {\n    const tree = delegate(...args);\n    const [, config = {}] = args;\n    tree.treeStats = Object.assign({}, DEFAULTS, config.treeStats || {});\n    return tree;\n  });\n  decorate(Tree, 'load', function (delegate, args) {\n    delegate.apply(this, args);\n    addListeners.apply(this);\n  });\n}","map":{"version":3,"sources":["/var/www/pathogen-intelligence.tgen.org/epitools/my_modules/phylocanvas-plugin-tree-stats/index.js"],"names":["Tree","utils","getPixelRatio","canvas","DEFAULTS","active","addListeners","treeStats","leaf","leaves","addListener","e","cxt","path","Path2D","x","offsetx","endx","zoom","pixelRatio","y","offsety","endy","moveTo","lineTo","closePath","ctx","fill","isPointInPath","offsetX","offsetY","plugin","decorate","delegate","args","tree","config","Object","assign","apply"],"mappings":"AAAA,SAASA,IAAT,EAAeC,KAAf,QAA4B,aAA5B;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAoBD,KAAK,CAACE,MAAhC;AAEA,MAAMC,QAAQ,GAAG;AACfC,EAAAA,MAAM,EAAE;AADO,CAAjB;;AAIA,SAASC,YAAT,GAAwB;AACtB,MAAI,KAAKC,SAAL,CAAeF,MAAnB,EAA2B;AACvB,SAAK,IAAIG,IAAT,IAAiB,KAAKC,MAAtB,EAA8B;AAC5B,WAAKC,WAAL,CAAiB,WAAjB,EAA+BC,CAAD,IAAO;AACnC,YAAIC,GAAG,GAAG,KAAKT,MAAf;AACA,YAAIU,IAAI,GAAG,IAAIC,MAAJ,EAAX;AACA,YAAIC,CAAC,GAAG,CAAC,KAAKC,OAAL,GAAeR,IAAI,CAACS,IAAL,GAAY,KAAKC,IAAjB,GAAwB,CAAxC,IAA6CC,UAArD;AACA,YAAIC,CAAC,GAAG,CAAC,KAAKC,OAAL,GAAeb,IAAI,CAACc,IAAL,GAAY,KAAKJ,IAAjB,GAAwB,CAAxC,IAA6CC,UAArD;AACAN,QAAAA,IAAI,CAACU,MAAL,CAAYR,CAAZ,EAAeK,CAAf;AACAP,QAAAA,IAAI,CAACW,MAAL,CAAYT,CAAC,GAAG,EAAhB,EAAoBK,CAApB;AACAP,QAAAA,IAAI,CAACW,MAAL,CAAYT,CAAC,GAAG,EAAhB,EAAoBK,CAAC,GAAG,EAAxB;AACAP,QAAAA,IAAI,CAACW,MAAL,CAAYT,CAAZ,EAAeK,CAAC,GAAG,EAAnB;AACAP,QAAAA,IAAI,CAACW,MAAL,CAAYT,CAAZ,EAAeK,CAAf;AACAP,QAAAA,IAAI,CAACY,SAAL;AACEC,QAAAA,GAAG,CAACC,IAAJ,CAASd,IAAT;;AACF,YAAI,KAAKV,MAAL,CAAYyB,aAAZ,CAA0Bf,IAA1B,EAAgCF,CAAC,CAACkB,OAAlC,EAA2ClB,CAAC,CAACmB,OAA7C,CAAJ,EAA2D,CAC1D;AACF,OAdD;AAeD;AACJ;AACF;;AAED,eAAe,SAASC,MAAT,CAAgBC,QAAhB,EAA0B;AACvCA,EAAAA,QAAQ,CAAC,IAAD,EAAO,YAAP,EAAqB,CAACC,QAAD,EAAWC,IAAX,KAAoB;AAC/C,UAAMC,IAAI,GAAGF,QAAQ,CAAC,GAAGC,IAAJ,CAArB;AACA,UAAM,GAAIE,MAAM,GAAG,EAAb,IAAoBF,IAA1B;AACAC,IAAAA,IAAI,CAAC5B,SAAL,GAAiB8B,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBlC,QAAlB,EAA4BgC,MAAM,CAAC7B,SAAP,IAAoB,EAAhD,CAAjB;AACA,WAAO4B,IAAP;AACD,GALO,CAAR;AAMAH,EAAAA,QAAQ,CAAChC,IAAD,EAAO,MAAP,EAAe,UAAUiC,QAAV,EAAoBC,IAApB,EAA0B;AAC/CD,IAAAA,QAAQ,CAACM,KAAT,CAAe,IAAf,EAAqBL,IAArB;AACA5B,IAAAA,YAAY,CAACiC,KAAb,CAAmB,IAAnB;AACD,GAHO,CAAR;AAID","sourcesContent":["import { Tree, utils } from 'phylocanvas';\n\nconst { getPixelRatio } = utils.canvas;\n\nconst DEFAULTS = {\n  active: true,\n};\n\nfunction addListeners() {\n  if (this.treeStats.active) {\n      for (let leaf of this.leaves) {\n        this.addListener('mousemove', (e) => {\n          let cxt = this.canvas;\n          let path = new Path2D()\n          let x = (this.offsetx + leaf.endx * this.zoom / 2) * pixelRatio\n          let y = (this.offsety + leaf.endy * this.zoom / 2) * pixelRatio\n          path.moveTo(x, y)\n          path.lineTo(x + 10, y)\n          path.lineTo(x + 10, y + 10)\n          path.lineTo(x, y + 10)\n          path.lineTo(x, y)\n          path.closePath()\n            ctx.fill(path)\n          if (this.canvas.isPointInPath(path, e.offsetX, e.offsetY)) {\n          }\n        })\n      }\n  }\n}\n\nexport default function plugin(decorate) {\n  decorate(this, 'createTree', (delegate, args) => {\n    const tree = delegate(...args);\n    const [ , config = {} ] = args;\n    tree.treeStats = Object.assign({}, DEFAULTS, config.treeStats || {});\n    return tree;\n  });\n  decorate(Tree, 'load', function (delegate, args) {\n    delegate.apply(this, args);\n    addListeners.apply(this)    \n  });\n}\n"]},"metadata":{},"sourceType":"module"}