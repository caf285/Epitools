{"ast":null,"code":"import { Tree, utils } from 'phylocanvas';\nconst {\n  getPixelRatio\n} = utils.canvas;\nconst DEFAULTS = {\n  active: true,\n  debug: false,\n  margin: 20,\n  fontFamily: \"Sans-serif\",\n  fontSize: 30,\n  textBaseLine: \"top\",\n  textAlign: \"left\"\n};\n\nfunction addListeners() {\n  const tree = this;\n  const ctx = this.canvas;\n  const canvas = ctx.canvas;\n  const pixelRatio = getPixelRatio(ctx);\n  const {\n    treeStats,\n    textSize\n  } = this;\n\n  if (this.treeStats.active) {\n    //cleanup old event listeners\n    for (let eventListener of this.eventListeners.mousemove.filter(eventListener => eventListener.listener.name == \"treeStatsListener\")) {\n      this.removeListener('mousemove', eventListener.listener, canvas);\n    }\n\n    console.log(this); //==================================================( DEMO: replace this code with getting per node treeStats )\n\n    let windowText = [leaf.id];\n\n    for (let i = 0; i < Math.max(Math.ceil(Math.random() * 3), 1); i++) {\n      let rand = Math.random();\n      rand = rand.toFixed(Math.ceil(Math.random() * String(rand).length));\n      windowText.push(String(rand));\n    } //==================================================( END DEMO )\n\n\n    for (let leaf of this.leaves) {\n      this.addListener('mousemove', treeStatsListener, canvas);\n\n      function treeStatsListener(e) {\n        let path = new Path2D();\n        ctx.save();\n        ctx.font = `${tree.textSize * 4}px ${tree.font}`;\n        let lineLength = ctx.measureText(leaf.label).width * tree.zoom / tree.zoomFactor;\n        let lineWidth = ctx.measureText(\"M\").width * tree.zoom / tree.zoomFactor; // get X and Y values\n\n        let centerX = (tree.offsetx + (leaf.minx + leaf.maxx) * tree.zoom / pixelRatio / 2) * pixelRatio;\n        let centerY = (tree.offsety + (leaf.miny + leaf.maxy) * tree.zoom / pixelRatio / 2) * pixelRatio;\n        let startX = centerX - tree.baseNodeSize * tree.zoom * Math.cos(leaf.angle);\n        let startY = centerY - tree.baseNodeSize * tree.zoom * Math.sin(leaf.angle);\n        let endX = centerX + (-tree.baseNodeSize * tree.zoom + leaf.getLabelStartX() * tree.zoom + lineLength) * Math.cos(leaf.angle);\n        let endY = centerY + (-tree.baseNodeSize * tree.zoom + leaf.getLabelStartX() * tree.zoom + lineLength) * Math.sin(leaf.angle); // stroke line for mouseover detection\n\n        if (tree.treeStats.debug) {\n          ctx.strokeStyle = \"rgba(0, 0, 255, 1)\";\n        } else {\n          ctx.strokeStyle = \"rgba(0, 0, 255, 0)\";\n        }\n\n        ctx.lineWidth = lineWidth;\n        path.moveTo(centerX, centerY);\n        path.lineTo(endX, endY);\n        path.closePath();\n        ctx.stroke(path); // draw treeStats window\n\n        if (ctx.isPointInStroke(path, e.offsetX * pixelRatio, e.offsetY * pixelRatio)) {\n          leaf.highlighted = true;\n          let x = e.offsetX * pixelRatio;\n          let y = e.offsetY * pixelRatio;\n          ctx.save();\n          ctx.font = `${treeStats.fontSize * pixelRatio / 2}px ${treeStats.fontFamily}`;\n          ctx.textBaseline = treeStats.textBaseLine;\n          ctx.textAlign = treeStats.textAlign;\n          let boxWidth = 0;\n\n          for (let text of windowText) {\n            boxWidth = Math.max(boxWidth, ctx.measureText(text).width + treeStats.margin * 2);\n          }\n\n          let lineHeight = ctx.measureText(\"w\").width + treeStats.margin / 2;\n          let boxHeight = lineHeight * windowText.length + treeStats.margin * 2; // fill box\n\n          if (x + boxWidth > canvas.width) {\n            x -= boxWidth;\n          }\n\n          if (y + boxHeight > canvas.height) {\n            y -= boxHeight;\n          }\n\n          ctx.fillStyle = \"rgba(240, 240, 240, 0.9)\";\n          ctx.fillRect(x, y, boxWidth, boxHeight); // fill text\n\n          ctx.fillStyle = \"rgb(0, 0, 0)\";\n\n          for (let i = 0; i < windowText.length; i++) {\n            ctx.fillText(windowText[i], x + treeStats.margin, y + treeStats.margin + i * lineHeight);\n          }\n\n          ctx.restore();\n        } else {\n          leaf.highlighted = false;\n        }\n\n        ctx.restore();\n      }\n    }\n  }\n}\n\nexport default function plugin(decorate) {\n  decorate(this, 'createTree', (delegate, args) => {\n    const tree = delegate(...args);\n    const [, config = {}] = args;\n    tree.treeStats = Object.assign({}, DEFAULTS, config.treeStats || {});\n    return tree;\n  });\n  decorate(Tree, 'load', function (delegate, args) {\n    delegate.apply(this, args);\n    addListeners.apply(this);\n    let ctx = this.canvas;\n    this.addListener('mousemove', e => {\n      if (this.treeStats.debug) {\n        let path = new Path2D();\n        path.moveTo(0, 0);\n        path.lineTo(e.offsetX * getPixelRatio(ctx), e.offsetY * getPixelRatio(ctx));\n        path.closePath();\n        ctx.stroke(path);\n      }\n    });\n  });\n}","map":{"version":3,"sources":["/var/www/pathogen-intelligence.tgen.org/epitools/my_modules/phylocanvas-plugin-tree-stats/index.js"],"names":["Tree","utils","getPixelRatio","canvas","DEFAULTS","active","debug","margin","fontFamily","fontSize","textBaseLine","textAlign","addListeners","tree","ctx","pixelRatio","treeStats","textSize","eventListener","eventListeners","mousemove","filter","listener","name","removeListener","console","log","windowText","leaf","id","i","Math","max","ceil","random","rand","toFixed","String","length","push","leaves","addListener","treeStatsListener","e","path","Path2D","save","font","lineLength","measureText","label","width","zoom","zoomFactor","lineWidth","centerX","offsetx","minx","maxx","centerY","offsety","miny","maxy","startX","baseNodeSize","cos","angle","startY","sin","endX","getLabelStartX","endY","strokeStyle","moveTo","lineTo","closePath","stroke","isPointInStroke","offsetX","offsetY","highlighted","x","y","textBaseline","boxWidth","text","lineHeight","boxHeight","height","fillStyle","fillRect","fillText","restore","plugin","decorate","delegate","args","config","Object","assign","apply"],"mappings":"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","sourcesContent":["import { Tree, utils } from 'phylocanvas';\n\nconst { getPixelRatio } = utils.canvas;\n\nconst DEFAULTS = {\n  active: true,\n  debug: false,\n  margin: 20,\n  fontFamily: \"Sans-serif\",\n  fontSize: 30,\n  textBaseLine: \"top\",\n  textAlign: \"left\",\n};\n\nfunction addListeners() {\n  const tree = this\n  const ctx = this.canvas;\n  const canvas = ctx.canvas;\n  const pixelRatio = getPixelRatio(ctx);\n  const { treeStats, textSize } = this\n  if (this.treeStats.active) {\n      //cleanup old event listeners\n      for (let eventListener of this.eventListeners.mousemove.filter(eventListener => eventListener.listener.name == \"treeStatsListener\")) {\n        this.removeListener('mousemove', eventListener.listener, canvas)\n      }\n      console.log(this)\n          //==================================================( DEMO: replace this code with getting per node treeStats )\n          let windowText = [leaf.id]\n          for (let i = 0; i < Math.max(Math.ceil(Math.random() * 3), 1); i++) {\n            let rand = Math.random()\n            rand = rand.toFixed(Math.ceil(Math.random() * String(rand).length))\n            windowText.push(String(rand))\n          }\n            //==================================================( END DEMO )\n      for (let leaf of this.leaves) {\n        this.addListener('mousemove', treeStatsListener, canvas)\n        function treeStatsListener(e) {\n          let path = new Path2D()\n          ctx.save()\n          ctx.font = `${tree.textSize * 4}px ${tree.font}`;\n          let lineLength = ctx.measureText(leaf.label).width * tree.zoom / tree.zoomFactor\n          let lineWidth = ctx.measureText(\"M\").width * tree.zoom / tree.zoomFactor\n\n          // get X and Y values\n          let centerX = (tree.offsetx + (leaf.minx + leaf.maxx) * tree.zoom / pixelRatio / 2) * pixelRatio\n          let centerY = (tree.offsety + (leaf.miny + leaf.maxy) * tree.zoom / pixelRatio / 2) * pixelRatio\n          let startX = centerX - (tree.baseNodeSize * tree.zoom * Math.cos(leaf.angle))\n          let startY = centerY - (tree.baseNodeSize * tree.zoom * Math.sin(leaf.angle))\n          let endX = centerX + ((-tree.baseNodeSize * tree.zoom + leaf.getLabelStartX() * tree.zoom + lineLength) * Math.cos(leaf.angle))\n          let endY = centerY + ((-tree.baseNodeSize * tree.zoom + leaf.getLabelStartX() * tree.zoom + lineLength) * Math.sin(leaf.angle))\n\n          // stroke line for mouseover detection\n          if (tree.treeStats.debug) {\n            ctx.strokeStyle = \"rgba(0, 0, 255, 1)\"\n          } else {\n            ctx.strokeStyle = \"rgba(0, 0, 255, 0)\"\n          }\n          ctx.lineWidth = lineWidth\n          path.moveTo(centerX, centerY)\n          path.lineTo(endX, endY)\n          path.closePath()\n          ctx.stroke(path)\n\n          // draw treeStats window\n          if (ctx.isPointInStroke(path, e.offsetX * pixelRatio, e.offsetY * pixelRatio)) {\n            leaf.highlighted = true\n            let x = e.offsetX * pixelRatio\n            let y = e.offsetY * pixelRatio\n            ctx.save()\n            ctx.font = `${treeStats.fontSize * pixelRatio / 2}px ${treeStats.fontFamily}`;\n            ctx.textBaseline = treeStats.textBaseLine\n            ctx.textAlign = treeStats.textAlign\n\n            let boxWidth = 0\n            for (let text of windowText) {\n              boxWidth = Math.max(boxWidth, ctx.measureText(text).width + treeStats.margin * 2)\n            }\n            let lineHeight = ctx.measureText(\"w\").width + treeStats.margin / 2\n            let boxHeight = lineHeight * windowText.length + treeStats.margin * 2\n\n            // fill box\n            if (x + boxWidth > canvas.width) {\n              x -= boxWidth\n            }\n            if (y + boxHeight > canvas.height) {\n              y -= boxHeight\n            }\n            ctx.fillStyle = \"rgba(240, 240, 240, 0.9)\"\n            ctx.fillRect(x, y, boxWidth, boxHeight)\n\n            // fill text\n            ctx.fillStyle = \"rgb(0, 0, 0)\"\n            for (let i = 0; i < windowText.length; i++) {\n              ctx.fillText(windowText[i], x + treeStats.margin, y + treeStats.margin + i * lineHeight)\n            }\n            ctx.restore()\n          } else {\n            leaf.highlighted = false\n          }\n          ctx.restore()\n        }\n      }\n  }\n}\n\nexport default function plugin(decorate) {\n  decorate(this, 'createTree', (delegate, args) => {\n    const tree = delegate(...args);\n    const [ , config = {} ] = args;\n    tree.treeStats = Object.assign({}, DEFAULTS, config.treeStats || {});\n    return tree;\n  });\n  decorate(Tree, 'load', function (delegate, args) {\n    delegate.apply(this, args);\n    addListeners.apply(this)\n    let ctx = this.canvas\n    this.addListener('mousemove', (e) => {\n      if (this.treeStats.debug) {\n      let path = new Path2D()\n      path.moveTo(0, 0)\n      path.lineTo(e.offsetX * getPixelRatio(ctx), e.offsetY * getPixelRatio(ctx))\n      path.closePath()\n      ctx.stroke(path)\n      }\n    })\n\n  });\n}\n"]},"metadata":{},"sourceType":"module"}