{"version":3,"sources":["tgen-coh.png","nav/Header.js","../my_modules/phylocanvas-plugin-scalebar/index.js","../my_modules/phylocanvas-plugin-branch-length/index.js","../my_modules/phylocanvas-plugin-root/index.js","../my_modules/phylocanvas-plugin-pairwise-ops/index.js","../my_modules/phylocanvas-plugin-tree-stats/index.js","phylocanvas/Phylocanvas.js","demo/DemoPhylocanvas.js","leaflet/Leaflet.js","demo/DemoLeaflet.js","plotly/Plotly.js","demo/DemoPlotly.js","gas/GAS.js","nav/Body.js","nav/Footer.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","Navbar","sticky","bg","variant","Brand","href","src","logo","height","alt","Nav","Link","NavDropdown","title","Item","getPixelRatio","utils","canvas","DEFAULTS","active","width","fillStyle","strokeStyle","lineWidth","fontFamily","fontSize","textBaseline","textAlign","digits","position","bottom","left","LOG10","Math","log","drawScalebar","scalebar","this","zoom","branchScalar","cxt","pixelRatio","save","x","centre","right","loadError","y","top","middle","clearRect","font","beginPath","moveTo","lineTo","stroke","closePath","scale","minDigitis","parseInt","abs","label","toFixed","fillText","restore","drawBranchLength","branchLength","ctx","textSize","branch","branchColour","branches","centerX","offsetx","startx","centerx","centerY","offsety","starty","centery","treeType","drawRoot","root","pairwiseMatrix","clusterActive","clusterDraw","clusterMatrix","clusterMaxDistance","clusterDistance","clusterSamples","walkMatrix","tree","node","path","distance","newDistance","Array","from","newPath","push","leaf","id","pairwiseOps","internalNodes","children","i","leaves","shift","nodeLength","slice","reduce","previousValue","currentValue","Object","keys","includes","buildPairwiseMatrix","console","buildClusterMatrix","cluster","pair","length","sort","JSON","stringify","colorNode","setDisplay","colour","parse","findLeaves","draw","drawClusterInfo","String","measureText","debug","margin","textBaseLine","addListeners","treeStats","eventListeners","mousemove","filter","eventListener","listener","name","removeListener","windowText","max","ceil","random","rand","addListener","e","Path2D","lineLength","zoomFactor","minx","maxx","miny","maxy","endX","baseNodeSize","cos","angle","sin","getLabelStartX","endY","isPointInStroke","offsetX","offsetY","highlighted","boxWidth","text","lineHeight","boxHeight","fillRect","Phylocanvas","plugin","decorate","delegate","args","config","assign","Tree","apply","rootLine","PhylocanvasView","props","phylocanvas","useRef","minWidth","useState","hw","_setHW","heightRef","widthRef","_setTextSize","textSizeRef","nodeSize","_setNodeSize","nodeSizeRef","typeList","useEffect","handleResize","data","newHeight","document","documentElement","clientHeight","window","innerHeight","getElementsByClassName","newWidth","clientWidth","innerWidth","current","setTreeType","setNodeSize","setTextSize","initialSize","dispatchEvent","Event","addEventListener","removeEventListener","createTree","load","type","showLabels","labels","alignLabels","align","style","minHeight","setTree","setType","setLabels","setAlign","setLineWidth","setClusterDistance","setClusterSamples","onClick","LeafletView","Leaflet","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","iconRetina","iconUrl","icon","shadowUrl","iconShadow","center","MapContainer","scrollWheelZoom","TileLayer","url","Marker","Popup","setCenter","getElementById","value","onChange","PlotlyView","Plotly","react","setX","setY","Body","setHeight","ref","basename","exact","DemoPhylocanvas","DemoLeaflet","DemoPlotly","GAS","Footer","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.2bef28c8.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/tgen-coh.453f08b1.png\";","import React from \"react\";\nimport { Navbar, Nav, NavDropdown } from \"react-bootstrap\";\nimport logo from \"../tgen-coh.png\";\n\nfunction Header() {\n  return (\n    <div className=\"Nav-header\">\n      <Navbar sticky=\"top\" bg=\"light\" variant=\"light\">\n        <Navbar.Brand href=\"home\">\n          <img\n            src={logo}\n            height=\"60\"\n            className=\"d-inline-block align-center mr-3\"\n            alt=\"Epitools Logo\"\n          />{\" \"}\n          One Health Genomic Epi Tools\n        </Navbar.Brand>\n        <Nav className=\"ml-auto\">\n          <Nav.Link href=\"home\">Home</Nav.Link>\n          <Nav.Link href=\"gas\">GAS</Nav.Link>\n          <NavDropdown title=\"Component Demo\">\n            <NavDropdown.Item href=\"demo-phylocanvas\">Phylocanvas</NavDropdown.Item>\n            <NavDropdown.Item href=\"demo-leaflet\">Leaflet</NavDropdown.Item>\n            <NavDropdown.Item href=\"demo-plotly\">Plotly</NavDropdown.Item>\n          </NavDropdown>\n        </Nav>\n      </Navbar>\n    </div>\n  )\n}\n\nexport default Header;\n","import { Tree, utils } from 'phylocanvas';\n\nconst { getPixelRatio } = utils.canvas;\n\nconst DEFAULTS = {\n  active: true,\n  width: 100,\n  height: 20,\n  fillStyle: 'black',\n  strokeStyle: 'black',\n  lineWidth: 1,\n  fontFamily: 'Sans-serif',\n  fontSize: 16,\n  textBaseline: 'bottom',\n  textAlign: 'center',\n  digits: 2,\n  position: {\n    bottom: 10,\n    left: 10,\n  },\n};\n\nconst INVALID_HORIZONTAL_POSITION = 'Invalid horizontal position specified' +\n  'Supported values are `left`, `centre`, or `right`';\nconst INVALID_VERTICAL_POSITION = 'Invalid vertical position specified' +\n  'Supported values are `top`, `middle`, or `bottom`';\n\nconst LOG10 = Math.log(10);\n\nfunction drawScalebar() {\n  const { scalebar, zoom, branchScalar } = this;\n  const { position } = scalebar;\n  const cxt = this.canvas;\n  const canvas = cxt.canvas;\n  const pixelRatio = getPixelRatio(cxt);\n  const width = pixelRatio * scalebar.width;\n  const height = pixelRatio * scalebar.height;\n  const lineWidth = pixelRatio * scalebar.lineWidth;\n  const fontSize = pixelRatio * scalebar.fontSize;\n\n  cxt.save();\n\n  let x = 0;\n  if (typeof position.left !== 'undefined') {\n    x = scalebar.lineWidth + position.left;\n  } else if (typeof position.centre !== 'undefined') {\n    x = (canvas.width / 2) - (width / 2) + position.centre;\n  } else if (typeof position.right !== 'undefined') {\n    x = canvas.width - width - scalebar.lineWidth - position.right;\n  } else {\n    this.loadError(INVALID_HORIZONTAL_POSITION);\n  }\n  let y = 0;\n  if (typeof position.top !== 'undefined') {\n    y = position.top;\n  } else if (typeof position.middle !== 'undefined') {\n    y = (canvas.height / 2) - height + position.middle;\n  } else if (typeof position.bottom !== 'undefined') {\n    y = canvas.height - height - position.bottom;\n  } else {\n    this.loadError(INVALID_VERTICAL_POSITION);\n  }\n  cxt.clearRect(x, y, width, height);\n\n  cxt.font = `${fontSize}px ${scalebar.fontFamily}`;\n  cxt.fillStyle = scalebar.fillStyle;\n  cxt.strokeStyle = scalebar.strokeStyle;\n  cxt.lineWidth = lineWidth * pixelRatio / 2;\n  cxt.textBaseline = scalebar.textBaseline;\n  cxt.textAlign = scalebar.textAlign;\n\n  cxt.beginPath();\n  cxt.moveTo(x, y);\n  cxt.lineTo(x + width, y);\n  cxt.stroke();\n  cxt.moveTo(x, y);\n  cxt.lineTo(x, y + height);\n  cxt.stroke();\n  cxt.moveTo(x + width, y);\n  cxt.lineTo(x + width, y + height);\n  cxt.stroke();\n  cxt.closePath();\n\n  const scale = width / branchScalar / zoom;\n  const minDigitis = parseInt(Math.abs(Math.log(scale) / LOG10), 10);\n  const label = scale.toFixed(minDigitis + scalebar.digits);\n  cxt.fillText(label, x + width / 2, y + height);\n\n  cxt.restore();\n}\n\nexport default function plugin(decorate) {\n  decorate(this, 'createTree', (delegate, args) => {\n    const tree = delegate(...args);\n    const [ , config = {} ] = args;\n    tree.scalebar = Object.assign({}, DEFAULTS, config.scalebar || {});\n    return tree;\n  });\n  decorate(Tree, 'draw', function (delegate, args) {\n    delegate.apply(this, args);\n    if (this.scalebar.active) {\n      drawScalebar.apply(this);\n    }\n  });\n}\n","import { Tree, utils } from 'phylocanvas';\n\nconst { getPixelRatio } = utils.canvas;\n\nconst DEFAULTS = {\n  active: true,\n};\n\nfunction drawBranchLength() {\n\n  const { branchLength } = this;\n  const ctx = this.canvas;\n  const canvas = ctx.canvas;\n  const pixelRatio = getPixelRatio(ctx);\n  const textSize = this.textSize * this.zoom\n\n  ctx.save();\n\n  ctx.font = `${textSize}px ${this.font}`;\n  ctx.fillStyle = this.branchColour;\n  ctx.textBaseline = \"bottom\";\n  ctx.textAlign = \"left\";\n\n  for (let branch in this.branches) {\n    if (this.branches[branch].branchLength == 0) {\n      continue\n    }\n    branch = this.branches[branch]\n    let centerX = (this.offsetx + (branch.startx + branch.centerx) / 2 * this.zoom / pixelRatio) * pixelRatio\n    let centerY = (this.offsety + (branch.starty + branch.centery) / 2 * this.zoom / pixelRatio) * pixelRatio\n    let x = (this.offsetx + branch.centerx * this.zoom / pixelRatio) * pixelRatio\n    let y = (this.offsety + branch.centery * this.zoom / pixelRatio) * pixelRatio\n    if (this.treeType == \"rectangular\") {\n      ctx.textAlign = \"center\"\n      ctx.fillText(branch.branchLength, centerX, y)\n    } else if (this.treeType == \"hierarchical\") {\n      ctx.textBaseline = \"middle\"\n      ctx.fillText(branch.branchLength, x, centerY)\n    } else {\n      if (centerY > y) {\n        ctx.textAlign = \"right\"\n        centerX = centerX - pixelRatio * this.zoom\n      } else {\n        ctx.textAlign = \"left\"\n        centerX = centerX + pixelRatio * this.zoom\n      }\n      if (centerX > x) {\n        ctx.textBaseline = \"top\"\n        centerY = centerY + pixelRatio * this.zoom\n      } else {\n        ctx.textBaseline = \"bottom\"\n        centerY = centerY - pixelRatio * this.zoom\n      }\n      ctx.fillText(branch.branchLength, centerX, centerY)\n    }\n  }\n\n  ctx.restore();\n}\n\nexport default function plugin(decorate) {\n  decorate(this, 'createTree', (delegate, args) => {\n    const tree = delegate(...args);\n    const [ , config = {} ] = args;\n    tree.branchLength = Object.assign({}, DEFAULTS, config.branchLength || {});\n    return tree;\n  });\n  decorate(Tree, 'draw', function (delegate, args) {\n    delegate.apply(this, args);\n    if (this.branchLength.active) {\n      drawBranchLength.apply(this);\n    }\n  });\n}\n","import { Tree, utils } from 'phylocanvas';\n\nconst { getPixelRatio } = utils.canvas;\n\nconst DEFAULTS = {\n  active: true,\n};\n\nfunction drawRoot() {\n\n  const cxt = this.canvas;\n  const pixelRatio = getPixelRatio(cxt);\n\n  cxt.save();\n\n  cxt.strokeStyle = this.branchColour;\n  cxt.lineWidth = this.lineWidth;\n\n  let x = (this.offsetx + this.root.centerx * this.zoom / pixelRatio) * pixelRatio\n  let y = (this.offsety + this.root.centery * this.zoom / pixelRatio) * pixelRatio\n\n  cxt.beginPath();\n  cxt.moveTo(x, y);\n  if (this.treeType == \"rectangular\" || this.treeType == \"diagonal\") {\n    cxt.lineTo(x - 100 * this.zoom, y);\n  } else if (this.treeType == \"hierarchical\") {\n    cxt.lineTo(x, y - 100 * this.zoom);\n  }\n  cxt.stroke();\n  cxt.closePath();\n\n  cxt.restore();\n}\n\nexport default function plugin(decorate) {\n  decorate(this, 'createTree', (delegate, args) => {\n    const tree = delegate(...args);\n    const [ , config = {} ] = args;\n    tree.rootLine = Object.assign({}, DEFAULTS, config.rootLine || {});\n    return tree;\n  });\n  decorate(Tree, 'draw', function (delegate, args) {\n    delegate.apply(this, args);\n    if (this.rootLine.active) {\n      drawRoot.apply(this);\n    }\n  });\n}\n","import { Tree, utils } from 'phylocanvas';\n\nconst { getPixelRatio } = utils.canvas;\n\nconst DEFAULTS = {\n  active: true,\n  pairwiseMatrix: {},\n  clusterActive: true,\n  clusterDraw: true,\n  clusterMatrix: [],\n  clusterMaxDistance: 20,\n  clusterDistance: 3,\n  clusterSamples: 3,\n};\n\n// OLDER cluster matrix code\n/*\nfunction walkMatrix(tree, start, node, walked, distance, max) {\n  walked.push(node)\n\n  if (distance >= max) {\n    return\n  }\n  if (node !== start && node.leaf === true) {\n    tree.pairwiseOps.pairwiseMatrix[start.id].push([node.id, distance])\n  }\n  for (let child of node.children) {\n    if (! walked.includes(child)) {\n      let newDistance = distance + child.branchLength\n      newDistance = parseFloat(newDistance.toFixed(10))\n      walkMatrix(tree, start, child, walked, newDistance, max)\n    }\n  }\n  if (node.parent && ! walked.includes(node.parent)) {\n    let newDistance = distance + node.branchLength\n    newDistance = parseFloat(newDistance.toFixed(10))\n    walkMatrix(tree, start, node.parent, walked, newDistance, max)\n  }\n}\n\nfunction buildPairwiseMatrix() {\n  for (let leaf of this.leaves) {\n    this.pairwiseOps.pairwiseMatrix[leaf.id] = []\n    walkMatrix(this, leaf, leaf, [], 0, this.pairwiseOps.clusterMaxDistance)\n  }\n  console.log(this.pairwiseOps.pairwiseMatrix)\n}\n*/\n\n/*\nfunction buildClusterMatrix() {\n  this.pairwiseOps.clusterMatrix = []\n  for (let leaf in this.pairwiseOps.pairwiseMatrix) {\n    let cluster = [leaf]\n    for (let node of this.pairwiseOps.pairwiseMatrix[leaf]) {\n      if (node[1] <= this.pairwiseOps.clusterDistance) {\n        cluster.push(node[0])\n      }\n    }\n    if (cluster.length >= this.pairwiseOps.clusterSamples) {\n      cluster.sort()\n      cluster = JSON.stringify(cluster)\n      if (! this.pairwiseOps.clusterMatrix.includes(cluster)) {\n        this.pairwiseOps.clusterMatrix.push(cluster)\n      }\n    }\n  }\n}\n*/\n\nfunction walkMatrix(tree, node, path, distance) {\n  let newDistance = Array.from(distance)\n  let newPath = Array.from(path)\n  newDistance.push(node.branchLength)\n  if (node.leaf === false) {\n    newPath.push(node.id)\n    tree.pairwiseOps.pairwiseMatrix.internalNodes[node.id] = []\n    for (let child of node.children) {\n      walkMatrix(tree, child, newPath, newDistance)\n    }\n  } else {\n    tree.pairwiseOps.pairwiseMatrix.leaves[node.id] = {}\n    newDistance.push(newDistance.shift())\n    for (let i in newPath) {\n      let nodeLength = newDistance.slice(i).reduce((previousValue, currentValue) => previousValue + currentValue)\n      for (let leaf of tree.pairwiseOps.pairwiseMatrix.internalNodes[newPath[i]]) {\n        if (! Object.keys(tree.pairwiseOps.pairwiseMatrix.leaves[node.id]).includes(leaf[0])) {\n          tree.pairwiseOps.pairwiseMatrix.leaves[node.id][leaf[0]] = leaf[1] + nodeLength\n        } else if (tree.pairwiseOps.pairwiseMatrix.leaves[node.id][leaf[0]] > leaf[1] + nodeLength) {\n          tree.pairwiseOps.pairwiseMatrix.leaves[node.id][leaf[0]] = leaf[1] + nodeLength\n        }\n      }\n      tree.pairwiseOps.pairwiseMatrix.internalNodes[newPath[i]].push([node.id, nodeLength])\n    }\n  }  \n}\n\nfunction buildPairwiseMatrix() {\n  this.pairwiseOps.pairwiseMatrix = {\"internalNodes\": {}, \"leaves\": {}}\n  walkMatrix(this, this.root, [], [])\n  for (let node in this.pairwiseOps.pairwiseMatrix.leaves) {\n    for (let leaf in this.pairwiseOps.pairwiseMatrix.leaves[node]) {\n      this.pairwiseOps.pairwiseMatrix.leaves[leaf][node] = this.pairwiseOps.pairwiseMatrix.leaves[node][leaf]\n    }\n  }\n  console.log(this.pairwiseOps.pairwiseMatrix.leaves)\n}\n\nfunction buildClusterMatrix() {\n  this.pairwiseOps.clusterMatrix = []\n  for (let leaf in this.pairwiseOps.pairwiseMatrix.leaves) {\n    let cluster = [leaf]\n    for (let pair in this.pairwiseOps.pairwiseMatrix.leaves[leaf]) {\n      if (this.pairwiseOps.pairwiseMatrix.leaves[leaf][pair] <= this.pairwiseOps.clusterDistance) {\n        cluster.push(pair)\n      }\n    }\n    if (cluster.length >= this.pairwiseOps.clusterSamples) {\n      cluster.sort()\n      cluster = JSON.stringify(cluster)\n      if (! this.pairwiseOps.clusterMatrix.includes(cluster)) {\n        this.pairwiseOps.clusterMatrix.push(cluster)\n      }\n    }\n  }\n}\n\nfunction colorNode() {\n  for (let leaf of this.leaves) {\n    leaf.setDisplay({\n      colour: this.branchColour,\n    })\n    leaf.label = leaf.id\n  }\n  for (let cluster of this.pairwiseOps.clusterMatrix) {\n    cluster = JSON.parse(cluster)\n    for (let id of cluster) {\n      \n      for (let leaf of this.findLeaves(id)) {\n        leaf.label += \"+\"\n        leaf.setDisplay({\n          colour: 'red',\n        })\n      }\n    }\n  }\n  this.draw()\n}\n\nfunction drawClusterInfo() {\n  let label = \"Cluster Size: \" + String(this.pairwiseOps.clusterSamples) + \"; Cluster Distance: \" + String(this.pairwiseOps.clusterDistance)\n  let ctx = this.canvas\n  let pixelRatio = getPixelRatio(ctx)\n  ctx.save()\n  ctx.font = `${30 * pixelRatio / 2}px Arial`;\n  ctx.fillText(label, ctx.canvas.width - ctx.measureText(label).width - 10, ctx.canvas.height - 10)\n  ctx.restore()\n}\n\nexport default function plugin(decorate) {\n  decorate(this, 'createTree', (delegate, args) => {\n    const tree = delegate(...args);\n    const [ , config = {} ] = args;\n    tree.pairwiseOps = Object.assign({}, DEFAULTS, config.pairwiseOps || {});\n    return tree;\n  });\n  decorate(Tree, 'load', function (delegate, args) {\n    delegate.apply(this, args);\n    if (this.pairwiseOps.active) {\n      buildPairwiseMatrix.apply(this);\n      if (this.pairwiseOps.clusterActive) {\n        this.pairwiseOps.clusterDraw = true;\n      }\n    }   \n  });\n  decorate(Tree, 'draw', function (delegate, args) {\n    delegate.apply(this, args);\n    if (this.pairwiseOps.clusterActive) {\n      if (this.pairwiseOps.clusterDraw) {\n        this.pairwiseOps.clusterDraw = false;\n        buildClusterMatrix.apply(this);\n        colorNode.apply(this);\n      }\n      drawClusterInfo.apply(this);\n    }\n  });\n}\n","import { Tree, utils } from 'phylocanvas';\n\nconst { getPixelRatio } = utils.canvas;\n\nconst DEFAULTS = {\n  active: true,\n  debug: false,\n  margin: 20,\n  fontFamily: \"Sans-serif\",\n  fontSize: 30,\n  textBaseLine: \"top\",\n  textAlign: \"left\",\n};\n\nfunction addListeners() {\n  const tree = this\n  const ctx = this.canvas;\n  const canvas = ctx.canvas;\n  const pixelRatio = getPixelRatio(ctx);\n  const { treeStats, textSize } = this\n  if (this.treeStats.active) {\n      //cleanup old event listeners\n      for (let eventListener of this.eventListeners.mousemove.filter(eventListener => eventListener.listener.name == \"treeStatsListener\")) {\n        this.removeListener('mousemove', eventListener.listener, canvas)\n      }\n      console.log(this)\n      for (let leaf of this.leaves) {\n\n        //==================================================( DEMO: replace this code with getting per node treeStats )\n        let windowText = [leaf.id]\n        for (let i = 0; i < Math.max(Math.ceil(Math.random() * 3), 1); i++) {\n          let rand = Math.random()\n          rand = rand.toFixed(Math.ceil(Math.random() * String(rand).length))\n          windowText.push(String(rand))\n        }\n        //==================================================( END DEMO )\n\n        this.addListener('mousemove', treeStatsListener, canvas)\n        function treeStatsListener(e) {\n          let path = new Path2D()\n          ctx.save()\n          ctx.font = `${tree.textSize * 4}px ${tree.font}`;\n          let lineLength = ctx.measureText(leaf.label).width * tree.zoom / tree.zoomFactor\n          let lineWidth = ctx.measureText(\"M\").width * tree.zoom / tree.zoomFactor\n\n          // get X and Y values\n          let centerX = (tree.offsetx + (leaf.minx + leaf.maxx) * tree.zoom / pixelRatio / 2) * pixelRatio\n          let centerY = (tree.offsety + (leaf.miny + leaf.maxy) * tree.zoom / pixelRatio / 2) * pixelRatio\n          let startX = centerX - (tree.baseNodeSize * tree.zoom * Math.cos(leaf.angle))\n          let startY = centerY - (tree.baseNodeSize * tree.zoom * Math.sin(leaf.angle))\n          let endX = centerX + ((-tree.baseNodeSize * tree.zoom + leaf.getLabelStartX() * tree.zoom + lineLength) * Math.cos(leaf.angle))\n          let endY = centerY + ((-tree.baseNodeSize * tree.zoom + leaf.getLabelStartX() * tree.zoom + lineLength) * Math.sin(leaf.angle))\n\n          // stroke line for mouseover detection\n          if (tree.treeStats.debug) {\n            ctx.strokeStyle = \"rgba(0, 0, 255, 1)\"\n          } else {\n            ctx.strokeStyle = \"rgba(0, 0, 255, 0)\"\n          }\n          ctx.lineWidth = lineWidth\n          path.moveTo(centerX, centerY)\n          path.lineTo(endX, endY)\n          path.closePath()\n          ctx.stroke(path)\n\n          // draw treeStats window\n          if (ctx.isPointInStroke(path, e.offsetX * pixelRatio, e.offsetY * pixelRatio)) {\n            leaf.highlighted = true\n            let x = e.offsetX * pixelRatio\n            let y = e.offsetY * pixelRatio\n            ctx.save()\n            ctx.font = `${treeStats.fontSize * pixelRatio / 2}px ${treeStats.fontFamily}`;\n            ctx.textBaseline = treeStats.textBaseLine\n            ctx.textAlign = treeStats.textAlign\n\n            let boxWidth = 0\n            for (let text of windowText) {\n              boxWidth = Math.max(boxWidth, ctx.measureText(text).width + treeStats.margin * 2)\n            }\n            let lineHeight = ctx.measureText(\"w\").width + treeStats.margin / 2\n            let boxHeight = lineHeight * windowText.length + treeStats.margin * 2\n\n            // fill box\n            if (x + boxWidth > canvas.width) {\n              x -= boxWidth\n            }\n            if (y + boxHeight > canvas.height) {\n              y -= boxHeight\n            }\n            ctx.fillStyle = \"rgba(240, 240, 240, 0.9)\"\n            ctx.fillRect(x, y, boxWidth, boxHeight)\n\n            // fill text\n            ctx.fillStyle = \"rgb(0, 0, 0)\"\n            for (let i = 0; i < windowText.length; i++) {\n              ctx.fillText(windowText[i], x + treeStats.margin, y + treeStats.margin + i * lineHeight)\n            }\n            ctx.restore()\n          } else {\n            leaf.highlighted = false\n          }\n          ctx.restore()\n        }\n      }\n  }\n}\n\nexport default function plugin(decorate) {\n  decorate(this, 'createTree', (delegate, args) => {\n    const tree = delegate(...args);\n    const [ , config = {} ] = args;\n    tree.treeStats = Object.assign({}, DEFAULTS, config.treeStats || {});\n    return tree;\n  });\n  decorate(Tree, 'load', function (delegate, args) {\n    delegate.apply(this, args);\n    addListeners.apply(this)\n    let ctx = this.canvas\n    this.addListener('mousemove', (e) => {\n      if (this.treeStats.debug) {\n      let path = new Path2D()\n      path.moveTo(0, 0)\n      path.lineTo(e.offsetX * getPixelRatio(ctx), e.offsetY * getPixelRatio(ctx))\n      path.closePath()\n      ctx.stroke(path)\n      }\n    })\n\n  });\n}\n","import React, { useEffect, useState, useRef } from \"react\";\nimport Phylocanvas, { utils } from \"phylocanvas\";\nimport scalebar from \"phylocanvas-plugin-scalebar\";\nimport branchLength from \"phylocanvas-plugin-branch-length\";\nimport root from \"phylocanvas-plugin-root\";\nimport pairwiseOps from \"phylocanvas-plugin-pairwise-ops\";\nimport treeStats from \"phylocanvas-plugin-tree-stats\";\nPhylocanvas.plugin(scalebar)\nPhylocanvas.plugin(branchLength)\nPhylocanvas.plugin(root)\nPhylocanvas.plugin(pairwiseOps)\nPhylocanvas.plugin(treeStats)\n\nconst { getPixelRatio } = utils.canvas;\n\nfunction PhylocanvasView(props) {\n  let phylocanvas = useRef();\n  let minHeight = 100\n  let minWidth = 100\n\n  // [height, width]\n  let [hw, _setHW] = useState([minHeight, minWidth])\n  let heightRef = useRef(hw[0])\n  let widthRef = useRef(hw[1])\n  let setHW = data => {\n    heightRef.current = data[0]\n    widthRef.current = data[1]\n    _setHW(data)\n  }\n\n  // [nodeSize, textSize, lineWidth]\n  let [textSize, _setTextSize] = useState(1);\n  let textSizeRef = useRef(textSize);\n  let setTextSize = data => {\n    textSizeRef.current = data;\n    _setTextSize(data);\n  }\n  let [nodeSize, _setNodeSize] = useState(1);\n  let nodeSizeRef = useRef(nodeSize);\n  let setNodeSize = data => {\n    nodeSizeRef.current = data;\n    _setNodeSize(data);\n  }\n\n  let typeList = useRef([\"radial\", \"rectangular\", \"circular\", \"diagonal\", \"hierarchical\"]);\n\n  //TODO: Fix height inheritance problem (relative height to window size without adding to window size for positive feedback loop)\n\n  useEffect(() => {\n    function handleResize() {\n      //setHeight(document.getElementsByClassName(\"Nav-body\")[0].clientHeight)\n      let newHeight = Math.max( Math.max( document.documentElement.clientHeight || 0, window.innerHeight || 0) - document.getElementsByClassName(\"Nav-header\")[0].clientHeight * 2, minHeight )\n      let newWidth = Math.max( document.documentElement.clientWidth || minWidth, window.innerWidth || minWidth, minWidth)\n      let heightDelta = heightRef.current / newHeight\n      let widthDelta = widthRef.current / newWidth\n      setHW([newHeight, newWidth])\n      phylocanvas.current.setTreeType(phylocanvas.current.treeType)\n      phylocanvas.current.setNodeSize(nodeSizeRef.current);\n      phylocanvas.current.setTextSize(textSizeRef.current);\n      if (phylocanvas.current.treeType == \"circular\") {\n      }\n      if (phylocanvas.current.treeType == \"rectangular\") {\n      }\n    }\n    function initialSize() {\n      window.dispatchEvent(new Event('resize')) \n      phylocanvas.current.setTreeType(phylocanvas.current.treeType)\n    } \n    window.addEventListener(\"resize\", handleResize);\n    window.addEventListener(\"load\", initialSize);\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n      window.removeEventListener(\"load\", initialSize);\n    };\n  }, [])\n\n  useEffect(() => {\n    phylocanvas.current = Phylocanvas.createTree(\"phylocanvas\")\n  }, [])\n\n  useEffect(() => {\n    phylocanvas.current.load(props.tree)\n  }, [props.tree])\n\n  useEffect(() => {\n    if (typeList.current.includes(props.type)) {\n      phylocanvas.current.setTreeType(props.type)\n    } else {\n      phylocanvas.current.setTreeType(\"rectangular\")\n    }\n    //setTextSize(props.textSize * getPixelRatio(phylocanvas.current.canvas) / 2);\n    phylocanvas.current.setNodeSize(nodeSizeRef.current)\n    phylocanvas.current.setTextSize(textSizeRef.current)\n    phylocanvas.current.lineWidth = props.lineWidth * getPixelRatio(phylocanvas.current.canvas) / 2\n }, [props.type])\n\n  useEffect(() => {\n    setNodeSize(props.nodeSize * getPixelRatio(phylocanvas.current.canvas) / 2)\n    phylocanvas.current.setNodeSize(nodeSizeRef.current)\n  }, [props.nodeSize])\n\n  useEffect(() => {\n    setTextSize(props.textSize * getPixelRatio(phylocanvas.current.canvas) / 2);\n    phylocanvas.current.setTextSize(textSizeRef.current)\n  }, [props.textSize])\n\n  useEffect(() => {\n    phylocanvas.current.showLabels = props.labels\n    phylocanvas.current.alignLabels = props.align\n    phylocanvas.current.lineWidth = props.lineWidth * getPixelRatio(phylocanvas.current.canvas) / 2\n    phylocanvas.current.draw()\n  }, [props.labels, props.align, props.lineWidth])\n\n  useEffect(() => {\n    phylocanvas.current.pairwiseOps.clusterDistance = props.clusterDistance\n    phylocanvas.current.pairwiseOps.clusterSamples = props.clusterSamples\n    console.log(phylocanvas.current)\n    phylocanvas.current.pairwiseOps.clusterDraw = true\n    phylocanvas.current.draw()\n  }, [props.clusterDistance, props.clusterSamples])\n\n  return (\n    <div id=\"phylocanvas\" style={{height: heightRef.current + \"px\", width: \"100%\", minHeight: minHeight + \"px\", minWidth: minWidth + \"px\"}}></div>\n  )\n}\n\nexport default PhylocanvasView;\n","import React, {useEffect, useState} from \"react\";\nimport Phylocanvas from \"../phylocanvas/Phylocanvas.js\";\n\nfunction PhylocanvasView() {\n  const [tree, setTree] = useState(\"(A:1)B;\");\n  const [type, setType] = useState(\"radial\");\n  const [labels, setLabels] = useState(true);\n  const [align, setAlign] = useState(false);\n  const [nodeSize, setNodeSize] = useState(10);\n  const [textSize, setTextSize] = useState(15);\n  const [lineWidth, setLineWidth] = useState(2);\n  const [clusterDistance, setClusterDistance] = useState(3);\n  const [clusterSamples, setClusterSamples] = useState(3);\n\n  useEffect(() => {\n    setTree(\"(((((((((GAS-TG262730-095:6.5,TG78255:6.5):2,TG93342:4):0.5,((((TG77939:0,(GAS-TG93657:0,GAS_TG93657:0):1,GAS-TG262282-095:4):0.5,((GAS-TG265461-095:0,(AZ_GAS_TG93637:0,GAS-TG93661:0,GAS_TG93661:0):2):1,(TG92312:0,TG92296:0):1):1.5,TG92248:3,((TG77951:1.5,((GAS-TG114483-xx-CL-USA-2018-081-JB:0,GAS-TG133136-095:1,GAS-TG265457-095:1,GAS-AZ00097772-095:5):0.5,GAS-TG262724-095:2.5):2.5):1.5,TG78167:1.5):4):3,TG78091:6):0.5,(((GAS-TG264245-095:2,(GAS-TG263365-095:0,GAS-TG264943-095:0):4):2,TG78195:5):0.5,((GAS-AZ00096535-095:0.5,(GAS-TG262761-095:0,TG92324:0,GAS-AZ00104982-095:2,GAS-TG263373-095:2):0.5):0.5,((GAS-TG133036-095:0,(GAS-TG264144-095:0,GAS-AZ00099104-095:2):2):1.5,(GAS-AZ00098934-095:0,GAS-TG113124-xx-CL-USA-2018-081-JB:0,GAS-AZ00096587-095:1):1.5):0.5):1.5):3.5):1.5):8,(((((((TG93354:2,TG78207:5):0.5,GAS-AZ00097136-095:11.5):0.5,GAS-TG133056-095:7.5):0.5,((GAS-TG114463-xx-CL-USA-2018-081-JB:1,TG92352:1):1,TG92304:3):10.5):0.5,((TG78139:3,TG78135:5):0.5,TG77975:3.5):0.5):1,GAS-TG264961-095:4):4,GAS-TG264410-095:14):12):15.5,(GAS-TG263371-095:0,48-P:1,((GAS-TG133148-095:0,GAS-TG132944-095:0,GAS-TG132972-095:0):2,(GAS-TG133052-095:0,GAS-TG133168-095:0):2):1,GAS-TG133128-095:1,(71-P:0,GAS-TG133016-095:0,GAS-TG133024-095:0,GAS-TG133084-095:0,GAS-TG133140-095:0):2):27.5):542,(((TG78063:0,TG78143:0):3.5,06_283016:7.5):14,TG93378:25):601):294.5,(((((((((GAS-TG93649:0,GAS_TG93649:0):3,Streptococcus-Group-A-TG93461:5):1,(GAS-TG133888-095:0,GAS-TG264954-095:0,GAS-TG265455-095:0,TG92284:0,GAS-TG253210-095:1,GAS-TG262286-095:1,GAS-TG262720-095:1,GAS-FMCTG95165-xx-CL-USA-2017-040-JB:2,GAS-TG133996-095:3):6):0.5,GAS-AZ00097292-095:8.5):2,GAS-TG262728-095:12):0.5,(((TG93242:5,GAS-TG257140-095:9):4,TG93382:4,TG92970:5):0.5,TG92252:11.5):0.5):5,GAS-TG132920-095:15):25.5,((((06_286011:0,TG93442:0):4,06_284001:9):3.5,TG78099:3.5,TG93346:9):1,(TG78075:6,TG78051:7):3):66.5):16,TG78271:52):849.5):14,(((((((((68-P:1,GAS-TG132860-095:2,(GAS-TG134544-095:0,GAS-TG253208-081:0,GAS-TG257032-095:0,GAS-TG265449-095:0,GAS-TG263375-095:1,(GAS-TG264402-095:0,GAS-TG264413-095:0):1,GAS-TG134548-095:2):7):1,(TG93621:2,GAS-TG257136-095:6):2,(GAS-TG253216-095:4,GAS-TG133124-095:6):4,TG92712:5,(GAS-TG132888-095:0,GAS-TG133164-095:0):7):0.5,TG93210:8.5):0.5,(((GAS_TG93689:3,GAS-TG133132-095:7):0.5,GAS-TG133160-095:4.5):0.5,(GAS-AZ00097462-095:0,GAS-TG264251-095:0):6.5):1,(((31316:0,31315:0,31642:0):2,(TG92736:0,TG92748:0,TG92752:0,TG92744:1):2,GAS-TG114447-xx-CL-USA-2018-081-JB:5):0.5,((TG92340:3,TG128496:4):0.5,GAS-TG262284-095:3.5):1.5):1.5,(GAS-TG132852-095:0,GAS-TG132904-095:0):8):0.5,TG92280:8.5):0.5,(((TG92364:0,GAS-TG132924-095:2,TG92220:2):0.5,GAS-TG133968-095:6.5):0.5,(TG92140:1,GAS-TG133988-095:2):1.5):2.5):0.5,((((((R:0,GAS-TG133876-095:1):2,TG93993:2,TG93625:4):0.5,GAS-TG132844-095:1.5):0.5,GAS-TG264242-095:5.5):0.5,(((TG92212:1.5,TG92148:3.5):2.5,GAS-TG264236-095:4.5):0.5,(((GAS-AZ00105903-095:0,GAS-TG264953-095:1):2,(GAS_TG93701:0,GAS_TG93705:0):2,(GAS-TG132916-095:0,GAS-TG133064-095:0):3):2.5,((GAS-AZ00106486-095:0,GAS-TG265363-095:0,(GAS-TG264231-095:0,GAS-AZ00097422-095:0,GAS-AZ00098554-095:0):2):1,GAS-TG134368-095:1,GAS-TG253222-095:1,GAS-TG134032-095:2):7.5):1.5):1.5):0.5,((GAS-TG262751-095:2,TG92756:7):2,((GAS-TG134064-095:0,GAS-TG264408-095:2):1.5,GAS-FMCTG98539-xx-CL-USA-2017-040-JB:2.5):4):0.5):0.5):121.5,((TG78103:4.5,TG93370:10.5):2,(TG93290:1.5,TG77991:3.5):4):136.5):337.5,(TG93262:3,TG78175:4):544.5):695):11\");\n    setType(\"rectangular\");\n  }, [])\n\n  return (\n    <div>\n      <h1>Phylocanvas Demo</h1>\n      <Phylocanvas\n        tree = {tree}\n        type = {type}\n        labels = {labels}\n        align = {align}\n        nodeSize = {nodeSize}\n        textSize = {textSize}\n        lineWidth = {lineWidth}\n        clusterDistance = {clusterDistance}\n        clusterSamples = {clusterSamples}\n      />\n      <h5>Type:</h5>\n      <button onClick={() => setType(\"radial\")}>Radial</button>\n      <button onClick={() => setType(\"rectangular\")}>Rectangular</button>\n      <button onClick={() => setType(\"circular\")}>Circular</button>\n      <button onClick={() => setType(\"diagonal\")}>Diagonal</button>\n      <button onClick={() => setType(\"hierarchical\")}>Hierarchical</button>\n      <h5>Cluster Detection:</h5>\n      <button onClick={() => setClusterDistance(clusterDistance + 1)}>ClusterDistance + 1</button>\n      <button onClick={() => setClusterDistance(clusterDistance - 1)}>ClusterDistance - 1</button>\n      <button onClick={() => setClusterSamples(clusterSamples + 1)}>ClusterSamples + 1</button>\n      <button onClick={() => setClusterSamples(clusterSamples - 1)}>ClusterSamples - 1</button>\n      <h5>Toggle:</h5>\n      <button onClick={() => setLabels(!labels)}>Labels</button>\n      <button onClick={() => setAlign(!align)}>Align</button>\n      <h5>Style:</h5>\n      <button onClick={() => setNodeSize(nodeSize + 1)}>Node Size + 1</button>\n      <button onClick={() => setNodeSize(nodeSize - 1)}>Node Size - 1</button>\n      <button onClick={() => setTextSize(textSize + 1)}>Text Size + 1</button>\n      <button onClick={() => setTextSize(textSize - 1)}>Text Size - 1</button>\n      <button onClick={() => setLineWidth(lineWidth + 1)}>Line Width + 1</button>\n      <button onClick={() => setLineWidth(lineWidth - 1)}>Line Width - 1</button>\n    </div>\n  )\n}\n\nexport default PhylocanvasView;\n","import React, { useEffect, useRef } from \"react\";\nimport Leaflet from \"leaflet\";\nimport { MapContainer, TileLayer, Marker, Popup } from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport icon from 'leaflet/dist/images/marker-icon.png';\nimport iconShadow from 'leaflet/dist/images/marker-shadow.png';\nimport iconRetina from 'leaflet/dist/images/marker-icon-2x.png';\n\n/*function SetView() {\n  const map = useMapEvent('click', () => {\n    map.setCenter([0,0])\n  })\n  return null  \n}*/\n\nfunction LeafletView(props) {\n\n  delete Leaflet.Icon.Default.prototype._getIconUrl;\n  Leaflet.Icon.Default.mergeOptions({\n    iconRetinaUrl: iconRetina,\n    iconUrl: icon,\n    shadowUrl: iconShadow\n  });\n\n  useEffect(() => {\n  }, [props.center])\n\n  return (\n    <MapContainer style={{ height: '400px' }} center={props.center} zoom={props.zoom} scrollWheelZoom={false}>\n      <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" />\n      <Marker position={props.center}>\n        <Popup>\n          A pretty CSS3 popup. <br /> Easily customizable.\n        </Popup>\n      </Marker>\n    </MapContainer>\n  )\n}\n\nexport default LeafletView;\n","import React, { useEffect, useState } from \"react\";\nimport Leaflet from \"../leaflet/Leaflet.js\";\n\nfunction LeafletView() {\n  const [center, setCenter] = useState([35.2, -111.65]);\n  const [zoom, setZoom] = useState(6)\n\n  useEffect(() => {\n    document.getElementById(\"demoLeafletXCenter\").value = center[0]\n    document.getElementById(\"demoLeafletYCenter\").value = center[1]\n  }, [])  \n\n  return (\n    <div>\n      <h1>Leaflet Demo</h1>\n      <Leaflet\n        center = {center}\n        zoom = {zoom}\n      />\n      <h5>Marker Position:</h5>\n      X: <input id=\"demoLeafletXCenter\" onChange={() => {setCenter([document.getElementById(\"demoLeafletXCenter\").value, center[1]])}}></input>\n      &emsp;Y: <input id=\"demoLeafletYCenter\" onChange={() => {setCenter([center[0], document.getElementById(\"demoLeafletYCenter\").value])}}></input>\n    </div>\n  )\n}\n\nexport default LeafletView;\n","import React, {useEffect} from \"react\";\nimport Plotly from \"plotly.js-dist\";\n\nfunction PlotlyView(props) {\n\n  useEffect(() => {\n    Plotly.react('plotly', props.data)\n  }, [props.data])\n\n  return (\n    <div id=\"plotly\"></div>\n  )\n}\n\nexport default PlotlyView;\n","import React, {useEffect, useState} from \"react\";\nimport Plotly from \"../plotly/Plotly.js\";\n\nfunction PlotlyView() {\n  const [x, setX] = useState([\"data1\", \"data2\"]);\n  const [y, setY] = useState([15, 20]);\n  const [type, setType] = useState(\"bar\");\n\n  useEffect(() => {\n    document.getElementById(\"demoPlotlyXLabel\").value = x[0]\n    document.getElementById(\"demoPlotlyYLabel\").value = x[1]\n    document.getElementById(\"demoPlotlyXValue\").value = y[0]\n    document.getElementById(\"demoPlotlyYValue\").value = y[1]\n  }, [])\n\n  return (\n    <div>\n      <h1>Plotly Demo</h1>\n      <Plotly\n        data = {\n          [\n            {\n              x: x,\n              y: y,\n              type: type\n            }\n          ]\n        }\n      />\n      <h5>Labels:</h5>\n      X: <input id=\"demoPlotlyXLabel\" onChange={() => setX([document.getElementById(\"demoPlotlyXLabel\").value, x[1]])}></input>\n      &emsp;Y: <input id=\"demoPlotlyYLabel\" onChange={() => setX([x[0], document.getElementById(\"demoPlotlyYLabel\").value])}></input>\n      <h5>Data:</h5>\n      X: <input id=\"demoPlotlyXValue\" onChange={() => setY([parseInt(document.getElementById(\"demoPlotlyXValue\").value), y[1]])}></input>\n      &emsp;Y: <input id=\"demoPlotlyYValue\" onChange={() => setY([y[0], parseInt(document.getElementById(\"demoPlotlyYValue\").value)])}></input>\n      <h5>Type:</h5>\n      <button onClick={() => setType(\"bar\")}>Bar</button>\n      <button onClick={() => setType(\"scatter\")}>Scatter</button>\n    </div>\n  )\n}\n\nexport default PlotlyView;\n","import React, {useEffect, useState} from \"react\";\nimport Phylocanvas from \"../phylocanvas/Phylocanvas.js\";\n\nfunction PhylocanvasView() {\n  const [tree, setTree] = useState(\"(A:1)B;\");\n  const [type, setType] = useState(\"radial\");\n  const [labels, setLabels] = useState(true);\n  const [align, setAlign] = useState(false);\n  const [nodeSize, setNodeSize] = useState(10);\n  const [textSize, setTextSize] = useState(15);\n  const [lineWidth, setLineWidth] = useState(2);\n  const [clusterDistance, setClusterDistance] = useState(3);\n  const [clusterSamples, setClusterSamples] = useState(3);\n\n  useEffect(() => {\n    setTree(\"((((((((GAS-TG262730-095:6.5,TG78255:6.5):2,TG93342:4):0.5,((((TG77939:0,(GAS-TG93657:0,GAS_TG93657:0):1,GAS-TG262282-095:4):0.5,((GAS-TG265461-095:0,(AZ_GAS_TG93637:0,GAS-TG93661:0,GAS_TG93661:0):2):1,(TG92312:0,TG92296:0):1):1.5,TG92248:3,((TG77951:1.5,((GAS-TG114483-xx-CL-USA-2018-081-JB:0,GAS-TG133136-095:1,GAS-TG265457-095:1,GAS-AZ00097772-095:5):0.5,GAS-TG262724-095:2.5):2.5):1.5,TG78167:1.5):4):3,TG78091:6):0.5,(((GAS-TG264245-095:2,(GAS-TG263365-095:0,GAS-TG264943-095:0):4):2,TG78195:5):0.5,((GAS-AZ00096535-095:0.5,(GAS-TG262761-095:0,TG92324:0,GAS-AZ00104982-095:2,GAS-TG263373-095:2):0.5):0.5,((GAS-TG133036-095:0,(GAS-TG264144-095:0,GAS-AZ00099104-095:2):2):1.5,(GAS-AZ00098934-095:0,GAS-TG113124-xx-CL-USA-2018-081-JB:0,GAS-AZ00096587-095:1):1.5):0.5):1.5):3.5):1.5):8,(((((((TG93354:2,TG78207:5):0.5,GAS-AZ00097136-095:11.5):0.5,GAS-TG133056-095:7.5):0.5,((GAS-TG114463-xx-CL-USA-2018-081-JB:1,TG92352:1):1,TG92304:3):10.5):0.5,((TG78139:3,TG78135:5):0.5,TG77975:3.5):0.5):1,GAS-TG264961-095:4):4,GAS-TG264410-095:14):12):15.5,(GAS-TG263371-095:0,48-P:1,((GAS-TG133148-095:0,GAS-TG132944-095:0,GAS-TG132972-095:0):2,(GAS-TG133052-095:0,GAS-TG133168-095:0):2):1,GAS-TG133128-095:1,(71-P:0,GAS-TG133016-095:0,GAS-TG133024-095:0,GAS-TG133084-095:0,GAS-TG133140-095:0):2):27.5):542,(((TG78063:0,TG78143:0):3.5,06_283016:7.5):14,TG93378:25):601):294.5,(((((((((GAS-TG93649:0,GAS_TG93649:0):3,Streptococcus-Group-A-TG93461:5):1,(GAS-TG133888-095:0,GAS-TG264954-095:0,GAS-TG265455-095:0,TG92284:0,GAS-TG253210-095:1,GAS-TG262286-095:1,GAS-TG262720-095:1,GAS-FMCTG95165-xx-CL-USA-2017-040-JB:2,GAS-TG133996-095:3):6):0.5,GAS-AZ00097292-095:8.5):2,GAS-TG262728-095:12):0.5,(((TG93242:5,GAS-TG257140-095:9):4,TG93382:4,TG92970:5):0.5,TG92252:11.5):0.5):5,GAS-TG132920-095:15):25.5,((((06_286011:0,TG93442:0):4,06_284001:9):3.5,TG78099:3.5,TG93346:9):1,(TG78075:6,TG78051:7):3):66.5):16,TG78271:52):849.5):14,(((((((((68-P:1,GAS-TG132860-095:2,(GAS-TG134544-095:0,GAS-TG253208-081:0,GAS-TG257032-095:0,GAS-TG265449-095:0,GAS-TG263375-095:1,(GAS-TG264402-095:0,GAS-TG264413-095:0):1,GAS-TG134548-095:2):7):1,(TG93621:2,GAS-TG257136-095:6):2,(GAS-TG253216-095:4,GAS-TG133124-095:6):4,TG92712:5,(GAS-TG132888-095:0,GAS-TG133164-095:0):7):0.5,TG93210:8.5):0.5,(((GAS_TG93689:3,GAS-TG133132-095:7):0.5,GAS-TG133160-095:4.5):0.5,(GAS-AZ00097462-095:0,GAS-TG264251-095:0):6.5):1,(((31316:0,31315:0,31642:0):2,(TG92736:0,TG92748:0,TG92752:0,TG92744:1):2,GAS-TG114447-xx-CL-USA-2018-081-JB:5):0.5,((TG92340:3,TG128496:4):0.5,GAS-TG262284-095:3.5):1.5):1.5,(GAS-TG132852-095:0,GAS-TG132904-095:0):8):0.5,TG92280:8.5):0.5,(((TG92364:0,GAS-TG132924-095:2,TG92220:2):0.5,GAS-TG133968-095:6.5):0.5,(TG92140:1,GAS-TG133988-095:2):1.5):2.5):0.5,((((((R:0,GAS-TG133876-095:1):2,TG93993:2,TG93625:4):0.5,GAS-TG132844-095:1.5):0.5,GAS-TG264242-095:5.5):0.5,(((TG92212:1.5,TG92148:3.5):2.5,GAS-TG264236-095:4.5):0.5,(((GAS-AZ00105903-095:0,GAS-TG264953-095:1):2,(GAS_TG93701:0,GAS_TG93705:0):2,(GAS-TG132916-095:0,GAS-TG133064-095:0):3):2.5,((GAS-AZ00106486-095:0,GAS-TG265363-095:0,(GAS-TG264231-095:0,GAS-AZ00097422-095:0,GAS-AZ00098554-095:0):2):1,GAS-TG134368-095:1,GAS-TG253222-095:1,GAS-TG134032-095:2):7.5):1.5):1.5):0.5,((GAS-TG262751-095:2,TG92756:7):2,((GAS-TG134064-095:0,GAS-TG264408-095:2):1.5,GAS-FMCTG98539-xx-CL-USA-2017-040-JB:2.5):4):0.5):0.5):121.5,((TG78103:4.5,TG93370:10.5):2,(TG93290:1.5,TG77991:3.5):4):136.5):337.5,(TG93262:3,TG78175:4):544.5):695):0;\");\n    setType(\"rectangular\");\n  }, [])\n\n  return (\n    <div>\n      <Phylocanvas\n        tree = {tree}\n        type = {type}\n        labels = {labels}\n        align = {align}\n        nodeSize = {nodeSize}\n        textSize = {textSize}\n        lineWidth = {lineWidth}\n        clusterDistance = {clusterDistance}\n        clusterSamples = {clusterSamples}\n      />\n      <h5>Type:</h5>\n      <button onClick={() => setType(\"radial\")}>Radial</button>\n      <button onClick={() => setType(\"rectangular\")}>Rectangular</button>\n      <button onClick={() => setType(\"circular\")}>Circular</button>\n      <button onClick={() => setType(\"diagonal\")}>Diagonal</button>\n      <button onClick={() => setType(\"hierarchical\")}>Hierarchical</button>\n      <h5>Cluster Detection:</h5>\n      <button onClick={() => setClusterDistance(clusterDistance + 1)}>ClusterDistance + 1</button>\n      <button onClick={() => setClusterDistance(Math.max(clusterDistance - 1, 1))}>ClusterDistance - 1</button>\n      <button onClick={() => setClusterSamples(clusterSamples + 1)}>ClusterSamples + 1</button>\n      <button onClick={() => setClusterSamples(Math.max(clusterSamples - 1, 1))}>ClusterSamples - 1</button>\n      <h5>Toggle:</h5>\n      <button onClick={() => setLabels(!labels)}>Labels</button>\n      <button onClick={() => setAlign(!align)}>Align</button>\n      <h5>Style:</h5>\n      <button onClick={() => setNodeSize(nodeSize + 1)}>Node Size + 1</button>\n      <button onClick={() => setNodeSize(Math.max(nodeSize - 1, 1))}>Node Size - 1</button>\n      <button onClick={() => setTextSize(textSize + 1)}>Text Size + 1</button>\n      <button onClick={() => setTextSize(Math.max(textSize - 1, 1))}>Text Size - 1</button>\n      <button onClick={() => setLineWidth(lineWidth + 1)}>Line Width + 1</button>\n      <button onClick={() => setLineWidth(Math.max(lineWidth - 1, 1))}>Line Width - 1</button>\n    </div>\n  )\n}\n\nexport default PhylocanvasView;\n","import React, {useEffect, useState, useRef} from \"react\";\nimport {BrowserRouter, Switch, Route} from \"react-router-dom\";\nimport DemoPhylocanvas from \"../demo/DemoPhylocanvas.js\";\nimport DemoLeaflet from \"../demo/DemoLeaflet.js\";\nimport DemoPlotly from \"../demo/DemoPlotly.js\";\nimport GAS from \"../gas/GAS.js\";\n\nfunction Body() {\n  let [height, setHeight] = useState(0);\n  let ref = useRef();\n\n  useEffect(() => {\n    setHeight(ref.current.clientHeight)\n    function handleResize() {\n      setHeight(ref.current.clientHeight)\n      console.log(ref.current.clientHeight)\n    }\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, [])\n\n  return (\n    <div ref={ref} className=\"Nav-body\">\n      {height}\n      <BrowserRouter basename=\"/epitools\">\n        <Switch>\n          <Route exact path=\"/\">\n            <p>default</p>\n          </Route>\n          <Route exact path=\"/demo-phylocanvas\">\n            <DemoPhylocanvas />\n          </Route>\n          <Route exact path=\"/demo-leaflet\">\n            <DemoLeaflet />\n          </Route>\n          <Route exact path=\"/demo-plotly\">\n            <DemoPlotly />\n          </Route>\n          <Route exact path=\"/gas\">\n            <GAS />\n          </Route>\n        </Switch>\n      </BrowserRouter>\n    </div>\n  )\n}\n\nexport default Body;\n","import React from \"react\";\n\nfunction Footer() {\n  return (\n    <div className=\"Nav-footer\">\n      hello footer\n    </div>\n  )\n}\n\nexport default Footer;\n","import React from \"react\";\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Header from \"./nav/Header.js\";\nimport Body from \"./nav/Body.js\"\nimport Footer from \"./nav/Footer.js\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Body />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.js';\nimport reportWebVitals from './reportWebVitals.js';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}