{"version":3,"sources":["tgen-coh.png","nav/Header.js","phylocanvas/Phylocanvas.js","demo/DemoPhylocanvas.js","leaflet/Leaflet.js","demo/DemoLeaflet.js","plotly/Plotly.js","demo/DemoPlotly.js","nav/Body.js","nav/Footer.js","App.js","reportWebVitals.js","index.js"],"names":["Header","Navbar","sticky","bg","variant","Brand","href","src","logo","height","className","alt","Nav","Link","NavDropdown","title","Item","PhylocanvasView","props","phylocanvas","useRef","typeList","useEffect","current","Phylocanvas","createTree","load","tree","includes","type","setTreeType","showLabels","labels","alignLabels","align","setNodeSize","nodeSize","setTextSize","textSize","lineWidth","draw","id","useState","setTree","setType","setLabels","setAlign","setLineWidth","onClick","LeafletView","Leaflet","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","iconRetina","iconUrl","icon","shadowUrl","iconShadow","center","MapContainer","style","zoom","scrollWheelZoom","TileLayer","url","Marker","position","Popup","setCenter","document","getElementById","value","onChange","PlotlyView","Plotly","react","data","x","setX","y","setY","parseInt","Body","basename","exact","path","DemoPhylocanvas","DemoLeaflet","DemoPlotly","Footer","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.2b34318f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/tgen-coh.453f08b1.png\";","import React from \"react\";\nimport { Navbar, Nav, NavDropdown } from \"react-bootstrap\";\nimport logo from \"../tgen-coh.png\";\n\nfunction Header() {\n  return (\n    <div>\n      <Navbar sticky=\"top\" bg=\"light\" variant=\"light\">\n        <Navbar.Brand href=\"home\">\n          <img\n            src={logo}\n            height=\"40\"\n            className=\"d-inline-block align-center mr-3\"\n            alt=\"Epitools Logo\"\n          />{\" \"}\n          One Health Genomic Epi Tools\n        </Navbar.Brand>\n        <Nav className=\"ml-auto\">\n          <Nav.Link href=\"home\">Home</Nav.Link>\n          <NavDropdown title=\"Component Demo\">\n            <NavDropdown.Item href=\"demo-phylocanvas\">Phylocanvas</NavDropdown.Item>\n            <NavDropdown.Item href=\"demo-leaflet\">Leaflet</NavDropdown.Item>\n            <NavDropdown.Item href=\"demo-plotly\">Plotly</NavDropdown.Item>\n          </NavDropdown>\n        </Nav>\n      </Navbar>\n    </div>\n  )\n}\n\nexport default Header;\n","import React, { useEffect, useRef } from \"react\";\nimport Phylocanvas from \"phylocanvas\";\n\nfunction PhylocanvasView(props) {\n  let phylocanvas = useRef();\n  let typeList = useRef([\"radial\", \"rectangular\", \"circular\", \"diagonal\", \"hierarchical\"])\n\n  useEffect(() => {\n    phylocanvas.current = Phylocanvas.createTree(\"phylocanvas\")\n  }, [])\n\n  useEffect(() => {\n    phylocanvas.current.load(props.tree)\n  }, [props.tree])\n\n  useEffect(() => {\n    if (typeList.current.includes(props.type)) {\n      phylocanvas.current.setTreeType(props.type)\n    } else {\n      phylocanvas.current.setTreeType(\"circular\")\n    }\n  }, [props.type])\n\n  useEffect(() => {\n    phylocanvas.current.showLabels = props.labels\n    phylocanvas.current.alignLabels = props.align\n    phylocanvas.current.setNodeSize(props.nodeSize)\n    phylocanvas.current.setTextSize(props.textSize)\n    phylocanvas.current.lineWidth = props.lineWidth\n    phylocanvas.current.draw()\n  }, [props.type, props.labels, props.align, props.nodeSize, props.textSize, props.lineWidth])\n\n  return (\n    <div id=\"phylocanvas\"></div>\n  )\n}\n\nexport default PhylocanvasView;\n","import React, {useEffect, useState} from \"react\";\nimport Phylocanvas from \"../phylocanvas/Phylocanvas.js\";\n\nfunction PhylocanvasView() {\n  const [tree, setTree] = useState(\"(A:1)B;\");\n  const [type, setType] = useState(\"radial\");\n  const [labels, setLabels] = useState(true);\n  const [align, setAlign] = useState(false);\n  const [nodeSize, setNodeSize] = useState(10);\n  const [textSize, setTextSize] = useState(20);\n  const [lineWidth, setLineWidth] = useState(2);\n\n  useEffect(() => {\n    setTree(\"(A:2.5,B:0.2,(C:0.3,D:0.4)E:0.9)F;\");\n    setType(\"rectangular\");\n  }, [])\n\n  return (\n    <div>\n      <h1>Phylocanvas Demo</h1>\n      <Phylocanvas\n        tree = {tree}\n        type = {type}\n        labels = {labels}\n        align = {align}\n        nodeSize = {nodeSize}\n        textSize = {textSize}\n        lineWidth = {lineWidth}\n      />\n      <h5>Type:</h5>\n      <button onClick={() => setType(\"radial\")}>Radial</button>\n      <button onClick={() => setType(\"rectangular\")}>Rectangular</button>\n      <button onClick={() => setType(\"circular\")}>Circular</button>\n      <button onClick={() => setType(\"diagonal\")}>Diagonal</button>\n      <button onClick={() => setType(\"hierarchical\")}>Hierarchical</button>\n      <h5>Toggle:</h5>\n      <button onClick={() => setLabels(!labels)}>Labels</button>\n      <button onClick={() => setAlign(!align)}>Align</button>\n      <h5>Style:</h5>\n      <button onClick={() => setNodeSize(nodeSize + 1)}>Node Size + 1</button>\n      <button onClick={() => setNodeSize(nodeSize - 1)}>Node Size - 1</button>\n      <button onClick={() => setTextSize(textSize + 1)}>Text Size + 1</button>\n      <button onClick={() => setTextSize(textSize - 1)}>Text Size - 1</button>\n      <button onClick={() => setLineWidth(lineWidth + 1)}>Line Width + 1</button>\n      <button onClick={() => setLineWidth(lineWidth - 1)}>Line Width - 1</button>\n    </div>\n  )\n}\n\nexport default PhylocanvasView;\n","import React, { useEffect, useRef } from \"react\";\nimport Leaflet from \"leaflet\";\nimport { MapContainer, TileLayer, Marker, Popup } from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport icon from 'leaflet/dist/images/marker-icon.png';\nimport iconShadow from 'leaflet/dist/images/marker-shadow.png';\nimport iconRetina from 'leaflet/dist/images/marker-icon-2x.png';\n\nfunction LeafletView(props) {\n  const mapRef = useRef();\n\n  delete Leaflet.Icon.Default.prototype._getIconUrl;\n  Leaflet.Icon.Default.mergeOptions({\n    iconRetinaUrl: iconRetina,\n    iconUrl: icon,\n    shadowUrl: iconShadow\n  });\n\n  useEffect(() => {\n  }, [props.center])\n\n  return (\n    <div>\n      <MapContainer style={{ height: '400px' }} center={props.center} zoom={props.zoom} scrollWheelZoom={false}>\n        <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" />\n        <Marker position={props.center}>\n          <Popup>\n            A pretty CSS3 popup. <br /> Easily customizable.\n          </Popup>\n        </Marker>\n      </MapContainer>\n    </div>\n  )\n}\n\nexport default LeafletView;\n","import React, { useEffect, useState } from \"react\";\nimport Leaflet from \"../leaflet/Leaflet.js\";\n\nfunction LeafletView() {\n  const [center, setCenter] = useState([35.2, -111.65]);\n  const [zoom, setZoom] = useState(6)\n\n  useEffect(() => {\n    document.getElementById(\"demoLeafletXCenter\").value = center[0]\n    document.getElementById(\"demoLeafletYCenter\").value = center[1]\n  }, [])  \n\n  return (\n    <div>\n      <h1>Leaflet Demo</h1>\n      <Leaflet\n        center = {center}\n        zoom = {zoom}\n      />\n      <h5>Marker Position:</h5>\n      X: <input id=\"demoLeafletXCenter\" onChange={() => {setCenter([document.getElementById(\"demoLeafletXCenter\").value, center[1]])}}></input>\n      &emsp;Y: <input id=\"demoLeafletYCenter\" onChange={() => {setCenter([center[0], document.getElementById(\"demoLeafletYCenter\").value])}}></input>\n    </div>\n  )\n}\n\nexport default LeafletView;\n","import React, {useEffect} from \"react\";\nimport Plotly from \"plotly.js-dist\";\n\nfunction PlotlyView(props) {\n\n  useEffect(() => {\n    Plotly.react('plotly', props.data)\n  }, [props.data])\n\n  return (\n    <div id=\"plotly\"></div>\n  )\n}\n\nexport default PlotlyView;\n","import React, {useEffect, useState} from \"react\";\nimport Plotly from \"../plotly/Plotly.js\";\n\nfunction PlotlyView() {\n  const [x, setX] = useState([\"data1\", \"data2\"]);\n  const [y, setY] = useState([15, 20]);\n  const [type, setType] = useState(\"bar\");\n\n  useEffect(() => {\n    document.getElementById(\"demoPlotlyXLabel\").value = x[0]\n    document.getElementById(\"demoPlotlyYLabel\").value = x[1]\n    document.getElementById(\"demoPlotlyXValue\").value = y[0]\n    document.getElementById(\"demoPlotlyYValue\").value = y[1]\n  }, [])\n\n  return (\n    <div>\n      <h1>Plotly Demo</h1>\n      <Plotly\n        data = {\n          [\n            {\n              x: x,\n              y: y,\n              type: type\n            }\n          ]\n        }\n      />\n      <h5>Labels:</h5>\n      X: <input id=\"demoPlotlyXLabel\" onChange={() => setX([document.getElementById(\"demoPlotlyXLabel\").value, x[1]])}></input>\n      &emsp;Y: <input id=\"demoPlotlyYLabel\" onChange={() => setX([x[0], document.getElementById(\"demoPlotlyYLabel\").value])}></input>\n      <h5>Data:</h5>\n      X: <input id=\"demoPlotlyXValue\" onChange={() => setY([parseInt(document.getElementById(\"demoPlotlyXValue\").value), y[1]])}></input>\n      &emsp;Y: <input id=\"demoPlotlyYValue\" onChange={() => setY([y[0], parseInt(document.getElementById(\"demoPlotlyYValue\").value)])}></input>\n      <h5>Type:</h5>\n      <button onClick={() => setType(\"bar\")}>Bar</button>\n      <button onClick={() => setType(\"scatter\")}>Scatter</button>\n    </div>\n  )\n}\n\nexport default PlotlyView;\n","import React from \"react\";\nimport {BrowserRouter, Switch, Route} from \"react-router-dom\";\nimport DemoPhylocanvas from \"../demo/DemoPhylocanvas.js\";\nimport DemoLeaflet from \"../demo/DemoLeaflet.js\";\nimport DemoPlotly from \"../demo/DemoPlotly.js\";\n\nfunction Body() {\n  return (\n    <div className=\"Body\">\n      <BrowserRouter basename=\"/epitools\">\n        <Switch>\n          <Route exact path=\"/\">\n            <p>default</p>\n          </Route>\n          <Route exact path=\"/demo-phylocanvas\">\n            <DemoPhylocanvas />\n          </Route>\n          <Route exact path=\"/demo-leaflet\">\n            <DemoLeaflet />\n          </Route>\n          <Route exact path=\"/demo-plotly\">\n            <DemoPlotly />\n          </Route>\n        </Switch>\n      </BrowserRouter>\n    </div>\n  )\n}\n\nexport default Body;\n","import React from \"react\";\n\nfunction Footer() {\n  return (\n    <div className=\"Footer\">\n      hello footer\n    </div>\n  )\n}\n\nexport default Footer;\n","import React from \"react\";\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Header from \"./nav/Header.js\";\nimport Body from \"./nav/Body.js\"\nimport Footer from \"./nav/Footer.js\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Body />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.js';\nimport reportWebVitals from './reportWebVitals.js';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}