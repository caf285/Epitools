{"version":3,"sources":["tgen-coh.png","nav/Header.js","../my_modules/phylocanvas-plugin-scalebar/index.js","../my_modules/phylocanvas-plugin-branch-length/index.js","../my_modules/phylocanvas-plugin-root/index.js","../my_modules/phylocanvas-plugin-pairwise-ops/index.js","phylocanvas/Phylocanvas.js","demo/DemoPhylocanvas.js","leaflet/Leaflet.js","demo/DemoLeaflet.js","plotly/Plotly.js","demo/DemoPlotly.js","gas/GAS.js","nav/Body.js","nav/Footer.js","App.js","reportWebVitals.js","index.js"],"names":["Header","Navbar","sticky","bg","variant","Brand","href","src","logo","height","className","alt","Nav","Link","NavDropdown","title","Item","getPixelRatio","utils","canvas","DEFAULTS","active","width","fillStyle","strokeStyle","lineWidth","fontFamily","fontSize","textBaseline","textAlign","digits","position","bottom","left","LOG10","Math","log","drawScalebar","scalebar","this","zoom","branchScalar","cxt","pixelRatio","save","x","centre","right","loadError","y","top","middle","clearRect","font","beginPath","moveTo","lineTo","stroke","closePath","scale","minDigitis","parseInt","abs","label","toFixed","fillText","restore","drawBranchLength","branchLength","pi","textSize","branch","branchColour","branches","offsetx","startx","centerx","offsety","starty","centery","treeType","angle","drawRoot","root","pairwiseMatrix","clusterActive","clusterDraw","clusterMatrix","clusterMaxDistance","clusterDistance","clusterSamples","walkMatrix","tree","node","path","distance","newDistance","Array","from","newPath","push","leaf","id","pairwiseOps","internalNodes","children","i","leaves","shift","nodeLength","slice","reduce","previousValue","currentValue","Object","keys","includes","buildPairwiseMatrix","console","buildClusterMatrix","cluster","pair","length","sort","JSON","stringify","colorNode","setDisplay","colour","parse","findLeaves","draw","drawClusterInfo","String","ctx","measureText","Phylocanvas","plugin","decorate","delegate","args","config","assign","Tree","apply","rootLine","PhylocanvasView","props","phylocanvas","useRef","typeList","useEffect","current","createTree","load","type","setTreeType","setNodeSize","nodeSize","setTextSize","showLabels","labels","alignLabels","align","useState","setTree","setType","setLabels","setAlign","setLineWidth","setClusterDistance","setClusterSamples","onClick","LeafletView","Leaflet","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","iconRetina","iconUrl","icon","shadowUrl","iconShadow","center","MapContainer","style","scrollWheelZoom","TileLayer","url","Marker","Popup","setCenter","document","getElementById","value","onChange","PlotlyView","Plotly","react","data","setX","setY","Body","basename","exact","DemoPhylocanvas","DemoLeaflet","DemoPlotly","GAS","Footer","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.f2ab91e1.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/tgen-coh.453f08b1.png\";","import React from \"react\";\nimport { Navbar, Nav, NavDropdown } from \"react-bootstrap\";\nimport logo from \"../tgen-coh.png\";\n\nfunction Header() {\n  return (\n    <div>\n      <Navbar sticky=\"top\" bg=\"light\" variant=\"light\">\n        <Navbar.Brand href=\"home\">\n          <img\n            src={logo}\n            height=\"60\"\n            className=\"d-inline-block align-center mr-3\"\n            alt=\"Epitools Logo\"\n          />{\" \"}\n          One Health Genomic Epi Tools\n        </Navbar.Brand>\n        <Nav className=\"ml-auto\">\n          <Nav.Link href=\"home\">Home</Nav.Link>\n          <Nav.Link href=\"gas\">GAS</Nav.Link>\n          <NavDropdown title=\"Component Demo\">\n            <NavDropdown.Item href=\"demo-phylocanvas\">Phylocanvas</NavDropdown.Item>\n            <NavDropdown.Item href=\"demo-leaflet\">Leaflet</NavDropdown.Item>\n            <NavDropdown.Item href=\"demo-plotly\">Plotly</NavDropdown.Item>\n          </NavDropdown>\n        </Nav>\n      </Navbar>\n    </div>\n  )\n}\n\nexport default Header;\n","import { Tree, utils } from 'phylocanvas';\n\nconst { getPixelRatio } = utils.canvas;\n\nconst DEFAULTS = {\n  active: true,\n  width: 100,\n  height: 20,\n  fillStyle: 'black',\n  strokeStyle: 'black',\n  lineWidth: 1,\n  fontFamily: 'Sans-serif',\n  fontSize: 16,\n  textBaseline: 'bottom',\n  textAlign: 'center',\n  digits: 2,\n  position: {\n    bottom: 10,\n    left: 10,\n  },\n};\n\nconst INVALID_HORIZONTAL_POSITION = 'Invalid horizontal position specified' +\n  'Supported values are `left`, `centre`, or `right`';\nconst INVALID_VERTICAL_POSITION = 'Invalid vertical position specified' +\n  'Supported values are `top`, `middle`, or `bottom`';\n\nconst LOG10 = Math.log(10);\n\nfunction drawScalebar() {\n  const { scalebar, zoom, branchScalar } = this;\n  const { position } = scalebar;\n  const cxt = this.canvas;\n  const canvas = cxt.canvas;\n  const pixelRatio = getPixelRatio(cxt);\n  const width = pixelRatio * scalebar.width;\n  const height = pixelRatio * scalebar.height;\n  const lineWidth = pixelRatio * scalebar.lineWidth;\n  const fontSize = pixelRatio * scalebar.fontSize;\n\n  cxt.save();\n\n  let x = 0;\n  if (typeof position.left !== 'undefined') {\n    x = scalebar.lineWidth + position.left;\n  } else if (typeof position.centre !== 'undefined') {\n    x = (canvas.width / 2) - (width / 2) + position.centre;\n  } else if (typeof position.right !== 'undefined') {\n    x = canvas.width - width - scalebar.lineWidth - position.right;\n  } else {\n    this.loadError(INVALID_HORIZONTAL_POSITION);\n  }\n  let y = 0;\n  if (typeof position.top !== 'undefined') {\n    y = position.top;\n  } else if (typeof position.middle !== 'undefined') {\n    y = (canvas.height / 2) - height + position.middle;\n  } else if (typeof position.bottom !== 'undefined') {\n    y = canvas.height - height - position.bottom;\n  } else {\n    this.loadError(INVALID_VERTICAL_POSITION);\n  }\n  cxt.clearRect(x, y, width, height);\n\n  cxt.font = `${fontSize}px ${scalebar.fontFamily}`;\n  cxt.fillStyle = scalebar.fillStyle;\n  cxt.strokeStyle = scalebar.strokeStyle;\n  cxt.lineWidth = lineWidth;\n  cxt.textBaseline = scalebar.textBaseline;\n  cxt.textAlign = scalebar.textAlign;\n\n  cxt.beginPath();\n  cxt.moveTo(x, y);\n  cxt.lineTo(x + width, y);\n  cxt.stroke();\n  cxt.moveTo(x, y);\n  cxt.lineTo(x, y + height);\n  cxt.stroke();\n  cxt.moveTo(x + width, y);\n  cxt.lineTo(x + width, y + height);\n  cxt.stroke();\n  cxt.closePath();\n\n  const scale = width / branchScalar / zoom;\n  const minDigitis = parseInt(Math.abs(Math.log(scale) / LOG10), 10);\n  const label = scale.toFixed(minDigitis + scalebar.digits);\n  cxt.fillText(label, x + width / 2, y + height);\n\n  cxt.restore();\n}\n\nexport default function plugin(decorate) {\n  decorate(this, 'createTree', (delegate, args) => {\n    const tree = delegate(...args);\n    const [ , config = {} ] = args;\n    tree.scalebar = Object.assign({}, DEFAULTS, config.scalebar || {});\n    return tree;\n  });\n  decorate(Tree, 'draw', function (delegate, args) {\n    delegate.apply(this, args);\n    if (this.scalebar.active) {\n      drawScalebar.apply(this);\n    }\n  });\n}\n","import { Tree, utils } from 'phylocanvas';\n\nconst { getPixelRatio } = utils.canvas;\n\nconst DEFAULTS = {\n  active: true,\n};\n\nfunction drawBranchLength() {\n\n  const { branchLength } = this;\n  const cxt = this.canvas;\n  const canvas = cxt.canvas;\n  const pixelRatio = getPixelRatio(cxt);\n  const pi = 3.141592653589793\n  const textSize = this.textSize * this.zoom / 2\n\n  cxt.save();\n\n  cxt.font = `${textSize * pixelRatio}px ${this.font}`;\n  cxt.fillStyle = this.branchColour;\n  cxt.textBaseline = \"bottom\";\n  cxt.textAlign = \"center\";\n\n  for (let branch in this.branches) {\n    if (this.branches[branch].branchLength == 0) {\n      continue\n    }\n    branch = this.branches[branch]\n    let x = (this.offsetx + (branch.startx + (branch.centerx - branch.startx) / 2) * this.zoom / 2) * pixelRatio\n    let y = (this.offsety + (branch.starty + (branch.centery - branch.starty) / 2) * this.zoom / 2) * pixelRatio\n    if (this.treeType == \"rectangular\") {\n      y = (this.offsety + branch.centery * this.zoom / 2) * pixelRatio\n    } else if (pi * 1 / 4 < branch.angle && branch.angle < pi * 3 / 4 || pi + pi * 1 / 4 < branch.angle && branch.angle < pi + pi * 3 / 4) {\n      x = (this.offsetx + textSize + branch.centerx * this.zoom / 2) * pixelRatio\n      y += textSize * pixelRatio\n    }\n    cxt.fillText(branch.branchLength, x, y)\n  }\n\n  cxt.restore();\n}\n\nexport default function plugin(decorate) {\n  decorate(this, 'createTree', (delegate, args) => {\n    const tree = delegate(...args);\n    const [ , config = {} ] = args;\n    tree.branchLength = Object.assign({}, DEFAULTS, config.branchLength || {});\n    return tree;\n  });\n  decorate(Tree, 'draw', function (delegate, args) {\n    delegate.apply(this, args);\n    if (this.branchLength.active) {\n      drawBranchLength.apply(this);\n    }\n  });\n}\n","import { Tree, utils } from 'phylocanvas';\n\nconst { getPixelRatio } = utils.canvas;\n\nconst DEFAULTS = {\n  active: true,\n};\n\nfunction drawRoot() {\n\n  const cxt = this.canvas;\n  const pixelRatio = getPixelRatio(cxt);\n\n  cxt.save();\n\n  cxt.strokeStyle = this.branchColour;\n  cxt.lineWidth = this.lineWidth;\n\n  let x = (this.offsetx + (this.root.centerx) * this.zoom / 2) * pixelRatio\n  let y = (this.offsety + (this.root.centery) * this.zoom / 2) * pixelRatio\n\n  cxt.beginPath();\n  cxt.moveTo(x, y);\n  if (this.treeType == \"rectangular\" || this.treeType == \"diagonal\") {\n    cxt.lineTo(x-50, y);\n  } else if (this.treeType == \"hierarchical\") {\n    cxt.lineTo(x, y-50);\n  }\n  cxt.stroke();\n  cxt.closePath();\n\n  cxt.restore();\n}\n\nexport default function plugin(decorate) {\n  decorate(this, 'createTree', (delegate, args) => {\n    const tree = delegate(...args);\n    const [ , config = {} ] = args;\n    tree.rootLine = Object.assign({}, DEFAULTS, config.rootLine || {});\n    return tree;\n  });\n  decorate(Tree, 'draw', function (delegate, args) {\n    delegate.apply(this, args);\n    if (this.rootLine.active) {\n      drawRoot.apply(this);\n    }\n  });\n}\n","import { Tree, utils } from 'phylocanvas';\n\nconst { getPixelRatio } = utils.canvas;\n\nconst DEFAULTS = {\n  active: true,\n  pairwiseMatrix: {},\n  clusterActive: true,\n  clusterDraw: true,\n  clusterMatrix: [],\n  clusterMaxDistance: 20,\n  clusterDistance: 3,\n  clusterSamples: 3,\n};\n\n// OLDER cluster matrix code\n/*\nfunction walkMatrix(tree, start, node, walked, distance, max) {\n  walked.push(node)\n\n  if (distance >= max) {\n    return\n  }\n  if (node !== start && node.leaf === true) {\n    tree.pairwiseOps.pairwiseMatrix[start.id].push([node.id, distance])\n  }\n  for (let child of node.children) {\n    if (! walked.includes(child)) {\n      let newDistance = distance + child.branchLength\n      newDistance = parseFloat(newDistance.toFixed(10))\n      walkMatrix(tree, start, child, walked, newDistance, max)\n    }\n  }\n  if (node.parent && ! walked.includes(node.parent)) {\n    let newDistance = distance + node.branchLength\n    newDistance = parseFloat(newDistance.toFixed(10))\n    walkMatrix(tree, start, node.parent, walked, newDistance, max)\n  }\n}\n\nfunction buildPairwiseMatrix() {\n  for (let leaf of this.leaves) {\n    this.pairwiseOps.pairwiseMatrix[leaf.id] = []\n    walkMatrix(this, leaf, leaf, [], 0, this.pairwiseOps.clusterMaxDistance)\n  }\n  console.log(this.pairwiseOps.pairwiseMatrix)\n}\n*/\n\n/*\nfunction buildClusterMatrix() {\n  this.pairwiseOps.clusterMatrix = []\n  for (let leaf in this.pairwiseOps.pairwiseMatrix) {\n    let cluster = [leaf]\n    for (let node of this.pairwiseOps.pairwiseMatrix[leaf]) {\n      if (node[1] <= this.pairwiseOps.clusterDistance) {\n        cluster.push(node[0])\n      }\n    }\n    if (cluster.length >= this.pairwiseOps.clusterSamples) {\n      cluster.sort()\n      cluster = JSON.stringify(cluster)\n      if (! this.pairwiseOps.clusterMatrix.includes(cluster)) {\n        this.pairwiseOps.clusterMatrix.push(cluster)\n      }\n    }\n  }\n}\n*/\n\nfunction walkMatrix(tree, node, path, distance) {\n  let newDistance = Array.from(distance)\n  let newPath = Array.from(path)\n  newDistance.push(node.branchLength)\n  if (node.leaf === false) {\n    newPath.push(node.id)\n    tree.pairwiseOps.pairwiseMatrix.internalNodes[node.id] = []\n    for (let child of node.children) {\n      walkMatrix(tree, child, newPath, newDistance)\n    }\n  } else {\n    tree.pairwiseOps.pairwiseMatrix.leaves[node.id] = {}\n    newDistance.push(newDistance.shift())\n    for (let i in newPath) {\n      let nodeLength = newDistance.slice(i).reduce((previousValue, currentValue) => previousValue + currentValue)\n      for (let leaf of tree.pairwiseOps.pairwiseMatrix.internalNodes[newPath[i]]) {\n        if (! Object.keys(tree.pairwiseOps.pairwiseMatrix.leaves[node.id]).includes(leaf[0])) {\n          tree.pairwiseOps.pairwiseMatrix.leaves[node.id][leaf[0]] = leaf[1] + nodeLength\n        } else if (tree.pairwiseOps.pairwiseMatrix.leaves[node.id][leaf[0]] > leaf[1] + nodeLength) {\n          tree.pairwiseOps.pairwiseMatrix.leaves[node.id][leaf[0]] = leaf[1] + nodeLength\n        }\n      }\n      tree.pairwiseOps.pairwiseMatrix.internalNodes[newPath[i]].push([node.id, nodeLength])\n    }\n  }  \n}\n\nfunction buildPairwiseMatrix() {\n  this.pairwiseOps.pairwiseMatrix = {\"internalNodes\": {}, \"leaves\": {}}\n  walkMatrix(this, this.root, [], [])\n  for (let node in this.pairwiseOps.pairwiseMatrix.leaves) {\n    for (let leaf in this.pairwiseOps.pairwiseMatrix.leaves[node]) {\n      this.pairwiseOps.pairwiseMatrix.leaves[leaf][node] = this.pairwiseOps.pairwiseMatrix.leaves[node][leaf]\n    }\n  }\n  console.log(this.pairwiseOps.pairwiseMatrix.leaves)\n}\n\nfunction buildClusterMatrix() {\n  this.pairwiseOps.clusterMatrix = []\n  for (let leaf in this.pairwiseOps.pairwiseMatrix.leaves) {\n    let cluster = [leaf]\n    for (let pair in this.pairwiseOps.pairwiseMatrix.leaves[leaf]) {\n      if (this.pairwiseOps.pairwiseMatrix.leaves[leaf][pair] <= this.pairwiseOps.clusterDistance) {\n        cluster.push(pair)\n      }\n    }\n    if (cluster.length >= this.pairwiseOps.clusterSamples) {\n      cluster.sort()\n      cluster = JSON.stringify(cluster)\n      if (! this.pairwiseOps.clusterMatrix.includes(cluster)) {\n        this.pairwiseOps.clusterMatrix.push(cluster)\n      }\n    }\n  }\n}\n\nfunction colorNode() {\n  for (let leaf of this.leaves) {\n    leaf.setDisplay({\n      colour: this.branchColour,\n    })\n    leaf.label = leaf.id\n  }\n  for (let cluster of this.pairwiseOps.clusterMatrix) {\n    cluster = JSON.parse(cluster)\n    for (let id of cluster) {\n      \n      for (let leaf of this.findLeaves(id)) {\n        leaf.label += \"+\"\n        leaf.setDisplay({\n          colour: 'red',\n        })\n      }\n    }\n  }\n  this.draw()\n}\n\nfunction drawClusterInfo() {\n  let label = \"Cluster Size: \" + String(this.pairwiseOps.clusterSamples) + \"; Cluster Distance: \" + String(this.pairwiseOps.clusterDistance)\n  let ctx = this.canvas\n  ctx.font = \"30px Arial\";\n  ctx.fillText(label, ctx.canvas.width - ctx.measureText(label).width - 10, ctx.canvas.height - 10)\n}\n\nexport default function plugin(decorate) {\n  decorate(this, 'createTree', (delegate, args) => {\n    const tree = delegate(...args);\n    const [ , config = {} ] = args;\n    tree.pairwiseOps = Object.assign({}, DEFAULTS, config.pairwiseOps || {});\n    return tree;\n  });\n  decorate(Tree, 'load', function (delegate, args) {\n    delegate.apply(this, args);\n    if (this.pairwiseOps.active) {\n      buildPairwiseMatrix.apply(this);\n      if (this.pairwiseOps.clusterActive) {\n        this.pairwiseOps.clusterDraw = true;\n      }\n    }   \n  });\n  decorate(Tree, 'draw', function (delegate, args) {\n    delegate.apply(this, args);\n    if (this.pairwiseOps.clusterActive) {\n      if (this.pairwiseOps.clusterDraw) {\n        this.pairwiseOps.clusterDraw = false;\n        buildClusterMatrix.apply(this);\n        colorNode.apply(this);\n      }\n      drawClusterInfo.apply(this);\n    }\n  });\n}\n","import React, { useEffect, useRef } from \"react\";\nimport Phylocanvas from \"phylocanvas\";\nimport scalebar from \"phylocanvas-plugin-scalebar\";\nimport branchLength from \"phylocanvas-plugin-branch-length\";\nimport root from \"phylocanvas-plugin-root\";\nimport pairwiseOps from \"phylocanvas-plugin-pairwise-ops\";\nPhylocanvas.plugin(scalebar)\nPhylocanvas.plugin(branchLength)\nPhylocanvas.plugin(root)\nPhylocanvas.plugin(pairwiseOps)\n\nfunction PhylocanvasView(props) {\n  let phylocanvas = useRef();\n  let typeList = useRef([\"radial\", \"rectangular\", \"circular\", \"diagonal\", \"hierarchical\"])\n\n  useEffect(() => {\n    phylocanvas.current = Phylocanvas.createTree(\"phylocanvas\")\n    console.log(phylocanvas.current)\n  }, [])\n\n  useEffect(() => {\n    phylocanvas.current.load(props.tree)\n  }, [props.tree])\n\n  useEffect(() => {\n    if (typeList.current.includes(props.type)) {\n      phylocanvas.current.setTreeType(props.type)\n    } else {\n      phylocanvas.current.setTreeType(\"circular\")\n    }\n  }, [props.type])\n\n  useEffect(() => {\n    phylocanvas.current.setNodeSize(props.nodeSize)\n  }, [props.nodeSize])\n\n  useEffect(() => {\n    phylocanvas.current.setTextSize(props.textSize)\n  }, [props.textSize])\n\n  useEffect(() => {\n    phylocanvas.current.showLabels = props.labels\n    phylocanvas.current.alignLabels = props.align\n    phylocanvas.current.lineWidth = props.lineWidth\n    phylocanvas.current.draw()\n  }, [props.labels, props.align, props.lineWidth])\n\n  useEffect(() => {\n    phylocanvas.current.pairwiseOps.clusterDistance = props.clusterDistance\n    phylocanvas.current.pairwiseOps.clusterSamples = props.clusterSamples\n    console.log(phylocanvas.current)\n    phylocanvas.current.pairwiseOps.clusterDraw = true\n    phylocanvas.current.draw()\n  }, [props.clusterDistance, props.clusterSamples])\n\n  return (\n    <div id=\"phylocanvas\"></div>\n  )\n}\n\nexport default PhylocanvasView;\n","import React, {useEffect, useState} from \"react\";\nimport Phylocanvas from \"../phylocanvas/Phylocanvas.js\";\n\nfunction PhylocanvasView() {\n  const [tree, setTree] = useState(\"(A:1)B;\");\n  const [type, setType] = useState(\"radial\");\n  const [labels, setLabels] = useState(true);\n  const [align, setAlign] = useState(false);\n  const [nodeSize, setNodeSize] = useState(10);\n  const [textSize, setTextSize] = useState(15);\n  const [lineWidth, setLineWidth] = useState(2);\n  const [clusterDistance, setClusterDistance] = useState(3);\n  const [clusterSamples, setClusterSamples] = useState(3);\n\n  useEffect(() => {\n    setTree(\"(((((((((GAS-TG262730-095:6.5,TG78255:6.5):2,TG93342:4):0.5,((((TG77939:0,(GAS-TG93657:0,GAS_TG93657:0):1,GAS-TG262282-095:4):0.5,((GAS-TG265461-095:0,(AZ_GAS_TG93637:0,GAS-TG93661:0,GAS_TG93661:0):2):1,(TG92312:0,TG92296:0):1):1.5,TG92248:3,((TG77951:1.5,((GAS-TG114483-xx-CL-USA-2018-081-JB:0,GAS-TG133136-095:1,GAS-TG265457-095:1,GAS-AZ00097772-095:5):0.5,GAS-TG262724-095:2.5):2.5):1.5,TG78167:1.5):4):3,TG78091:6):0.5,(((GAS-TG264245-095:2,(GAS-TG263365-095:0,GAS-TG264943-095:0):4):2,TG78195:5):0.5,((GAS-AZ00096535-095:0.5,(GAS-TG262761-095:0,TG92324:0,GAS-AZ00104982-095:2,GAS-TG263373-095:2):0.5):0.5,((GAS-TG133036-095:0,(GAS-TG264144-095:0,GAS-AZ00099104-095:2):2):1.5,(GAS-AZ00098934-095:0,GAS-TG113124-xx-CL-USA-2018-081-JB:0,GAS-AZ00096587-095:1):1.5):0.5):1.5):3.5):1.5):8,(((((((TG93354:2,TG78207:5):0.5,GAS-AZ00097136-095:11.5):0.5,GAS-TG133056-095:7.5):0.5,((GAS-TG114463-xx-CL-USA-2018-081-JB:1,TG92352:1):1,TG92304:3):10.5):0.5,((TG78139:3,TG78135:5):0.5,TG77975:3.5):0.5):1,GAS-TG264961-095:4):4,GAS-TG264410-095:14):12):15.5,(GAS-TG263371-095:0,48-P:1,((GAS-TG133148-095:0,GAS-TG132944-095:0,GAS-TG132972-095:0):2,(GAS-TG133052-095:0,GAS-TG133168-095:0):2):1,GAS-TG133128-095:1,(71-P:0,GAS-TG133016-095:0,GAS-TG133024-095:0,GAS-TG133084-095:0,GAS-TG133140-095:0):2):27.5):542,(((TG78063:0,TG78143:0):3.5,06_283016:7.5):14,TG93378:25):601):294.5,(((((((((GAS-TG93649:0,GAS_TG93649:0):3,Streptococcus-Group-A-TG93461:5):1,(GAS-TG133888-095:0,GAS-TG264954-095:0,GAS-TG265455-095:0,TG92284:0,GAS-TG253210-095:1,GAS-TG262286-095:1,GAS-TG262720-095:1,GAS-FMCTG95165-xx-CL-USA-2017-040-JB:2,GAS-TG133996-095:3):6):0.5,GAS-AZ00097292-095:8.5):2,GAS-TG262728-095:12):0.5,(((TG93242:5,GAS-TG257140-095:9):4,TG93382:4,TG92970:5):0.5,TG92252:11.5):0.5):5,GAS-TG132920-095:15):25.5,((((06_286011:0,TG93442:0):4,06_284001:9):3.5,TG78099:3.5,TG93346:9):1,(TG78075:6,TG78051:7):3):66.5):16,TG78271:52):849.5):14,(((((((((68-P:1,GAS-TG132860-095:2,(GAS-TG134544-095:0,GAS-TG253208-081:0,GAS-TG257032-095:0,GAS-TG265449-095:0,GAS-TG263375-095:1,(GAS-TG264402-095:0,GAS-TG264413-095:0):1,GAS-TG134548-095:2):7):1,(TG93621:2,GAS-TG257136-095:6):2,(GAS-TG253216-095:4,GAS-TG133124-095:6):4,TG92712:5,(GAS-TG132888-095:0,GAS-TG133164-095:0):7):0.5,TG93210:8.5):0.5,(((GAS_TG93689:3,GAS-TG133132-095:7):0.5,GAS-TG133160-095:4.5):0.5,(GAS-AZ00097462-095:0,GAS-TG264251-095:0):6.5):1,(((31316:0,31315:0,31642:0):2,(TG92736:0,TG92748:0,TG92752:0,TG92744:1):2,GAS-TG114447-xx-CL-USA-2018-081-JB:5):0.5,((TG92340:3,TG128496:4):0.5,GAS-TG262284-095:3.5):1.5):1.5,(GAS-TG132852-095:0,GAS-TG132904-095:0):8):0.5,TG92280:8.5):0.5,(((TG92364:0,GAS-TG132924-095:2,TG92220:2):0.5,GAS-TG133968-095:6.5):0.5,(TG92140:1,GAS-TG133988-095:2):1.5):2.5):0.5,((((((R:0,GAS-TG133876-095:1):2,TG93993:2,TG93625:4):0.5,GAS-TG132844-095:1.5):0.5,GAS-TG264242-095:5.5):0.5,(((TG92212:1.5,TG92148:3.5):2.5,GAS-TG264236-095:4.5):0.5,(((GAS-AZ00105903-095:0,GAS-TG264953-095:1):2,(GAS_TG93701:0,GAS_TG93705:0):2,(GAS-TG132916-095:0,GAS-TG133064-095:0):3):2.5,((GAS-AZ00106486-095:0,GAS-TG265363-095:0,(GAS-TG264231-095:0,GAS-AZ00097422-095:0,GAS-AZ00098554-095:0):2):1,GAS-TG134368-095:1,GAS-TG253222-095:1,GAS-TG134032-095:2):7.5):1.5):1.5):0.5,((GAS-TG262751-095:2,TG92756:7):2,((GAS-TG134064-095:0,GAS-TG264408-095:2):1.5,GAS-FMCTG98539-xx-CL-USA-2017-040-JB:2.5):4):0.5):0.5):121.5,((TG78103:4.5,TG93370:10.5):2,(TG93290:1.5,TG77991:3.5):4):136.5):337.5,(TG93262:3,TG78175:4):544.5):695):11\");\n    setType(\"rectangular\");\n  }, [])\n\n  return (\n    <div>\n      <h1>Phylocanvas Demo</h1>\n      <Phylocanvas\n        tree = {tree}\n        type = {type}\n        labels = {labels}\n        align = {align}\n        nodeSize = {nodeSize}\n        textSize = {textSize}\n        lineWidth = {lineWidth}\n        clusterDistance = {clusterDistance}\n        clusterSamples = {clusterSamples}\n      />\n      <h5>Type:</h5>\n      <button onClick={() => setType(\"radial\")}>Radial</button>\n      <button onClick={() => setType(\"rectangular\")}>Rectangular</button>\n      <button onClick={() => setType(\"circular\")}>Circular</button>\n      <button onClick={() => setType(\"diagonal\")}>Diagonal</button>\n      <button onClick={() => setType(\"hierarchical\")}>Hierarchical</button>\n      <h5>Cluster Detection:</h5>\n      <button onClick={() => setClusterDistance(clusterDistance + 1)}>ClusterDistance + 1</button>\n      <button onClick={() => setClusterDistance(clusterDistance - 1)}>ClusterDistance - 1</button>\n      <button onClick={() => setClusterSamples(clusterSamples + 1)}>ClusterSamples + 1</button>\n      <button onClick={() => setClusterSamples(clusterSamples - 1)}>ClusterSamples - 1</button>\n      <h5>Toggle:</h5>\n      <button onClick={() => setLabels(!labels)}>Labels</button>\n      <button onClick={() => setAlign(!align)}>Align</button>\n      <h5>Style:</h5>\n      <button onClick={() => setNodeSize(nodeSize + 1)}>Node Size + 1</button>\n      <button onClick={() => setNodeSize(nodeSize - 1)}>Node Size - 1</button>\n      <button onClick={() => setTextSize(textSize + 1)}>Text Size + 1</button>\n      <button onClick={() => setTextSize(textSize - 1)}>Text Size - 1</button>\n      <button onClick={() => setLineWidth(lineWidth + 1)}>Line Width + 1</button>\n      <button onClick={() => setLineWidth(lineWidth - 1)}>Line Width - 1</button>\n    </div>\n  )\n}\n\nexport default PhylocanvasView;\n","import React, { useEffect, useRef } from \"react\";\nimport Leaflet from \"leaflet\";\nimport { MapContainer, TileLayer, Marker, Popup } from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport icon from 'leaflet/dist/images/marker-icon.png';\nimport iconShadow from 'leaflet/dist/images/marker-shadow.png';\nimport iconRetina from 'leaflet/dist/images/marker-icon-2x.png';\n\n/*function SetView() {\n  const map = useMapEvent('click', () => {\n    map.setCenter([0,0])\n  })\n  return null  \n}*/\n\nfunction LeafletView(props) {\n\n  delete Leaflet.Icon.Default.prototype._getIconUrl;\n  Leaflet.Icon.Default.mergeOptions({\n    iconRetinaUrl: iconRetina,\n    iconUrl: icon,\n    shadowUrl: iconShadow\n  });\n\n  useEffect(() => {\n  }, [props.center])\n\n  return (\n    <MapContainer style={{ height: '400px' }} center={props.center} zoom={props.zoom} scrollWheelZoom={false}>\n      <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" />\n      <Marker position={props.center}>\n        <Popup>\n          A pretty CSS3 popup. <br /> Easily customizable.\n        </Popup>\n      </Marker>\n    </MapContainer>\n  )\n}\n\nexport default LeafletView;\n","import React, { useEffect, useState } from \"react\";\nimport Leaflet from \"../leaflet/Leaflet.js\";\n\nfunction LeafletView() {\n  const [center, setCenter] = useState([35.2, -111.65]);\n  const [zoom, setZoom] = useState(6)\n\n  useEffect(() => {\n    document.getElementById(\"demoLeafletXCenter\").value = center[0]\n    document.getElementById(\"demoLeafletYCenter\").value = center[1]\n  }, [])  \n\n  return (\n    <div>\n      <h1>Leaflet Demo</h1>\n      <Leaflet\n        center = {center}\n        zoom = {zoom}\n      />\n      <h5>Marker Position:</h5>\n      X: <input id=\"demoLeafletXCenter\" onChange={() => {setCenter([document.getElementById(\"demoLeafletXCenter\").value, center[1]])}}></input>\n      &emsp;Y: <input id=\"demoLeafletYCenter\" onChange={() => {setCenter([center[0], document.getElementById(\"demoLeafletYCenter\").value])}}></input>\n    </div>\n  )\n}\n\nexport default LeafletView;\n","import React, {useEffect} from \"react\";\nimport Plotly from \"plotly.js-dist\";\n\nfunction PlotlyView(props) {\n\n  useEffect(() => {\n    Plotly.react('plotly', props.data)\n  }, [props.data])\n\n  return (\n    <div id=\"plotly\"></div>\n  )\n}\n\nexport default PlotlyView;\n","import React, {useEffect, useState} from \"react\";\nimport Plotly from \"../plotly/Plotly.js\";\n\nfunction PlotlyView() {\n  const [x, setX] = useState([\"data1\", \"data2\"]);\n  const [y, setY] = useState([15, 20]);\n  const [type, setType] = useState(\"bar\");\n\n  useEffect(() => {\n    document.getElementById(\"demoPlotlyXLabel\").value = x[0]\n    document.getElementById(\"demoPlotlyYLabel\").value = x[1]\n    document.getElementById(\"demoPlotlyXValue\").value = y[0]\n    document.getElementById(\"demoPlotlyYValue\").value = y[1]\n  }, [])\n\n  return (\n    <div>\n      <h1>Plotly Demo</h1>\n      <Plotly\n        data = {\n          [\n            {\n              x: x,\n              y: y,\n              type: type\n            }\n          ]\n        }\n      />\n      <h5>Labels:</h5>\n      X: <input id=\"demoPlotlyXLabel\" onChange={() => setX([document.getElementById(\"demoPlotlyXLabel\").value, x[1]])}></input>\n      &emsp;Y: <input id=\"demoPlotlyYLabel\" onChange={() => setX([x[0], document.getElementById(\"demoPlotlyYLabel\").value])}></input>\n      <h5>Data:</h5>\n      X: <input id=\"demoPlotlyXValue\" onChange={() => setY([parseInt(document.getElementById(\"demoPlotlyXValue\").value), y[1]])}></input>\n      &emsp;Y: <input id=\"demoPlotlyYValue\" onChange={() => setY([y[0], parseInt(document.getElementById(\"demoPlotlyYValue\").value)])}></input>\n      <h5>Type:</h5>\n      <button onClick={() => setType(\"bar\")}>Bar</button>\n      <button onClick={() => setType(\"scatter\")}>Scatter</button>\n    </div>\n  )\n}\n\nexport default PlotlyView;\n","import React, {useEffect, useState} from \"react\";\nimport Phylocanvas from \"../phylocanvas/Phylocanvas.js\";\n\nfunction PhylocanvasView() {\n  const [tree, setTree] = useState(\"(A:1)B;\");\n  const [type, setType] = useState(\"radial\");\n  const [labels, setLabels] = useState(true);\n  const [align, setAlign] = useState(false);\n  const [nodeSize, setNodeSize] = useState(10);\n  const [textSize, setTextSize] = useState(15);\n  const [lineWidth, setLineWidth] = useState(2);\n  const [clusterDistance, setClusterDistance] = useState(3);\n  const [clusterSamples, setClusterSamples] = useState(3);\n\n  useEffect(() => {\n    setTree(\"((((((((GAS-TG262730-095:6.5,TG78255:6.5):2,TG93342:4):0.5,((((TG77939:0,(GAS-TG93657:0,GAS_TG93657:0):1,GAS-TG262282-095:4):0.5,((GAS-TG265461-095:0,(AZ_GAS_TG93637:0,GAS-TG93661:0,GAS_TG93661:0):2):1,(TG92312:0,TG92296:0):1):1.5,TG92248:3,((TG77951:1.5,((GAS-TG114483-xx-CL-USA-2018-081-JB:0,GAS-TG133136-095:1,GAS-TG265457-095:1,GAS-AZ00097772-095:5):0.5,GAS-TG262724-095:2.5):2.5):1.5,TG78167:1.5):4):3,TG78091:6):0.5,(((GAS-TG264245-095:2,(GAS-TG263365-095:0,GAS-TG264943-095:0):4):2,TG78195:5):0.5,((GAS-AZ00096535-095:0.5,(GAS-TG262761-095:0,TG92324:0,GAS-AZ00104982-095:2,GAS-TG263373-095:2):0.5):0.5,((GAS-TG133036-095:0,(GAS-TG264144-095:0,GAS-AZ00099104-095:2):2):1.5,(GAS-AZ00098934-095:0,GAS-TG113124-xx-CL-USA-2018-081-JB:0,GAS-AZ00096587-095:1):1.5):0.5):1.5):3.5):1.5):8,(((((((TG93354:2,TG78207:5):0.5,GAS-AZ00097136-095:11.5):0.5,GAS-TG133056-095:7.5):0.5,((GAS-TG114463-xx-CL-USA-2018-081-JB:1,TG92352:1):1,TG92304:3):10.5):0.5,((TG78139:3,TG78135:5):0.5,TG77975:3.5):0.5):1,GAS-TG264961-095:4):4,GAS-TG264410-095:14):12):15.5,(GAS-TG263371-095:0,48-P:1,((GAS-TG133148-095:0,GAS-TG132944-095:0,GAS-TG132972-095:0):2,(GAS-TG133052-095:0,GAS-TG133168-095:0):2):1,GAS-TG133128-095:1,(71-P:0,GAS-TG133016-095:0,GAS-TG133024-095:0,GAS-TG133084-095:0,GAS-TG133140-095:0):2):27.5):542,(((TG78063:0,TG78143:0):3.5,06_283016:7.5):14,TG93378:25):601):294.5,(((((((((GAS-TG93649:0,GAS_TG93649:0):3,Streptococcus-Group-A-TG93461:5):1,(GAS-TG133888-095:0,GAS-TG264954-095:0,GAS-TG265455-095:0,TG92284:0,GAS-TG253210-095:1,GAS-TG262286-095:1,GAS-TG262720-095:1,GAS-FMCTG95165-xx-CL-USA-2017-040-JB:2,GAS-TG133996-095:3):6):0.5,GAS-AZ00097292-095:8.5):2,GAS-TG262728-095:12):0.5,(((TG93242:5,GAS-TG257140-095:9):4,TG93382:4,TG92970:5):0.5,TG92252:11.5):0.5):5,GAS-TG132920-095:15):25.5,((((06_286011:0,TG93442:0):4,06_284001:9):3.5,TG78099:3.5,TG93346:9):1,(TG78075:6,TG78051:7):3):66.5):16,TG78271:52):849.5):14,(((((((((68-P:1,GAS-TG132860-095:2,(GAS-TG134544-095:0,GAS-TG253208-081:0,GAS-TG257032-095:0,GAS-TG265449-095:0,GAS-TG263375-095:1,(GAS-TG264402-095:0,GAS-TG264413-095:0):1,GAS-TG134548-095:2):7):1,(TG93621:2,GAS-TG257136-095:6):2,(GAS-TG253216-095:4,GAS-TG133124-095:6):4,TG92712:5,(GAS-TG132888-095:0,GAS-TG133164-095:0):7):0.5,TG93210:8.5):0.5,(((GAS_TG93689:3,GAS-TG133132-095:7):0.5,GAS-TG133160-095:4.5):0.5,(GAS-AZ00097462-095:0,GAS-TG264251-095:0):6.5):1,(((31316:0,31315:0,31642:0):2,(TG92736:0,TG92748:0,TG92752:0,TG92744:1):2,GAS-TG114447-xx-CL-USA-2018-081-JB:5):0.5,((TG92340:3,TG128496:4):0.5,GAS-TG262284-095:3.5):1.5):1.5,(GAS-TG132852-095:0,GAS-TG132904-095:0):8):0.5,TG92280:8.5):0.5,(((TG92364:0,GAS-TG132924-095:2,TG92220:2):0.5,GAS-TG133968-095:6.5):0.5,(TG92140:1,GAS-TG133988-095:2):1.5):2.5):0.5,((((((R:0,GAS-TG133876-095:1):2,TG93993:2,TG93625:4):0.5,GAS-TG132844-095:1.5):0.5,GAS-TG264242-095:5.5):0.5,(((TG92212:1.5,TG92148:3.5):2.5,GAS-TG264236-095:4.5):0.5,(((GAS-AZ00105903-095:0,GAS-TG264953-095:1):2,(GAS_TG93701:0,GAS_TG93705:0):2,(GAS-TG132916-095:0,GAS-TG133064-095:0):3):2.5,((GAS-AZ00106486-095:0,GAS-TG265363-095:0,(GAS-TG264231-095:0,GAS-AZ00097422-095:0,GAS-AZ00098554-095:0):2):1,GAS-TG134368-095:1,GAS-TG253222-095:1,GAS-TG134032-095:2):7.5):1.5):1.5):0.5,((GAS-TG262751-095:2,TG92756:7):2,((GAS-TG134064-095:0,GAS-TG264408-095:2):1.5,GAS-FMCTG98539-xx-CL-USA-2017-040-JB:2.5):4):0.5):0.5):121.5,((TG78103:4.5,TG93370:10.5):2,(TG93290:1.5,TG77991:3.5):4):136.5):337.5,(TG93262:3,TG78175:4):544.5):695):0;\");\n    setType(\"rectangular\");\n  }, [])\n\n  return (\n    <div>\n      <h1>Group A Strep (demo)</h1>\n      <Phylocanvas\n        tree = {tree}\n        type = {type}\n        labels = {labels}\n        align = {align}\n        nodeSize = {nodeSize}\n        textSize = {textSize}\n        lineWidth = {lineWidth}\n        clusterDistance = {clusterDistance}\n        clusterSamples = {clusterSamples}\n      />\n      <h5>Type:</h5>\n      <button onClick={() => setType(\"radial\")}>Radial</button>\n      <button onClick={() => setType(\"rectangular\")}>Rectangular</button>\n      <button onClick={() => setType(\"circular\")}>Circular</button>\n      <button onClick={() => setType(\"diagonal\")}>Diagonal</button>\n      <button onClick={() => setType(\"hierarchical\")}>Hierarchical</button>\n      <h5>Cluster Detection:</h5>\n      <button onClick={() => setClusterDistance(clusterDistance + 1)}>ClusterDistance + 1</button>\n      <button onClick={() => setClusterDistance(clusterDistance - 1)}>ClusterDistance - 1</button>\n      <button onClick={() => setClusterSamples(clusterSamples + 1)}>ClusterSamples + 1</button>\n      <button onClick={() => setClusterSamples(clusterSamples - 1)}>ClusterSamples - 1</button>\n      <h5>Toggle:</h5>\n      <button onClick={() => setLabels(!labels)}>Labels</button>\n      <button onClick={() => setAlign(!align)}>Align</button>\n      <h5>Style:</h5>\n      <button onClick={() => setNodeSize(nodeSize + 1)}>Node Size + 1</button>\n      <button onClick={() => setNodeSize(nodeSize - 1)}>Node Size - 1</button>\n      <button onClick={() => setTextSize(textSize + 1)}>Text Size + 1</button>\n      <button onClick={() => setTextSize(textSize - 1)}>Text Size - 1</button>\n      <button onClick={() => setLineWidth(lineWidth + 1)}>Line Width + 1</button>\n      <button onClick={() => setLineWidth(lineWidth - 1)}>Line Width - 1</button>\n    </div>\n  )\n}\n\nexport default PhylocanvasView;\n\n/***** (plotly demo)\nimport React, {useEffect, useState} from \"react\";\nimport Plotly from \"../plotly/Plotly.js\";\n\nfunction PlotlyView() {\n  const [x, setX] = useState([\"data1\", \"data2\"]);\n  const [y, setY] = useState([15, 20]);\n  const [type, setType] = useState(\"bar\");\n\n  useEffect(() => {\n    document.getElementById(\"demoPlotlyXLabel\").value = x[0]\n    document.getElementById(\"demoPlotlyYLabel\").value = x[1]\n    document.getElementById(\"demoPlotlyXValue\").value = y[0]\n    document.getElementById(\"demoPlotlyYValue\").value = y[1]\n  }, [])\n\n  return (\n    <div>\n      <h1>Plotly Demo</h1>\n      <Plotly\n        data = {\n          [\n            {\n              x: x,\n              y: y,\n              type: type\n            }\n          ]\n        }\n      />\n      <h5>Labels:</h5>\n      X: <input id=\"demoPlotlyXLabel\" onChange={() => setX([document.getElementById(\"demoPlotlyXLabel\").value, x[1]])}></input>\n      &emsp;Y: <input id=\"demoPlotlyYLabel\" onChange={() => setX([x[0], document.getElementById(\"demoPlotlyYLabel\").value])}></input>\n      <h5>Data:</h5>\n      X: <input id=\"demoPlotlyXValue\" onChange={() => setY([parseInt(document.getElementById(\"demoPlotlyXValue\").value), y[1]])}></input>\n      &emsp;Y: <input id=\"demoPlotlyYValue\" onChange={() => setY([y[0], parseInt(document.getElementById(\"demoPlotlyYValue\").value)])}></input>\n      <h5>Type:</h5>\n      <button onClick={() => setType(\"bar\")}>Bar</button>\n      <button onClick={() => setType(\"scatter\")}>Scatter</button>\n    </div>\n  )\n}\n\nexport default PlotlyView;\n*/\n","import React from \"react\";\nimport {BrowserRouter, Switch, Route} from \"react-router-dom\";\nimport DemoPhylocanvas from \"../demo/DemoPhylocanvas.js\";\nimport DemoLeaflet from \"../demo/DemoLeaflet.js\";\nimport DemoPlotly from \"../demo/DemoPlotly.js\";\nimport GAS from \"../gas/GAS.js\";\n\nfunction Body() {\n  return (\n    <div className=\"Body\">\n      <BrowserRouter basename=\"/epitools\">\n        <Switch>\n          <Route exact path=\"/\">\n            <p>default</p>\n          </Route>\n          <Route exact path=\"/demo-phylocanvas\">\n            <DemoPhylocanvas />\n          </Route>\n          <Route exact path=\"/demo-leaflet\">\n            <DemoLeaflet />\n          </Route>\n          <Route exact path=\"/demo-plotly\">\n            <DemoPlotly />\n          </Route>\n          <Route exact path=\"/gas\">\n            <GAS />\n          </Route>\n        </Switch>\n      </BrowserRouter>\n    </div>\n  )\n}\n\nexport default Body;\n","import React from \"react\";\n\nfunction Footer() {\n  return (\n    <div className=\"Footer\">\n      hello footer\n    </div>\n  )\n}\n\nexport default Footer;\n","import React from \"react\";\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Header from \"./nav/Header.js\";\nimport Body from \"./nav/Body.js\"\nimport Footer from \"./nav/Footer.js\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Body />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.js';\nimport reportWebVitals from './reportWebVitals.js';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}